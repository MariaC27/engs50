https://thayer.github.io/engs50/Notes/design/design.html
3
16120
<!DOCTYPEhtml><html><head><metacharset="utf-8"><metahttp-equiv="X-UA-Compatible"content="IE=edge"><metaname="viewport"content="width=device-width,initial-scale=1"><title>Softwaredesignmethodology</title><metaname="description"content="InEngs50youwilllearnhowtodesign&buildlarge,reliable,maintainable,andunderstandablesoftwaresystems.IntheprocessyouwilllearntoprograminCwithUnixdevelopmenttools."><linkrel="shortcuticon"href="/engs50/50.png"/><linkrel="stylesheet"href="/engs50/css/main.css"><linkrel="canonical"href="/engs50/Notes/design/design.html"></head><body><headerclass="site-header"><aclass="site-title"href="/engs50/"><imgwidth=48align=centersrc="/engs50/50.png"alt="icon">Engs50(CS50)</a><navclass="site-nav">[<ahref="/engs50/Labs/">Labs</a>][<ahref="/engs50/Notes/">Notes</a>][<ahref="/engs50/Reading/">Reading</a>][<ahref="/engs50/Resources/">Resources</a>][<ahref="/engs50/Examples/">Examples</a>]</nav></header><divclass="page-content"><divclass="wrapper"><articleclass="post"><headerclass="post-header"><h1class="post-title">Softwaredesignmethodology</h1></header><divclass="post-content"><h3id="goals">Goals</h3><p>Inthislecture,weintroduceasimplesoftwaredesignmethodology.It’sbynomeanstheonlymethodology-butit’sstraightforwardandusefulforCS50.</p><blockquote><p><em>Allprogrammersareoptimists</em>–FrederickP.Brooks,Jr.</p></blockquote><p>Here’sacoolsourceofthoughtfulmaximsforsoftwaredevelopment:<em>ThePragmaticProgrammer</em>,byAndrewHuntandDavidThomas(2000,AddisonWesley).Theirbookissuper,andtheir<ahref="http://pragprog.com/the-pragmatic-programmer/extracts/tips">“tiplist”isavailableontheweb</a>.Wesprinklesomeoftheirtipsthroughoutthelectures.</p><h2id="software-system-design-methodology">Softwaresystemdesignmethodology</h2><p>Therearemanytechniquesforthedesignanddevelopmentofgoodcodeincludingtop-downorbottom-updesign;divideandconquer(breakingthesystemdownintosmallermoreunderstandablecomponents),structureddesign(dataflow-orienteddesignapproach),andobject-orienteddesign(modularity,abstraction,andinformation-hiding).Foraquicksurveyoftheseandothertechniques,see<em><ahref="/engs50/Notes/design/survey.html">ASurveyofMajorSoftwareDesignMethodologies</a></em>(authorunknown).</p><p>Manyofthesetechniquesusesimilarapproaches,andembracefundamentalconceptslikeabstraction,datarepresentation,dataflow,datastructures,andtop-downdecompositionfromrequirementstostructure.</p><p>Itseemsunlikelythatsomeonecouldgiveyou10stepstofollowandbeassuredofgreatsystemsoftware.Everynon-trivialprojecthasitsspecialcases,uniqueenvironments,orunexpecteduses.It’softenbesttobegindevelopmentofamodule,orasystem,withsmallexperiments-buildingaprototypeandthrowingitaway-becauseyoucanlearn(andmakemistakes)buildingsmallprototypesystems.</p><p><ahref="http://pragprog.com/the-pragmatic-programmer/extracts/tips">PragmaticProgrammerTip</a>:</p><blockquote><p><strong>PrototypetoLearn.</strong>Prototypingisalearningexperience.Itsvalueliesnotinthecodeyouproduce,butinthelessonsyoulearn.</p></blockquote><p>Claritycomesfromtheexperienceofworkingfromrequirements,throughsystemdesign,implementationandtesting,tointegrationandcustomerfeedbackontherequirements.</p><p>ThefollowingfigureshowsthesoftwaredesignmethodologythatweuseinthedesignoftheTinySearchEngineandtheproject.</p><p><imgsrc="/engs50/Notes/design/SWDesignMethology.png"alt="Softwaresystemdesignmethodology"/></p><hr/><p>Let’sstepthroughthephasesofsoftwaredesign,asshowninthefigureabove.</p><h2id="procurement-phase">Procurementphase</h2><p>Theprocurementphaseofaprojectrepresentsitsearlystages.Itrepresentsdeepdiscussionbetweenacustomerandproviderofsoftwaresystems.Asasoftwaredeveloper,youhavetoclearlyunderstandandcapturethecustomers’needs.Inourcase,youaretheproviderandwe(CS50staff)areyourcustomer.</p><h3id="requirements-spec">RequirementsSpec</h3><p><ahref="http://pragprog.com/the-pragmatic-programmer/extracts/tips">PragmaticProgrammerTip</a>:</p><blockquote><p><strong>Don’tGatherRequirements–DigforThem.</strong>Requirementsrarelylieonthesurface.They’reburieddeepbeneathlayersofassumptions,misconceptions,andpolitics.</p></blockquote><p>ThesystemRequirementsSpeccapturesalltherequirementsofthesystemthatthecustomerwantsbuilt.Typicallytheproviderandcustomergetintodeepdiscussionofrequirementsandtheircost.Therequirements<em>must</em>bewrittendown,andreviewedbybothcustomerandprovider,tobesureallareinagreement.Sometimesthesedocumentsarewrittenincontractual(legal)language.Ifthecustomergetsasystemthatdoesnotmeetthespec,orthetwopartiesdisagreeaboutwhetherthefinishedproductmeetsthespec,lawyersmaygetinvolved.Ifasystemislate,financialpenaltiesmayarise.</p><blockquote><p>“<em>Thehardestpartofdesign…iskeepingfeaturesout.</em>”–Anonymous</p></blockquote><p>Thesystemrequirementspecmayhaveavarietyofrequirementstypicallyconsidered<strong>theSHALLS</strong>-suchas,<em>“thecrawlerSHALLcrawl1000sitesin5minutes”</em>.Theserequirementsincludefunctionalrequirements,performancerequirements,securityrequirements,andcostrequirements.</p><p>Acommonchallengeduringthisphaseisthatthecustomereitherdoesn’tknowwhathe/shereallywantsorexpressesitpoorly(insomeextremecasesthecustomermaynotbeabletoprovideyouwiththeultimateintendeduseofyoursystemduetoproprietaryorsecurityconcerns).Youmustrealizethatthecustomermayhavethesedifficultiesanditeratewiththecustomeruntilyoubothareinfullagreement.Oneusefultechniqueistoprovidethecustomerwiththesystemrequirementsspecification(andsometimeslaterspecstoo)andthenhavethecustomerexplainthespectous.Itisamazinghowmanymisunderstandingsandfalseassumptionscometolightwhenthecustomerisdoingtheexplaining.</p><p>TheRequirementsSpecmayaddressmanyorallofthefollowingissues:</p><ul><li>functionality-whatshouldthesystemdo?</li><li>performance-goalsforspeed,size,energyefficiency,etc.</li><li>cost-goalsforcost,ifsystemoperationincurscosts</li><li>compliance-withfederal/statelaworinstitutionalpolicy</li><li>compatibility-withstandardsorwithexistingsystems</li><li>security-againstaspecificthreatmodelundercertaintrustassumptions</li></ul><p>Anewconcernofsystemdevelopmentistheissueoftheservices-orientedmodelreferredtoasthe“cloud”(SoftwareAsAService,InfrastructureAsAService,etc.).Thedecisionofwhethertodevelopaspecificsystemrunninginatraditionalmannerortobuildacloud-basedsolutionshouldbemadeearly,asitwillaffectmanyofthelaterstagesofthedevelopmentprocess.Somewouldargueaboutwhereitneedstofitinthemethodology,butwefeelthatthesooneryou(andthecustomer)knowwherethissystemisheaded,thebetter.</p><p><ahref="http://pragprog.com/the-pragmatic-programmer/extracts/tips">PragmaticProgrammerTip</a>:</p><blockquote><p><strong>Makequalityarequirementsissue.</strong>Involveyourusersindeterminingtheproject’srealqualityrequirements.</p></blockquote><p>Althoughthecustomermaymakesomeassumptionsonthispoint,it’sinyourbestintereststomakeitapriority.Rememberthe“brokenwindowtheory”.</p><p><ahref="http://pragprog.com/the-pragmatic-programmer/extracts/tips">PragmaticProgrammerTip</a>:</p><blockquote><p><strong>Don’tLivewithBrokenWindows.</strong>Fixbaddesigns,wrongdecisions,andpoorcodewhenyouseethem.</p></blockquote><h3id="design-spec">DesignSpec</h3><p>The<em>DesignSpec</em>istheresultofstudyingthesystemrequirementsandapplyingtheartofdesign<em>(themagic)</em>withadesignteam.Inthisphase,youtranslatetherequirementsintoafullsystem-designspecification.Thisdesignspecificationshowshowthecompletesystemisbrokenupintospecificsubsystems,andalloftherequirementsaremappedtothosesubsystems.TheDesignspecforasystem,subsystem,ormoduleincludes:</p><ul><li>Userinterface</li><li>Inputsandoutputs</li><li>Functionaldecompositionintomodules</li><li>Dataflowthroughmodules</li><li>Pseudocode(plainEnglish-likelanguage)forlogic/algorithmicflow</li><li>Majordatastructures</li><li>Testingplan</li></ul><p>Tothislastpoint:</p><p><ahref="http://pragprog.com/the-pragmatic-programmer/extracts/tips">PragmaticProgrammerTip</a>:</p><blockquote><p><strong>DesigntoTest.</strong>Startthinkingabouttestingbeforeyouwritealineofcode.</p></blockquote><p>TheDesignSpecificationisindependentofyourchoiceoflanguage,operatingsystem,andhardware.Inprinciple,itcouldbeimplementedinanylanguagefromJavatomicro-codeandrunonanythingfromaCraysupercomputertoatoaster.</p><h2id="implementation-phase">Implementationphase</h2><p>Inthisphase,weturntheDesignSpecintoanImplementationSpec,thencodeupthemodules,unit-testeachmodule,integratethemodulesandtestthemasanintegratedsub-systemandthensystem.</p><h3id="implementation-spec">ImplementationSpec</h3><p>The<em>ImplementationSpec</em>representsafurtherrefinementanddecompositionofthesystem.Itislanguage,operatingsystem,andhardware<strong>dependent</strong>(inmanycases,thelanguageabstractstheOSandHWoutoftheequationbutnotinthiscourse).Theimplementationspecincludesmanyorallofthesetopics:</p><ul><li>Detailedpseudocodeforeachoftheobjects/components/functions,</li><li>DefinitionofdetailedAPIs,interfaces,functionprototypesandtheirparameters,</li><li>Datastructures(e.g.,<codeclass="language-plaintexthighlighter-rouge">struct</code>namesandmembers),</li><li>Securityandprivacyproperties,</li><li>Errorhandlingandrecovery,</li><li>Resourcemanagement,</li><li>Persistantstorage(files,database,etc).</li></ul><h3id="coding">Coding</h3><p>Codingisoftenthefunpartofthesoftwaredevelopmentcycle-butnotusuallythelargestamountoftime.Asasoftwaredeveloperinindustry,youmightspendonlyabout20%ofyourtimecoding(perhapsalotmoreifyou’reinastartup).Therestofthetimewillbedealingwiththeotherphasesofthemethodology,particularly,thelastfew:testing,integration,fixingproblemswiththeproductandmeetingswithyourteamandwithyourcustomers.</p><h4id="goals-during-coding">Goalsduringcoding:</h4><ul><li><p>Correctness:Theprogramiscorrect(i.e.,doesitwork)anderrorfree.Duh.</p></li><li><p>Clarity:Thecodeiseasytoread,wellcommented,andusesgoodvariableandfunctionnames.Inessence,isiteasytouse,understand,andmaintain</p><blockquote><p>Claritymakessurethatthecodeiseasytounderstandbypeoplewitharangeofskills,andacrossavarietyofmachinearchitecturesandoperatingsystems.[Kernighan&amp;Pike]</p></blockquote></li><li><p>Simplicity:Thecodeisassimpleaspossible,butnosimpler.</p><blockquote><p>Simplicitykeepstheprogramshortandmanageable.[Kernighan&amp;Pike]</p></blockquote></li><li><p>Generality:Theprogramcaneasilyadapttochange.</p><blockquote><p>Generalitymeansthecodecanworkwellinabroadrangeofsituationsandistolerantofnewenvironments(orcanbeeasilymadetodoso).[Kernighan&amp;Pike]</p></blockquote></li></ul><h3id="unit-and-sub-system-testing">Unitandsub-systemtesting</h3><p><ahref="http://pragprog.com/the-pragmatic-programmer/extracts/tips">PragmaticProgrammerTip</a>:</p><blockquote><p><strong>Testyoursoftware,oryouruserswill.</strong></p></blockquote><p>Testingisacriticalpartofthewholeprocessofanydevelopmenteffort,whetheryou’rebuildingbridgesorsoftware.Unittestingofmodulesinisolation,andintegrationtestingasmodulesareassembledintosub-systemsand,ultimately,thewholesystem,resultinbetter,safer,morereliablecode.We’lltalkmoreabouttestingsoon.</p><p>Theultimategoaloftestingistoexerciseallpathsthroughthecode.Ofcourse,withmostapplicationsthismayprovetobeadauntingtask.Mostofthetimethecodewillexecuteasmallsetofthebranchesinthemodule.Sowhenspecialconditionsoccurandnewlyexecutedcodepathsfail,itcanbereallyhardtofindthoseproblemsinlargecomplexpiecesofcode.</p><p>Thebetterorganizedandmodularizedyourcodeis,theeasieritwillbetounderstand,test,andmaintain-evenbyyou!</p><p>Writetestscripts(tools)throughoutthedevelopmentprocesstoquicklygiveconfidencethateventhough5%ofnewcodehasbeenadded,nonewbugsemergedbecauseourtestscriptsassuredofthat.</p><h3id="integration-testing">Integrationtesting</h3><p>Thesystemisincrementallydeveloped,puttogetherandtestedatvariouslevels.Subsystemscouldintegratemanymodules,andsometimes,newhardware.Thedeveloperwillruntheintegratedsystemagainsttheoriginalrequirementstoseeifthereareany‘gotchas’.Forexample,someperformancerequirementscanonlybetestedoncethefullsystemcomestogether,whileother,commonlyusedutilityfunctionscouldhaveperformanceanalysisdoneonthemearlyon.Youcansimulateexternalinfluencesaswell,suchasincreasingtheexternalprocessingorcommunicationsloadonthehostsystemasawaytoseehowyourprogramoperateswhenthehostsystemisheavilyloadedorresourcelimited.</p><p>ToquotethePragmaticProgrammeragain:</p><blockquote><p><ahref="http://pragprog.com/the-pragmatic-programmer/extracts/tips">PragmaticProgrammerTip</a>:<strong>Don’tThinkOutsidetheBox–FindtheBox.</strong></p></blockquote><p>Whenfacedwithanimpossibleproblem,identifytherealconstraints.Askyourself:“Doesithavetobedonethisway?Doesithavetobedoneatall?”</p><h2id="feedback-phase">Feedbackphase</h2><p>Inthisphase,thedesignteamsitsdownwithitscustomeranddemonstratesitsimplementation.Thecustomerandtheteamreviewtheoriginalrequirementspecandcheckeachrequirementforcompletion.</p><p>IntheTSEandprojectweemphasizeunderstandingtherequirementsofthesystemwewanttobuild,writinggooddesignandimplementationspecs<em>before</em>coding.Youshallapplythecodingprinciplesofsimplicity,clarity,andgenerality(wewillputmoreweightontheseaswemoveforwardwithassignmentsandtheproject).</p></div></article></div></div><footerclass="site-footer"><divclass="wrapper"><h2class="footer-heading">Engs50(CS50)--DartmouthCollege</h2><p><fontsize=-1>ThisversionofthecourseisbaseduponthosedesignedbyProfessorsPalmer,Kotz,Zhou,Campbell,andBalkcom.Iamdeeplyindebtedtotheseoutstandingeducators.--<ahref="https://engineering.dartmouth.edu/people/faculty/stephen-taylor/">StephenTaylor</a></font></p><p><small>Thispagewaslastupdatedon<strong>2023-01-05</strong>at<strong>11:31</strong>.</small></p></div></footer></body></html>
