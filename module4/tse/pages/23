https://thayer.github.io/engs50/Notes/malloc/
2
20543
<!DOCTYPEhtml><html><head><metacharset="utf-8"><metahttp-equiv="X-UA-Compatible"content="IE=edge"><metaname="viewport"content="width=device-width,initial-scale=1"><title>Dynamicmemoryallocation;linkedlists</title><metaname="description"content="InEngs50youwilllearnhowtodesign&buildlarge,reliable,maintainable,andunderstandablesoftwaresystems.IntheprocessyouwilllearntoprograminCwithUnixdevelopmenttools."><linkrel="shortcuticon"href="/engs50/50.png"/><linkrel="stylesheet"href="/engs50/css/main.css"><linkrel="canonical"href="/engs50/Notes/malloc/"></head><body><headerclass="site-header"><aclass="site-title"href="/engs50/"><imgwidth=48align=centersrc="/engs50/50.png"alt="icon">Engs50(CS50)</a><navclass="site-nav">[<ahref="/engs50/Labs/">Labs</a>][<ahref="/engs50/Notes/">Notes</a>][<ahref="/engs50/Reading/">Reading</a>][<ahref="/engs50/Resources/">Resources</a>][<ahref="/engs50/Examples/">Examples</a>]</nav></header><divclass="page-content"><divclass="wrapper"><articleclass="post"><headerclass="post-header"><h1class="post-title">Dynamicmemoryallocation;linkedlists</h1></header><divclass="post-content"><h3id="goals">Goals</h3><ul><li>Tounderstandthat<codeclass="language-plaintexthighlighter-rouge">malloc</code>and<codeclass="language-plaintexthighlighter-rouge">free</code>allocateandde-allocatememoryfromtheheap.</li><li>Tousedynamicmemorytobuildalinkedlist.</li></ul><p>Terminal<ahref="/engs50/Notes/malloc/script.txt">script</a>fromtoday’sclass.</p><h3id="background">Background</h3><p>We’llbeworkingwithCcodethatbuildsandmanipulates<em>linkedlists</em>.YoulearnedaboutlinkedlistsinCS10,andmaywanttoreviewtheCS10linked-listnotesandimplementation:</p><ul><li>slidesin<ahref="/engs50/Notes/malloc/cs10-lists.pdf">pdf</a>or<ahref="/engs50/Notes/malloc/cs10-lists.pptx">Powerpoint</a></li><li><ahref="/engs50/Notes/malloc/SinglyLinked.java">SinglyLinked.java</a></li><li><ahref="/engs50/Notes/malloc/SimpleList.java">SimpleList.java</a></li></ul><h1id="dynamic-memory-allocation">Dynamicmemoryallocation</h1><p>Beforewedivein,checkoutthis<ahref="https://www.youtube.com/watch?v=5VnDaHBi8dM">animatedexplanationofpointers</a>.Fun!</p><p>Cdoesnothavelanguagesupportfordynamicallyallocatingnew‘things’.Instead,theprogrammerhastocallalibraryfunctioncalled<codeclass="language-plaintexthighlighter-rouge">malloc()</code>toallocateanewchunkofmemoryfromthe<em>heapsegment</em>,andlatercall<codeclass="language-plaintexthighlighter-rouge">free()</code>toreturnthatchunkofmemorytotheheap.Theprogrammerhastoremembertoinitializethechunkofbytesreceivedfrom<codeclass="language-plaintexthighlighter-rouge">malloc()</code>–whichotherwiseshouldbeassumedtocontainrandomdata.Theprogrammerhastobecarefulallocatealargeenoughchunktoholdthedatasheintendstostorethere,andnottousepointerstowrite“outside”thatchunkofmemory.Lotsofflexibilityandpower-butaswithanygreatpower,youmusttakegreatcareinusingit.</p><blockquote><p>InJava,youcanuse<codeclass="language-plaintexthighlighter-rouge">new</code>todynamicallycreateanewobject,and<codeclass="language-plaintexthighlighter-rouge">delete</code>todiscardanobjectcreatedwith<codeclass="language-plaintexthighlighter-rouge">new</code>,butforthemostparttheJavacompilerandruntimehandlesobjectdeletionandmemoryrecoveryautomatically-it’scalled‘garbagecollection.’</p></blockquote><p>Therearefourrelatedfunctionsyoushouldunderstand:</p><ul><li><strong>malloc</strong><codeclass="language-plaintexthighlighter-rouge">p=malloc(n)</code>-allocates<codeclass="language-plaintexthighlighter-rouge">n</code>bytesofheapmemory;thememorycontentsremainuninitialized.</li><li><strong>calloc</strong><codeclass="language-plaintexthighlighter-rouge">p=calloc(count,size)</code>allocates<codeclass="language-plaintexthighlighter-rouge">count*size</code>bytesofheapmemoryandinitializesitalltozero;thiscallisappropriatewhenyouwanttoallocateanarrayof<codeclass="language-plaintexthighlighter-rouge">count</code>items,eachof<codeclass="language-plaintexthighlighter-rouge">size</code>bytes.</li><li><strong>realloc</strong><codeclass="language-plaintexthighlighter-rouge">p=realloc(p,n)</code>-where<codeclass="language-plaintexthighlighter-rouge">p</code>isapointertoheapmemory-expands(orshrinks)itsallocationto<codeclass="language-plaintexthighlighter-rouge">n</code>bytes.</li><li><strong>free</strong><codeclass="language-plaintexthighlighter-rouge">free(p)</code>-where<codeclass="language-plaintexthighlighter-rouge">p</code>isapointertoheapmemory-releasesthatportionofheapmemoryforfutureuse.</li></ul><p>Ourexamplestodayshowhowtouse<codeclass="language-plaintexthighlighter-rouge">malloc</code>toallocatespacetostoreastring,andlater,a<codeclass="language-plaintexthighlighter-rouge">struct</code>holdingaggregatetypes.Foranexampleusing<codeclass="language-plaintexthighlighter-rouge">calloc</code>and<codeclass="language-plaintexthighlighter-rouge">realloc</code>,readabout<ahref="/malloc/readlinep.html">howreadlinep()works</a>.</p><h2id="memory-leaks-and-stray-pointers">Memoryleaksandstraypointers</h2><p><strong><em>Forevery<codeclass="language-plaintexthighlighter-rouge">malloc</code>theremustbeamatching<codeclass="language-plaintexthighlighter-rouge">free</code>.</em></strong></p><ul><li>Ifyouallocatespacebutneverfreeit,you’vecreateda<em>memoryleak</em>;astheprogramruns,theprocessmemorysizewillgrowandgrow,andeventuallyrunoutofmemory.</li><li>Ifyoufreeapointeryou’veneverallocated-orfreethesamepointertwice-youmaycausetheheapmanagertocorruptitsdatastructuresandtriggerasegmentationfaultatsomefuturetime-oftenaseeminglyrandomtime.</li></ul><p>Wheneveryouwrite<codeclass="language-plaintexthighlighter-rouge">malloc</code>,writethecorresponding<codeclass="language-plaintexthighlighter-rouge">free</code>call;or,documentwhoseresponsibilityisto<codeclass="language-plaintexthighlighter-rouge">free</code>thatpointer.</p><p>Wheneveryoucall<codeclass="language-plaintexthighlighter-rouge">free(p)</code>,it’sgoodpracticetoimmediatelyset<codeclass="language-plaintexthighlighter-rouge">p=NULL</code>.Notbecauseyouhaveto-itmakesnodifferencetotheheap-butbecausethatstepwillpreventyoufromaccidentallyre-usingthatnow-defunctpointer<codeclass="language-plaintexthighlighter-rouge">p</code>-you’llgetacleansegmentationfaultinsteadofunpredictablebehavior.</p><blockquote><p>Whentheprocessexits,allitsmemoryisfree-thefoursegments(code,global,stack,andheap)disappear.</p></blockquote><h2id="coding-style---memory-allocation">Codingstyle-memoryallocation</h2><p>Avoidsprinkingcallsto<codeclass="language-plaintexthighlighter-rouge">malloc()</code>and<codeclass="language-plaintexthighlighter-rouge">free()</code>throughoutyourcode.Instead,thinkaboutthekindsofthingsyouneedtocreateanddestroy,andwritetype-specificwrapperforeachsuchtype.Forexample,ifyourprogrammanipulatesthingsoftype<codeclass="language-plaintexthighlighter-rouge">structlistnode</code>,youwouldwritetwofunctions:</p><divclass="language-chighlighter-rouge"><divclass="highlight"><preclass="highlight"><code><spanclass="k">struct</span><spanclass="n">listnode</span><spanclass="o">*</span><spanclass="nf">listnode_new</span><spanclass="p">(...);</span><spanclass="kt">void</span><spanclass="nf">listnode_free</span><spanclass="p">(</span><spanclass="k">struct</span><spanclass="n">listnode</span><spanclass="o">*</span><spanclass="n">node</span><spanclass="p">);</span></code></pre></div></div><p>Thefirstfunctioncalls<codeclass="language-plaintexthighlighter-rouge">malloc(sizeof(structlistnode))</code>andinitializesallofitscontents,perhapsusingparameterspassedbythecaller.Thesecondcalls<codeclass="language-plaintexthighlighter-rouge">free(node)</code>.Bothinvolvecarefulerror-checkingcode.Seeexample<ahref="/engs50/Examples/names7.c">names7.c</a>.</p><p>Therearemanyadvantagestothisapproach:</p><ul><li>Themainlinecodeismorereadable,becauseit’sclearwhat<codeclass="language-plaintexthighlighter-rouge">listnode_new()</code>isdoing.</li><li>The<codeclass="language-plaintexthighlighter-rouge">new</code>functionactslikea‘constructor’inobject-orientedlanguagesandcanensurethenewlyreturnedmemoryisinitialized,oratleast,notrandombytes.</li><li>Codeinvolving<codeclass="language-plaintexthighlighter-rouge">malloc</code>cansometimesbetricky,andyouisolatethattrickinessinonespotandfocusongettingitrightonce.</li><li>Somenewtypesmightneedmultiple<codeclass="language-plaintexthighlighter-rouge">malloc</code>calls,asinourlinked-listexamples<ahref="/engs50/Examples/names5.c">names5.c</a><ahref="/engs50/Examples/names6.c">names6.c</a><ahref="/engs50/Examples/names7.c">names7.c</a>.Allthose<codeclass="language-plaintexthighlighter-rouge">malloc</code>calls(andcorresponding<codeclass="language-plaintexthighlighter-rouge">free</code>calls)canbeinthe<codeclass="language-plaintexthighlighter-rouge">new</code>/<codeclass="language-plaintexthighlighter-rouge">free</code>functions.</li><li>Youcaninsertdebuggingoutputorreference-countinglogic,orsetdebuggerbreakpoints,inthese<codeclass="language-plaintexthighlighter-rouge">new</code>/<codeclass="language-plaintexthighlighter-rouge">free</code>functionsandimmediatelyhavethatfeatureapplyto<em>all</em>occurrencesofyourprogram’sworkwiththistype.</li></ul><h1id="data-structures-in-c">DatastructuresinC</h1><p>Cisnotanobject-orientedlanguagelikeJava,Python,orC++.Itdoesnotprovideanylanguagefeaturestodeclarea‘class’orcreateandmanipulateobject‘instances’ofthatclass.</p><p>ButCdoesprovidetwokindsofaggregatedata:arraysandstructures.</p><h2id="arrays">Arrays</h2><p>We’veseenexampleswitharraysofcharacters(akastrings)andarraysofcharacterpointers,andeventwo-dimensionalarraysofcharacters.Butonecanalsodefinearraysofothertypes:</p><divclass="language-chighlighter-rouge"><divclass="highlight"><preclass="highlight"><code><spanclass="kt">char</span><spanclass="n">names</span><spanclass="p">[</span><spanclass="n">NumStudents</span><spanclass="p">][</span><spanclass="n">NameLength</span><spanclass="p">];</span><spanclass="kt">int</span><spanclass="n">ages</span><spanclass="p">[</span><spanclass="n">NumStudents</span><spanclass="p">];</span><spanclass="kt">float</span><spanclass="n">grades</span><spanclass="p">[</span><spanclass="n">NumStudents</span><spanclass="p">];</span></code></pre></div></div><p>andsoforth.</p><blockquote><p>Sometimesyouneedtounderstandthatanarraynameis,ineffect,apointertothefirstspotinmemorywherethatarray’sdatalives;thus,<codeclass="language-plaintexthighlighter-rouge">ages</code>isoftype<codeclass="language-plaintexthighlighter-rouge">int*</code>andisapointertothefirstentryinthearray,but<codeclass="language-plaintexthighlighter-rouge">ages[0]</code>isoftype<codeclass="language-plaintexthighlighter-rouge">int</code>andisthevalueofthatfirstentryinthearray.Thisconceptcomesupmostlyinarraysofcharacters;<codeclass="language-plaintexthighlighter-rouge">names</code>isoftype<codeclass="language-plaintexthighlighter-rouge">char**</code>,andeven<codeclass="language-plaintexthighlighter-rouge">names[0]</code>isoftype<codeclass="language-plaintexthighlighter-rouge">char*</code>,and<codeclass="language-plaintexthighlighter-rouge">names[0][1]</code>isoftype<codeclass="language-plaintexthighlighter-rouge">char</code>.Ineffect,<codeclass="language-plaintexthighlighter-rouge">names</code>isanarrayofstrings,and<codeclass="language-plaintexthighlighter-rouge">names[0]</code>isthefirststringinthearray;likeotherstrings,<codeclass="language-plaintexthighlighter-rouge">names[0]</code>isoftype<codeclass="language-plaintexthighlighter-rouge">char*</code>.</p></blockquote><h2id="structs">Structs</h2><p>Callowsyoutodefineanaggregatecalleda‘struct’;likeanobject,ithasdatamembers.Unlikeanobject,ithasnomethods(functionmembers).</p><p>Continuingouraboveexample,wecouldhavedefineda<codeclass="language-plaintexthighlighter-rouge">struct</code>foreachstudent,andthenanarrayof<codeclass="language-plaintexthighlighter-rouge">structs</code>,asfollows:</p><divclass="language-chighlighter-rouge"><divclass="highlight"><preclass="highlight"><code><spanclass="k">struct</span><spanclass="n">student</span><spanclass="p">{</span><spanclass="kt">char</span><spanclass="n">name</span><spanclass="p">[</span><spanclass="n">NameLength</span><spanclass="p">];</span><spanclass="kt">int</span><spanclass="n">age</span><spanclass="p">;</span><spanclass="kt">float</span><spanclass="n">grade</span><spanclass="p">;</span><spanclass="p">};</span><spanclass="k">struct</span><spanclass="n">student</span><spanclass="n">students</span><spanclass="p">[</span><spanclass="n">NumStudents</span><spanclass="p">];</span></code></pre></div></div><p>Nowwecanrefertothefirststudentas<codeclass="language-plaintexthighlighter-rouge">student[0]</code>,thesecondstudentas<codeclass="language-plaintexthighlighter-rouge">student[1]</code>,andsoforth.Wecanrefertothenameofthefirststudentas<codeclass="language-plaintexthighlighter-rouge">student[0].name</code>andtheageofthesecondstudentas<codeclass="language-plaintexthighlighter-rouge">student[1].age</code>.</p><p>Inourclasstimeexamples,<ahref="/engs50/Examples/names5.c">names5.c</a>,<ahref="/engs50/Examples/names5.c">names6.c</a>,and<ahref="/engs50/Examples/names7.c">names7.c</a>,wedeclarea<codeclass="language-plaintexthighlighter-rouge">structlistnode</code>anduseittobuildalinkedlist.Thereweseeadifferentnotation:insteadof<codeclass="language-plaintexthighlighter-rouge">.</code>torefertoamemberofastruct,wehavetouse<codeclass="language-plaintexthighlighter-rouge">-&gt;</code>todereferencethepointerandrefertomemberofthepointee.</p><divclass="language-chighlighter-rouge"><divclass="highlight"><preclass="highlight"><code><spanclass="k">struct</span><spanclass="n">student</span><spanclass="n">alice</span><spanclass="p">;</span><spanclass="c1">//asinglestructrepresentingalice</span><spanclass="k">struct</span><spanclass="n">student</span><spanclass="o">*</span><spanclass="n">sp</span><spanclass="o">=</span><spanclass="o">&amp;</span><spanclass="n">alice</span><spanclass="p">;</span><spanclass="c1">//apointer,initializedtopointatalice</span><spanclass="c1">//thefollowingthreealldothesamething.</span><spanclass="kt">int</span><spanclass="n">age</span><spanclass="o">=</span><spanclass="n">alice</span><spanclass="p">.</span><spanclass="n">age</span><spanclass="p">;</span><spanclass="kt">int</span><spanclass="n">age</span><spanclass="o">=</span><spanclass="n">sp</span><spanclass="o">-&gt;</span><spanclass="n">age</span><spanclass="p">;</span><spanclass="kt">int</span><spanclass="n">age</span><spanclass="o">=</span><spanclass="p">(</span><spanclass="o">*</span><spanclass="n">sp</span><spanclass="p">).</span><spanclass="n">age</span><spanclass="p">;</span></code></pre></div></div><h2id="linked-lists">Linkedlists</h2><p>Intheexamplesbelowweconstructasimplelinkedlistcomprisingnodesthateachhaveapointertoastringandapointertothenextnode.Thelistincludesadummy<em>headnode</em>tosimplifylistmanagement.Thevariable<codeclass="language-plaintexthighlighter-rouge">head</code>isapointertothatdummynode.</p><divclass="language-chighlighter-rouge"><divclass="highlight"><preclass="highlight"><code><spanclass="c1">//Astructureforeachnodeinlinkedlist</span><spanclass="k">struct</span><spanclass="n">listnode</span><spanclass="p">{</span><spanclass="kt">char</span><spanclass="o">*</span><spanclass="n">name</span><spanclass="p">;</span><spanclass="k">struct</span><spanclass="n">listnode</span><spanclass="o">*</span><spanclass="n">next</span><spanclass="p">;</span><spanclass="p">};</span><spanclass="k">struct</span><spanclass="n">listnode</span><spanclass="n">head</span><spanclass="o">=</span><spanclass="p">{</span><spanclass="nb">NULL</span><spanclass="p">,</span><spanclass="nb">NULL</span><spanclass="p">};</span><spanclass="c1">//dummynodeatheadofemptylist</span></code></pre></div></div><p>Afteraddingthreenodes,thelistmightlooklikethis:</p><p><imgsrc="/engs50/Notes/malloc/linked-list.png"alt=""/></p><h2id="examples">Examples</h2><p>Wefirstlive-codedasimplerevisionofthe<codeclass="language-plaintexthighlighter-rouge">names</code>program,usinganarrayofpointersinsteadofatwo-dimensionalarrayofcharacters:</p><ul><li><ahref="/engs50/Examples/names3.c">names3.c</a>:arrayofpointers;useof<codeclass="language-plaintexthighlighter-rouge">readlinep</code></li></ul><p>Here,thetwo-dimensional<codeclass="language-plaintexthighlighter-rouge">names</code>arrayisreplacedbyaone-dimensionalarrayofstringpointers,whichismorecommoninC,andwhichallowsthenamestobeofanylength-eacharrayentrypointstoadynamicallyallocatedmemoryfromtheheap,bigenoughtoholdthatname.</p><p>Weuseanew<codeclass="language-plaintexthighlighter-rouge">freadlinep</code>function;afterthenextlecture,Irecommendyoureadaboutits<ahref="../readlinep.html">implementation</a>.</p><p>Wedon’thavetimeinclass,butwecanextendthiscodetosortthearrayusing<codeclass="language-plaintexthighlighter-rouge">qsort()</code>quicksort:</p><ul><li><ahref="/engs50/Examples/names4.c">names4.c</a>:sortnames;<codeclass="language-plaintexthighlighter-rouge">void*</code>;casting</li></ul><p>Thenwelive-codedalinked-listversionofthe<codeclass="language-plaintexthighlighter-rouge">names</code>program:</p><ul><li><ahref="/engs50/Examples/names5.c">names5.c</a>-revisesnames3.ctouselinkedlistinsteadofarray</li></ul><p>Youshouldlookattwomoreversionsofthe<codeclass="language-plaintexthighlighter-rouge">names</code>program:</p><ul><li><ahref="/engs50/Examples/names6.c">names6.c</a>-extendsnames5.ctokeepthelistsorted</li><li><ahref="/engs50/Examples/names7.c">names7.c</a>-extendsnames6.ctoremoveduplicates</li></ul><h2id="activity">Activity</h2><p>Today’s<ahref="activity.html">activity</a>deletesthelist.</p></div></article></div></div><footerclass="site-footer"><divclass="wrapper"><h2class="footer-heading">Engs50(CS50)--DartmouthCollege</h2><p><fontsize=-1>ThisversionofthecourseisbaseduponthosedesignedbyProfessorsPalmer,Kotz,Zhou,Campbell,andBalkcom.Iamdeeplyindebtedtotheseoutstandingeducators.--<ahref="https://engineering.dartmouth.edu/people/faculty/stephen-taylor/">StephenTaylor</a></font></p><p><small>Thispagewaslastupdatedon<strong>2023-01-05</strong>at<strong>11:31</strong>.</small></p></div></footer></body></html>
