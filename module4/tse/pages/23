https://thayer.github.io/engs50/Notes/modules/
2
16049
<!DOCTYPEhtml><html><head><metacharset="utf-8"><metahttp-equiv="X-UA-Compatible"content="IE=edge"><metaname="viewport"content="width=device-width,initial-scale=1"><title>ModulardatastructuresinC</title><metaname="description"content="InEngs50youwilllearnhowtodesign&buildlarge,reliable,maintainable,andunderstandablesoftwaresystems.IntheprocessyouwilllearntoprograminCwithUnixdevelopmenttools."><linkrel="shortcuticon"href="/engs50/50.png"/><linkrel="stylesheet"href="/engs50/css/main.css"><linkrel="canonical"href="/engs50/Notes/modules/"></head><body><headerclass="site-header"><aclass="site-title"href="/engs50/"><imgwidth=48align=centersrc="/engs50/50.png"alt="icon">Engs50(CS50)</a><navclass="site-nav">[<ahref="/engs50/Labs/">Labs</a>][<ahref="/engs50/Notes/">Notes</a>][<ahref="/engs50/Reading/">Reading</a>][<ahref="/engs50/Resources/">Resources</a>][<ahref="/engs50/Examples/">Examples</a>]</nav></header><divclass="page-content"><divclass="wrapper"><articleclass="post"><headerclass="post-header"><h1class="post-title">ModulardatastructuresinC</h1></header><divclass="post-content"><p>Inthisclasswefocusonthedesignofreusablemodulesforcommondatastructures.</p><h3id="goals">Goals</h3><ul><li>Understandingtheimportanceofreusablemodules.</li><li>Reiteratingtheuseofheaderfilestoenablemodules.</li><li>Reiterating<codeclass="language-plaintexthighlighter-rouge">struct</code>andintroducing<codeclass="language-plaintexthighlighter-rouge">typedef</code>.</li><li>General-purposedatastructureswith<codeclass="language-plaintexthighlighter-rouge">void*</code>.</li><li>Functionpointers.</li></ul><h2id="modularity-and-reuse">Modularityandreuse</h2><p>Somedatastructuresaresocommonthatitisvaluabletocodethemonce-lists,queues,stacks,trees,andhashtables-andthenre-usethatcodeformultipleprograms(ormultiplepurposeswithinaprogram).Codere-usesavestimebecauseyoudon’tneedtowriteeverythingfromscratch.Byusingrobust,well-testedmodulesratherthanfresh(buggy)code,yourprogramismorereliable.Finally,byseparating‘businesslogic’from‘datastructures’,youthecodeisclearerandmoreflexible(e.g.,ifyoulaterwanttoswitchtoamore-efficientdatastructureyoucandosowithoutrewritingallthebusinesslogic).</p><p>Object-orientedlanguagesmakethiseasier,becausetheymakeitsimpletodefinea‘class’ofobjectsandthentocreatenew‘instances’asneeded.Manysuchlanguagesgofurtherbyproviding‘templates’and‘subclasses’asawaytoderivenewvariantsofthebaseclass.</p><p>Chasnoneofthesecapabilities.Butwecanapproximatesomeoftheseconceptsthroughgoodstyleandcarefuldesign.</p><h3id="pointers-to-anything">Pointerstoanything</h3><p>Indevelopingageneral-purposedata-structuremodule,wewouldreallylikethemoduletobeabletostorearbitary“things”–notjustpredeterminedtypes–butanything.Forexample,insteadofalinked-listofstrings(aswebuiltinthe<codeclass="language-plaintexthighlighter-rouge">names</code>program)we’dlikealinked-listthatcouldstorepointerstoanything.Todaywewantalistofstringthings;tomorrowwemightwantalistof<codeclass="language-plaintexthighlighter-rouge">structstudent</code>things.</p><p>Thesolutionisforthemoduletostore<em>pointerstothings</em>,ratherthanthethingsthemselves.Theuser’scontractwiththemoduleisthus“Iallocateandinitializeathing,andgiveyouapointertoremember;later,whenIneedthatthing,I’llaskandyougivemebackthatpointer.WhenIaskyoutoprintthings,ordeletethings,I’llgiveyoucustomizedfunctionsthatknowhowtoprintanddeletethingsofthistype.”</p><p>Javaandotherobject-orientedlanguagesdothiswith<em>templates</em>.Chasnosuportfortemplates,butitdoeshaveatypefor“pointertoanything”:<codeclass="language-plaintexthighlighter-rouge">void*</code>.Thus,</p><divclass="language-chighlighter-rouge"><divclass="highlight"><preclass="highlight"><code><spanclass="kt">char</span><spanclass="o">*</span><spanclass="n">p</span><spanclass="o">=</span><spanclass="s">"hello"</span><spanclass="p">;</span><spanclass="c1">//pointertoachar,inthiscase,astring</span><spanclass="kt">int</span><spanclass="n">x</span><spanclass="o">=</span><spanclass="mi">42</span><spanclass="p">,</span><spanclass="o">*</span><spanclass="n">xp</span><spanclass="o">=</span><spanclass="o">&amp;</span><spanclass="n">x</span><spanclass="p">;</span><spanclass="c1">//pointertoanint</span><spanclass="k">struct</span><spanclass="n">student</span><spanclass="o">*</span><spanclass="n">sp</span><spanclass="p">;</span><spanclass="c1">//pointertoastruct</span><spanclass="n">sp</span><spanclass="o">=</span><spanclass="n">malloc</span><spanclass="p">(</span><spanclass="k">sizeof</span><spanclass="p">(</span><spanclass="k">struct</span><spanclass="n">student</span><spanclass="p">));</span><spanclass="c1">//initializethepointer</span><spanclass="n">sp</span><spanclass="o">-&gt;</span><spanclass="n">name</span><spanclass="o">=</span><spanclass="s">"David"</span><spanclass="p">;</span><spanclass="c1">//initializethestructatthatpointer</span><spanclass="n">sp</span><spanclass="o">-&gt;</span><spanclass="n">house</span><spanclass="o">=</span><spanclass="s">"West"</span><spanclass="p">;</span><spanclass="c1">//...initialize</span><spanclass="n">sp</span><spanclass="o">-&gt;</span><spanclass="n">class</span><spanclass="o">=</span><spanclass="mi">1986</span><spanclass="p">;</span><spanclass="c1">//...initialize</span><spanclass="kt">void</span><spanclass="o">*</span><spanclass="n">anything</span><spanclass="p">;</span><spanclass="c1">//apointertoanytype</span><spanclass="n">anything</span><spanclass="o">=</span><spanclass="n">p</span><spanclass="p">;</span><spanclass="c1">//here,apointertoacharonthestack</span><spanclass="n">anything</span><spanclass="o">=</span><spanclass="o">&amp;</span><spanclass="n">x</span><spanclass="p">;</span><spanclass="c1">//here,apointertoanintonthestack</span><spanclass="n">anything</span><spanclass="o">=</span><spanclass="n">sp</span><spanclass="p">;</span><spanclass="c1">//here,apointertoastructintheheap</span></code></pre></div></div><p>Thus,ourmoduleswillacceptandstore<codeclass="language-plaintexthighlighter-rouge">void*</code>pointers,andreturnthemtothecallerwhenasked.</p><h3id="pointers-to-functions">Pointerstofunctions</h3><p>Asnotedabove,themodulemayneedhelpwhenitneedstoprint,compare,ordelete“things”.Themodule’susermustprovidethemodulewithspecialhelperfunctions.(Inanobject-orientedlanguage,likeJava,“things”areobjectsandobjectsknowhowtoprintthemselves,comparethemselves,ordeletethemselves.Chasnosuchsupport.)</p><p>Thus,thecallermaypassafunctiontothemodule,whenneeded.Wecan’tactuallypassthefunction-wehavetopassthemoduleapointertothefunction.</p><p>Theconceptofa<em>pointertoafunction</em>canbeconfusing.Likeanyotherpointer,itisanaddressinmemory.Recallthatthecompiledcodeoftheprogramlivesinthecodesegment,inmemory,soeveryfunctionresidesatsomeaddress.Afunctionpointerissimplythataddress.</p><p>Wecanrefertothefunction’saddresssimplybynamingthefunction,withoutthesyntaxofcallingafunction.Thatis,<codeclass="language-plaintexthighlighter-rouge">foo</code>isafunctionpointer,whereas<codeclass="language-plaintexthighlighter-rouge">foo(a,b,c)</code>callsthatfunctionandpassesarguments<codeclass="language-plaintexthighlighter-rouge">a</code>,<codeclass="language-plaintexthighlighter-rouge">b</code>,and<codeclass="language-plaintexthighlighter-rouge">c</code>.Inour<ahref="/engs50/Examplespointer2.c}}">pointer2.c</a>example,wepassedtheaddressoffunctions<codeclass="language-plaintexthighlighter-rouge">main</code>and<codeclass="language-plaintexthighlighter-rouge">change</code>to<codeclass="language-plaintexthighlighter-rouge">printf</code>soitcouldprintthoseaddressesforustoexamine.</p><p>IfIhaveafunctioncalled<codeclass="language-plaintexthighlighter-rouge">myprint</code>,likethis:</p><divclass="language-chighlighter-rouge"><divclass="highlight"><preclass="highlight"><code><spanclass="kt">void</span><spanclass="nf">myprint</span><spanclass="p">(</span><spanclass="kt">FILE</span><spanclass="o">*</span><spanclass="n">fp</span><spanclass="p">,</span><spanclass="kt">char</span><spanclass="o">*</span><spanclass="n">key</span><spanclass="p">,</span><spanclass="kt">void</span><spanclass="o">*</span><spanclass="n">item</span><spanclass="p">)</span><spanclass="p">{</span><spanclass="kt">int</span><spanclass="o">*</span><spanclass="n">valuep</span><spanclass="o">=</span><spanclass="n">item</span><spanclass="p">;</span><spanclass="c1">//inthiscase,the"things"areintegers</span><spanclass="n">fprintf</span><spanclass="p">(</span><spanclass="n">fp</span><spanclass="p">,</span><spanclass="s">"(%s,%d)"</span><spanclass="p">,</span><spanclass="n">key</span><spanclass="p">,</span><spanclass="o">*</span><spanclass="n">valuep</span><spanclass="p">);</span><spanclass="c1">//note*valuepderefspointer</span><spanclass="p">}</span></code></pre></div></div><p>IfIhaveafunctionpointer<codeclass="language-plaintexthighlighter-rouge">printfunc</code>,Icaninitializethefunctionpointerandcallthroughthatpointerasfollows:</p><divclass="language-chighlighter-rouge"><divclass="highlight"><preclass="highlight"><code><spanclass="n">printfunc</span><spanclass="o">=</span><spanclass="n">myprint</span><spanclass="p">;</span><spanclass="p">(</span><spanclass="o">*</span><spanclass="n">printfunc</span><spanclass="p">)(</span><spanclass="n">fp</span><spanclass="p">,</span><spanclass="n">key</span><spanclass="p">,</span><spanclass="n">thing</span><spanclass="p">);</span></code></pre></div></div><p>Inotherwords,Idereferencethepointertogetafunction,andthencallthatfunction.Noticethe<codeclass="language-plaintexthighlighter-rouge">*</code>andparens,<codeclass="language-plaintexthighlighter-rouge">(*printfunc)</code>.</p><p>HowwouldIdeclarethatvariable<codeclass="language-plaintexthighlighter-rouge">printfunc</code>?prettygnarlysyntax:</p><divclass="language-chighlighter-rouge"><divclass="highlight"><preclass="highlight"><code><spanclass="kt">void</span><spanclass="p">(</span><spanclass="o">*</span><spanclass="n">printfunc</span><spanclass="p">)(</span><spanclass="kt">FILE</span><spanclass="o">*</span><spanclass="n">fp</span><spanclass="p">,</span><spanclass="kt">char</span><spanclass="o">*</span><spanclass="n">key</span><spanclass="p">,</span><spanclass="kt">void</span><spanclass="o">*</span><spanclass="n">item</span><spanclass="p">);</span></code></pre></div></div><p>declaresvariable<codeclass="language-plaintexthighlighter-rouge">printfunc</code>tobeapointertoafunctionwhoseprototypelookslikethatof<codeclass="language-plaintexthighlighter-rouge">myprint</code>above,thatis,ittakesthegiventhreeargumentsandreturns<codeclass="language-plaintexthighlighter-rouge">void</code>.Indeed,itlooksalmostlikeacommonfunctionprototype,exceptforthat<codeclass="language-plaintexthighlighter-rouge">(*variablename)</code>notation.Forthispointertobeuseful,itmustbeinitializedtotheaddressofafunction.</p><h2id="example---bags">Example-bags</h2><p>Todaywelive-codea<em>bag</em>datastructureanduseittomakeabagversionofour<codeclass="language-plaintexthighlighter-rouge">names</code>series.A<em>bag</em>isanunorderedcollectionof(items).Thebagstartsempty,growsasthecalleraddsoneitematatime,andshrinksasthecallerextractsoneitematatime.Itcouldbeempty,orcouldcontainhundredsofitems.Itemsareindistinguishable,sothe<em>extract</em>functionisfreetoreturnanyitemfromthebag.</p><p>Westartfrom<ahref="/engs50/Examples/names5.c">names5.c</a>andmodifyitwiththegoalofcodingfunctionsthatmanipulateageneric“bagofthings”.</p><p>Thefirstexampledemonstrates</p><ul><li>structuretypes(like<codeclass="language-plaintexthighlighter-rouge">structbag_t</code>and<codeclass="language-plaintexthighlighter-rouge">structbagnode_t</code>).</li><li>typedefstocreatenewtypenames.</li><li>Heapmemory(createdvia<codeclass="language-plaintexthighlighter-rouge">malloc</code>in<codeclass="language-plaintexthighlighter-rouge">bag_new</code>).</li><li>Theuseofpointerstobuildandmanipulateabagdatastructure.</li><li>Theuseof<codeclass="language-plaintexthighlighter-rouge">void*</code>torepresent“apointertoanything”anditsusetobuildabagofgenericthings.</li><li>Areminderthatstrings-evenconstantstrings,indoublequotes-arestoredinmemoryasarraysofcharactersandreferencedbya<codeclass="language-plaintexthighlighter-rouge">char*</code>pointertotheirfirstcharacter;thusevenaconstantstringhasanaddressandispassedasapointer.</li></ul><p>Weextendtheexampletosplitthebagfunctionsoutastoaseparatesetoffiles,demonstrating</p><ul><li>a<em>module</em>,whichisascloseaswegettoa<em>class</em>inC.</li><li>Asetoffunctionsexportedvia<codeclass="language-plaintexthighlighter-rouge">bag.h</code>tootherCfiles.</li><li>Publictypes(like<codeclass="language-plaintexthighlighter-rouge">structbag_t</code>)-andopaquetypes.</li><li>Privatetypes(like<codeclass="language-plaintexthighlighter-rouge">structbagnode_t</code>).</li><li>Privatefunctions(like<codeclass="language-plaintexthighlighter-rouge">bagnode_new</code>).</li><li>Noneedforglobalvariables.(Wealwaystrytoavoidthem!)</li></ul><p>Theresult,aftersomecleanup,is<ahref="/engs50/Examples/names9.c">names9.c</a>.</p><p>Acomplete<em>bag</em>moduleisincludedinthe<ahref="/engs50/Labs/Lab3/starter">Lab3starterkit</a>.</p><h2id="another-example---binary-trees">Anotherexample-binarytrees</h2><p>Foramorecomplexexample,demonstratingtheuseofbinarytreesasa“dictionary”datastructure–thatis,onethatstores(key,item)pairs–studythe<ahref="/engs50/Examples/trees">binary-treemodule</a>.</p><h2id="activity">Activity</h2><p>Intoday’sclass<ahref="activity.html">activity</a>,weaddacountertotrackthenumberofitemsinthebag.</p></div></article></div></div><footerclass="site-footer"><divclass="wrapper"><h2class="footer-heading">Engs50(CS50)--DartmouthCollege</h2><p><fontsize=-1>ThisversionofthecourseisbaseduponthosedesignedbyProfessorsPalmer,Kotz,Zhou,Campbell,andBalkcom.Iamdeeplyindebtedtotheseoutstandingeducators.--<ahref="https://engineering.dartmouth.edu/people/faculty/stephen-taylor/">StephenTaylor</a></font></p><p><small>Thispagewaslastupdatedon<strong>2023-01-05</strong>at<strong>11:31</strong>.</small></p></div></footer></body></html>
