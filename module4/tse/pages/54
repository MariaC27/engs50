https://thayer.github.io/engs50/Notes/c1/extra.html
3
74206
<!DOCTYPEhtml><html><head><metacharset="utf-8"><metahttp-equiv="X-UA-Compatible"content="IE=edge"><metaname="viewport"content="width=device-width,initial-scale=1"><title>Extra-IntroductiontoC</title><metaname="description"content="InEngs50youwilllearnhowtodesign&buildlarge,reliable,maintainable,andunderstandablesoftwaresystems.IntheprocessyouwilllearntoprograminCwithUnixdevelopmenttools."><linkrel="shortcuticon"href="/engs50/50.png"/><linkrel="stylesheet"href="/engs50/css/main.css"><linkrel="canonical"href="/engs50/Notes/c1/extra.html"></head><body><headerclass="site-header"><aclass="site-title"href="/engs50/"><imgwidth=48align=centersrc="/engs50/50.png"alt="icon">Engs50(CS50)</a><navclass="site-nav">[<ahref="/engs50/Labs/">Labs</a>][<ahref="/engs50/Notes/">Notes</a>][<ahref="/engs50/Reading/">Reading</a>][<ahref="/engs50/Resources/">Resources</a>][<ahref="/engs50/Examples/">Examples</a>]</nav></header><divclass="page-content"><divclass="wrapper"><articleclass="post"><headerclass="post-header"><h1class="post-title">Extra-IntroductiontoC</h1></header><divclass="post-content"><p>This“lectureextra”ismeanttocomplementtoday’s<ahref="index.html">lecturenotes</a>.</p><p><strong><em>Warning:theexamplesin(orcitedby)this“lectureextra”maynotfollowCS50programmingstyle.”</em></strong></p><p>Wecover</p><ul><li>Operators</li><li>Precedence</li><li>Basedatatypes</li><li>Storagemodifiers</li><li>Scoperulesofglobalandlocalvariables</li><li>FlowofcontrolinCprograms</li></ul><h2id="lets-c-">Let’sC!</h2><h3id="basic-operators">BasicOperators</h3><p>NearlyalloperatorsinCareidenticaltothoseofJava.However,theroleofCinsystemprogrammingexposesustomuchmoreuseoftheshiftandbit-wiseoperatorsthaninJava.Herearethebasicoperators:</p><ul><li>Assignment<codeclass="language-plaintexthighlighter-rouge">=</code></li><li>Arithmetic<codeclass="language-plaintexthighlighter-rouge">+,-,*,/,%,unary</code></li><li><p>Prioritiesmaybeoverriddenwith<codeclass="language-plaintexthighlighter-rouge">()</code>’s.</p></li><li>Relational(allofthesehavethesameprecedence)<codeclass="language-plaintexthighlighter-rouge">&gt;,&gt;=,&lt;,&lt;=</code></li><li>Equality<codeclass="language-plaintexthighlighter-rouge">==</code>,<codeclass="language-plaintexthighlighter-rouge">!=</code></li><li>Logical<codeclass="language-plaintexthighlighter-rouge">&amp;&amp;</code>(and),<codeclass="language-plaintexthighlighter-rouge">||</code>(or),<codeclass="language-plaintexthighlighter-rouge">!</code>(not)</li></ul><h3id="pre--and-post--decrement-and-increment-operators">Pre-andpost-decrementandincrementoperators</h3><p>Any(integer,characterorpointer)variablemaybeeitherincrementedordecrementedbeforeorafteritsvalueisusedinanexpression.</p><p>Forexample:<codeclass="language-plaintexthighlighter-rouge">--fred</code>willdecrement<codeclass="language-plaintexthighlighter-rouge">fred</code>beforeitsvalueisused</p><p><codeclass="language-plaintexthighlighter-rouge">++fred</code>willincrement<codeclass="language-plaintexthighlighter-rouge">fred</code>beforeitsvalueisused</p><p><codeclass="language-plaintexthighlighter-rouge">fred--</code>willget(old)valueandthendecrement<codeclass="language-plaintexthighlighter-rouge">fred</code></p><p><codeclass="language-plaintexthighlighter-rouge">fred++</code>willget(old)valueandthenincrement<codeclass="language-plaintexthighlighter-rouge">fred</code></p><p>Let’swritesomeCcodetolookatpreandpostincrementanddecrement.</p><p>Ccode:<ahref="/engs50/Examples/increment.c">increment.c</a></p><divclass="language-chighlighter-rouge"><divclass="highlight"><preclass="highlight"><code><spanclass="cm">/*file:increment.cDescription:Illustratepreandpostincrementanddecrement.*/</span><spanclass="cp">#include&lt;stdio.h&gt;</span><spanclass="kt">int</span><spanclass="nf">main</span><spanclass="p">()</span><spanclass="p">{</span><spanclass="kt">int</span><spanclass="n">fred</span><spanclass="o">=</span><spanclass="mi">3</span><spanclass="p">,</span><spanclass="n">a</span><spanclass="o">=</span><spanclass="mi">3</span><spanclass="p">;</span><spanclass="n">printf</span><spanclass="p">(</span><spanclass="s">"Start;fred=%danda=%d</span><spanclass="se">\n</span><spanclass="s">"</span><spanclass="p">,</span><spanclass="n">fred</span><spanclass="p">,</span><spanclass="n">a</span><spanclass="p">);</span><spanclass="n">a</span><spanclass="o">=</span><spanclass="o">--</span><spanclass="n">fred</span><spanclass="p">;</span><spanclass="n">printf</span><spanclass="p">(</span><spanclass="s">"a=--fred;fred=%danda=%d</span><spanclass="se">\n</span><spanclass="s">"</span><spanclass="p">,</span><spanclass="n">fred</span><spanclass="p">,</span><spanclass="n">a</span><spanclass="p">);</span><spanclass="n">a</span><spanclass="o">=</span><spanclass="o">++</span><spanclass="n">fred</span><spanclass="p">;</span><spanclass="n">printf</span><spanclass="p">(</span><spanclass="s">"a=++fred;fred=%danda=%d</span><spanclass="se">\n</span><spanclass="s">"</span><spanclass="p">,</span><spanclass="n">fred</span><spanclass="p">,</span><spanclass="n">a</span><spanclass="p">);</span><spanclass="n">a</span><spanclass="o">=</span><spanclass="n">fred</span><spanclass="o">--</span><spanclass="p">;</span><spanclass="n">printf</span><spanclass="p">(</span><spanclass="s">"a=fred--;fred=%danda=%d</span><spanclass="se">\n</span><spanclass="s">"</span><spanclass="p">,</span><spanclass="n">fred</span><spanclass="p">,</span><spanclass="n">a</span><spanclass="p">);</span><spanclass="n">a</span><spanclass="o">=</span><spanclass="n">fred</span><spanclass="o">++</span><spanclass="p">;</span><spanclass="n">printf</span><spanclass="p">(</span><spanclass="s">"a=fred++;fred=%danda=%d</span><spanclass="se">\n</span><spanclass="s">"</span><spanclass="p">,</span><spanclass="n">fred</span><spanclass="p">,</span><spanclass="n">a</span><spanclass="p">);</span><spanclass="k">return</span><spanclass="mi">0</span><spanclass="p">;</span><spanclass="p">}</span></code></pre></div></div><p>OncewehavetheCcodewehavetocompileitwith<codeclass="language-plaintexthighlighter-rouge">gcc</code>withthevariouscompilerswitcheswediscussedinLecture1.ToseeALLoftheoptions,try</p><divclass="language-bashhighlighter-rouge"><divclass="highlight"><preclass="highlight"><code>gcc<spanclass="nt">--help</span><spanclass="nt">-v</span><spanclass="c">#or</span>mangcc</code></pre></div></div><p>We’lluse<codeclass="language-plaintexthighlighter-rouge">mygcc-ofilenamefilename.c</code>asourcompilationcommandfornow.Later,we’llusethemorepowerful<codeclass="language-plaintexthighlighter-rouge">make</code>utility.In<codeclass="language-plaintexthighlighter-rouge">.bashrc</code>wealreadydefined<codeclass="language-plaintexthighlighter-rouge">mygcc</code>asanalias:</p><divclass="language-bashhighlighter-rouge"><divclass="highlight"><preclass="highlight"><code><spanclass="nv">$</span><spanclass="nb">alias</span>mygcc<spanclass="nb">alias</span><spanclass="nv">mygcc</span><spanclass="o">=</span><spanclass="s1">'gcc-Wall-pedantic-std=c11-ggdb'</span><spanclass="nv">$</span>mygcc<spanclass="nt">-o</span>incrementincrement.c<spanclass="nv">$</span><spanclass="nb">ls</span><spanclass="nt">-l</span>increment<spanclass="nt">-rwxr-xr-x</span>1atcadmin13344Jan1421:51increment<spanclass="nv">$</span>./incrementStart<spanclass="p">;</span>fred<spanclass="o">=</span>3anda<spanclass="o">=</span>3a<spanclass="o">=</span><spanclass="nt">--fred</span><spanclass="p">;</span>fred<spanclass="o">=</span>2anda<spanclass="o">=</span>2a<spanclass="o">=</span>++fred<spanclass="p">;</span>fred<spanclass="o">=</span>3anda<spanclass="o">=</span>3a<spanclass="o">=</span>fred--<spanclass="p">;</span>fred<spanclass="o">=</span>2anda<spanclass="o">=</span>3a<spanclass="o">=</span>fred++<spanclass="p">;</span>fred<spanclass="o">=</span>3anda<spanclass="o">=</span>2</code></pre></div></div><p>Thecompilerproducesanexecutablefilenamed<codeclass="language-plaintexthighlighter-rouge">increment</code>.</p><p>Youdonothavetouse<codeclass="language-plaintexthighlighter-rouge">chmod</code>tomakeitanexecutable.Thecompilertakescareofthatwhenitcreatesanexecutablewiththecorrectpermissionforthefile<codeclass="language-plaintexthighlighter-rouge">increment</code>.</p><p>Tryityourself.Savethefileinyourdirectory(e.g.,<codeclass="language-plaintexthighlighter-rouge">cs50/code/</code>),andcompileandrunthecode.Verifythattheoutputmatchestheabove.</p><h3id="more-about-gcc-and-mygcc">Moreaboutgccandmygcc</h3><p>Awordofwarning:Whetherusing<codeclass="language-plaintexthighlighter-rouge">gcc-ohellohello.c</code>or<codeclass="language-plaintexthighlighter-rouge">mygcc-ohellohello.c</code>youmusttakecaretoavoidgettingtheorderofthefileswrongwiththe<codeclass="language-plaintexthighlighter-rouge">-o</code>switchwhichtellsthecomplierthatthenameofthefilefollowingthe<codeclass="language-plaintexthighlighter-rouge">-o</code>switchwillbethenameoftheexecutable.Onestudentcompiledthecorrectway<codeclass="language-plaintexthighlighter-rouge">mygcc-ohellohello.c</code>(producingaexecutable<codeclass="language-plaintexthighlighter-rouge">hello</code>correctly)andthenrecompiledbutgottheorderwrong:<codeclass="language-plaintexthighlighter-rouge">mygcc-ohello.chello</code>.Whatthe<codeclass="language-plaintexthighlighter-rouge">gcc</code>compilerdidwasn’tpleasant.Ittooktheexecutable<codeclass="language-plaintexthighlighter-rouge">hello</code>asthesourcefileandand<codeclass="language-plaintexthighlighter-rouge">hello.c</code>asthenameoftheexecutabletobecreated.Theresultwastherealsourcefile<codeclass="language-plaintexthighlighter-rouge">hello.c</code>disappeared!Well,itdidn’tactuallydisappear,itwasjusterasedbythecompilerasitgotreadytoproduceanewoutputfileofthatsamename.Sopleasebecareful:the<codeclass="language-plaintexthighlighter-rouge">-o</code>tellsthecompilerthattheexecutableitcreatesshouldbegiventhenamethatfollowsthe<codeclass="language-plaintexthighlighter-rouge">-o</code>.Youcanalwaysusethedefault<codeclass="language-plaintexthighlighter-rouge">a.out</code>andnotusethe<codeclass="language-plaintexthighlighter-rouge">-o</code>optionifconcerned.</p><p>Theother<codeclass="language-plaintexthighlighter-rouge">gcc</code>switchesareimportanttousebecausemakesurewewritegoodcleancode.Let<codeclass="language-plaintexthighlighter-rouge">sdiscusswhatthese</code>gcc<codeclass="language-plaintexthighlighter-rouge">optionsare(</code>-Wall-pedantic-std=c11`):</p><ul><li><codeclass="language-plaintexthighlighter-rouge">-Wall</code>turnsonalloptionalwarningswhicharedesirablefornormalcode.</li><li><codeclass="language-plaintexthighlighter-rouge">-pedantic</code>checksprogramsforstrictISOCconformanceandissuesallthewarningsdemandedbystrictISOC.</li><li><codeclass="language-plaintexthighlighter-rouge">-std=c11</code>indicatesthelanguagestandardwewant.Byusingtheseoptionsthecompilerforcesustoresolvevariouswarningthatyouwouldnotseeifyoujustused<codeclass="language-plaintexthighlighter-rouge">gcc</code>withoutanyswitches.</li></ul><p>Alwaysusetheseoptions(<codeclass="language-plaintexthighlighter-rouge">-Wall-pedantic-std=c11</code>)fromnowoninthiscourse.Youcandoa<codeclass="language-plaintexthighlighter-rouge">mangcc</code>andlookattheoptionmeaningsforthenittygrittydetailsonthesesettings.</p><h3id="bitwise-operators-and-masking">Bitwiseoperatorsandmasking</h3><p><codeclass="language-plaintexthighlighter-rouge">&amp;</code>(bitwiseand),<codeclass="language-plaintexthighlighter-rouge">|</code>(bitwiseor),<codeclass="language-plaintexthighlighter-rouge">~</code>(bitwisenegation).</p><p>Youcanusethesetocheckifcertainbitsareon,asin<codeclass="language-plaintexthighlighter-rouge">(nextchar&amp;0x30)</code>.Doyouseehowthisworks?</p><p>Shiftoperators<codeclass="language-plaintexthighlighter-rouge">&lt;&lt;</code>(shiftleft),<codeclass="language-plaintexthighlighter-rouge">&gt;&gt;</code>(shiftright)</p><p>Shiftingbitstotheleftorright.Note:resultsmayvarybaseduponwhetherthetypeofthevariablebeingshiftedis“signed”or“unsigned”.SeeH&amp;Spp.231-233.</p><h3id="combined-operators-and-assignment">Combinedoperatorsandassignment</h3><p><strong>Example<ahref="/engs50/Examples/combined.c">combined.c</a></strong></p><divclass="language-chighlighter-rouge"><divclass="highlight"><preclass="highlight"><code><spanclass="cp">#include&lt;stdio.h&gt;#include&lt;stdlib.h&gt;</span><spanclass="kt">int</span><spanclass="nf">main</span><spanclass="p">()</span><spanclass="p">{</span><spanclass="kt">int</span><spanclass="n">a</span><spanclass="p">,</span><spanclass="n">b</span><spanclass="p">,</span><spanclass="n">c</span><spanclass="p">,</span><spanclass="n">d</span><spanclass="p">;</span><spanclass="n">a</span><spanclass="o">=</span><spanclass="mi">10</span><spanclass="p">;</span><spanclass="n">b</span><spanclass="o">=</span><spanclass="mi">20</span><spanclass="p">;</span><spanclass="n">c</span><spanclass="o">=</span><spanclass="mi">30</span><spanclass="p">;</span><spanclass="n">d</span><spanclass="o">=</span><spanclass="mi">4</span><spanclass="p">;</span><spanclass="c1">//theselines...</span><spanclass="n">a</span><spanclass="o">=</span><spanclass="n">a</span><spanclass="o">+</span><spanclass="mi">2</span><spanclass="p">;</span><spanclass="n">b</span><spanclass="o">=</span><spanclass="n">b</span><spanclass="o">-</span><spanclass="mi">12</span><spanclass="p">;</span><spanclass="n">c</span><spanclass="o">=</span><spanclass="n">c</span><spanclass="o">*</span><spanclass="p">(</span><spanclass="n">d</span><spanclass="o">-</span><spanclass="mi">2</span><spanclass="p">);</span><spanclass="n">printf</span><spanclass="p">(</span><spanclass="s">"a=%d,b=%d,c=%d</span><spanclass="se">\n</span><spanclass="s">"</span><spanclass="p">,</span><spanclass="n">a</span><spanclass="p">,</span><spanclass="n">b</span><spanclass="p">,</span><spanclass="n">c</span><spanclass="p">);</span><spanclass="n">a</span><spanclass="o">=</span><spanclass="mi">10</span><spanclass="p">;</span><spanclass="n">b</span><spanclass="o">=</span><spanclass="mi">20</span><spanclass="p">;</span><spanclass="n">c</span><spanclass="o">=</span><spanclass="mi">30</span><spanclass="p">;</span><spanclass="n">d</span><spanclass="o">=</span><spanclass="mi">4</span><spanclass="p">;</span><spanclass="c1">//couldhavebeenwrittenthisway</span><spanclass="n">a</span><spanclass="o">+=</span><spanclass="mi">2</span><spanclass="p">;</span><spanclass="n">b</span><spanclass="o">-=</span><spanclass="mi">12</span><spanclass="p">;</span><spanclass="n">c</span><spanclass="o">*=</span><spanclass="n">d</span><spanclass="o">-</span><spanclass="mi">2</span><spanclass="p">;</span><spanclass="n">printf</span><spanclass="p">(</span><spanclass="s">"a=%d,b=%d,c=%d</span><spanclass="se">\n</span><spanclass="s">"</span><spanclass="p">,</span><spanclass="n">a</span><spanclass="p">,</span><spanclass="n">b</span><spanclass="p">,</span><spanclass="n">c</span><spanclass="p">);</span><spanclass="n">exit</span><spanclass="p">(</span><spanclass="mi">0</span><spanclass="p">);</span><spanclass="p">}</span></code></pre></div></div><h3id="type-coercion">Typecoercion</h3><p>Cpermitsassignmentsandparameterpassingbetweenvariablesofdifferenttypesusingtypecastsorcoercion.CastsinCarenotimplicit,andareusedwheresomelanguagesrequirea‘transferfunction’.WewillseeexamplesofC’scastoperatorlaterinthecourse.</p><h3id="precedence-of-operators">Precedenceofoperators</h3><p>Expressionsareallevaluatedfromleft-to-right,andthedefaultprecedencemaybeoverriddenwithbrackets.</p><table><thead><tr><thstyle="text-align:center">Operator</th></tr><tr><thstyle="text-align:center">Precedence</th></tr></thead><tbody><tr><tdstyle="text-align:center"><em>highest</em></td></tr><tr><tdstyle="text-align:center"><codeclass="language-plaintexthighlighter-rouge">()</code></td></tr><tr><tdstyle="text-align:center"><codeclass="language-plaintexthighlighter-rouge">++--!</code></td></tr><tr><tdstyle="text-align:center"><codeclass="language-plaintexthighlighter-rouge">*/%|</code></td></tr><tr><tdstyle="text-align:center"><codeclass="language-plaintexthighlighter-rouge">+-</code></td></tr><tr><tdstyle="text-align:center"><codeclass="language-plaintexthighlighter-rouge">==!=</code></td></tr><tr><tdstyle="text-align:center"><codeclass="language-plaintexthighlighter-rouge">&amp;</code></td></tr><tr><tdstyle="text-align:center"><codeclass="language-plaintexthighlighter-rouge">|</code></td></tr><tr><tdstyle="text-align:center"><codeclass="language-plaintexthighlighter-rouge">&amp;&amp;</code></td></tr><tr><tdstyle="text-align:center"><codeclass="language-plaintexthighlighter-rouge">||</code></td></tr><tr><tdstyle="text-align:center"><codeclass="language-plaintexthighlighter-rouge">?:</code></td></tr><tr><tdstyle="text-align:center"><codeclass="language-plaintexthighlighter-rouge">=</code></td></tr><tr><tdstyle="text-align:center"><codeclass="language-plaintexthighlighter-rouge">,</code></td></tr><tr><tdstyle="text-align:center"><em>lowest</em></td></tr></tbody></table><h3id="variable-names">Variablenames</h3><p>Variablenames(andtypeandfunctionnamesasweshallseelater)mustcommencewithanalphabeticortheunderscorecharacter<codeclass="language-plaintexthighlighter-rouge">A-Za-z_</code>andbefollowedbyzeroormorealphabetic,underscoreordigitcharacters<codeclass="language-plaintexthighlighter-rouge">A-Za-z0-9</code>.MostCcompilers,suchas<codeclass="language-plaintexthighlighter-rouge">gcc</code>,acceptandsupportvariable,type,andfunctionnamestobeupto256charactersinlength.(SomeolderCcompilersonlysupportedvariablenameswithupto8uniqueleadingcharactersandkeepingtothislimitmaybepreferredtomaintainportablecode.)Itisalsopreferredthatyoudonotusevariablenamesconsistingentirelyofuppercasecharacters.All-uppercasevariablenamesaretypicallyreservedforconstants(suchas<codeclass="language-plaintexthighlighter-rouge">MAXBUFSIZE</code>,<codeclass="language-plaintexthighlighter-rouge">AVAGADROS_NUMBER</code>,<codeclass="language-plaintexthighlighter-rouge">MAXUSERS</code>).</p><p>Importantly,Cvariablenamesarecasesensitive,so<codeclass="language-plaintexthighlighter-rouge">MYLIMIT</code>,<codeclass="language-plaintexthighlighter-rouge">mylimit</code>,<codeclass="language-plaintexthighlighter-rouge">Mylimit</code>and<codeclass="language-plaintexthighlighter-rouge">MyLimit</code>arefourdifferentvariablenames.</p><p>Therearesomespecificvariable/functionnamingstylesthatyoumayencounter.Themajoronesare</p><ul><li><p><strong>camelCase</strong>:writingcompoundwordswiththefirstletterofeachwordcapitalized,exceptforthefirstword’sfirstletter,whichisnotcapitalized.</p></li><li><p><strong>PascalCase</strong>:writingcompoundwordsjustasincamelCase*withthefirstletterofthefirstwordalsocapitalized.(InJavaitiscommontousethiscaseforclassnames,butCamelcaseformembernames.)</p></li><li><p><strong>snake_case</strong>:writingcompoundwordswithanunderscorebetweeneachwordwithlittle,ifany,capitalization.</p></li></ul><p>Forashorthistoryofhowthesecameaboutandsomediscussion,seeBradAbrams’<ahref="http://blogs.msdn.com/b/brada/archive/2004/02/03/67024.aspx">blogpost</a>.</p><p>Anyprogrammingproject,includingallofyourassignments,shouldpickavariable/functionnamingstyleand<strong>stickwithit</strong>.</p><h3id="base-types">Basetypes</h3><p>Variablesaredeclaredtobeofacertaintype.ThistypemaybeeitherabasetypesupportedbytheClanguageitself,orauser-definedtypeconsistingofelementsdrawnfromC’ssetofbasetypes.C’sbasetypesandtheirrepresentationonourlab’ssystemsare:</p><table><thead><tr><thstyle="text-align:left">type</th><thstyle="text-align:left">description</th></tr></thead><tbody><tr><tdstyle="text-align:left"><codeclass="language-plaintexthighlighter-rouge">char</code></td><tdstyle="text-align:left">thecharactertype,8bitslong</td></tr><tr><tdstyle="text-align:left"><codeclass="language-plaintexthighlighter-rouge">short</code></td><tdstyle="text-align:left">theshortintegertype,16bitslong</td></tr><tr><tdstyle="text-align:left"><codeclass="language-plaintexthighlighter-rouge">int</code></td><tdstyle="text-align:left">thestandardintegertype,32bitslong</td></tr><tr><tdstyle="text-align:left"><codeclass="language-plaintexthighlighter-rouge">long</code></td><tdstyle="text-align:left">thelongerintegertype,64bitslong</td></tr><tr><tdstyle="text-align:left"><codeclass="language-plaintexthighlighter-rouge">float</code></td><tdstyle="text-align:left">thestandardfloatingpoint(real)type,32bitslong(about10decimaldigitsofprecision)</td></tr><tr><tdstyle="text-align:left"><codeclass="language-plaintexthighlighter-rouge">double</code></td><tdstyle="text-align:left">theextraprecisionfloatingpointtype,64bitslong(about17decimaldigitsofprecision)</td></tr></tbody></table><p>Wecandeterminethenumberofbytesrequiredfordatatypes(andotherthings,aswewillseelater)withthe<codeclass="language-plaintexthighlighter-rouge">sizeof</code>operator.Incontrast,Javadefineshowlongeachdatatypemaybe.InC,thesizesvaryfrommachinetomachine,withthedetailsmanagedbythecompiler.C’sonlyguaranteeisthat:</p><divclass="language-plaintexthighlighter-rouge"><divclass="highlight"><preclass="highlight"><code>sizeof(char)&lt;=sizeof(short)&lt;=sizeof(int)&lt;=sizeof(long)</code></pre></div></div><p>Let’swritesomeCcodetolookatthesebasedatatypes.Wewillusethe<codeclass="language-plaintexthighlighter-rouge">sizeof</code>operatorandthe<codeclass="language-plaintexthighlighter-rouge">printf</code>function.Wewillalsodefinevariablesofeachofthebasetypesandprinttheinitializedvaluesaspartofthe<codeclass="language-plaintexthighlighter-rouge">data-types.c</code>code.</p><p><strong>Example<ahref="/engs50/Examples/data-types.c">data-types.c</a></strong></p><p>Thecontentsofdata-types.clookslikethis:</p><divclass="language-chighlighter-rouge"><divclass="highlight"><preclass="highlight"><code><spanclass="cm">/*file:data-types.cDescription:Setsupvariablesfordifferentbasedatatypes,intialisesthemandprintthedataandthesizeofthebasedatatypesinnumberofbytes.Revisedversionofcodepg.96(Program2.10)(Bronson)"FirstBookonANSIC"*/</span><spanclass="cp">#include&lt;stdio.h&gt;</span><spanclass="kt">int</span><spanclass="nf">main</span><spanclass="p">()</span><spanclass="p">{</span><spanclass="kt">char</span><spanclass="n">ch</span><spanclass="o">=</span><spanclass="sc">'a'</span><spanclass="p">;</span><spanclass="kt">int</span><spanclass="n">in</span><spanclass="o">=</span><spanclass="mi">2</span><spanclass="p">;</span><spanclass="kt">short</span><spanclass="n">sh</span><spanclass="o">=</span><spanclass="mi">3</span><spanclass="p">;</span><spanclass="kt">long</span><spanclass="n">lo</span><spanclass="o">=</span><spanclass="mi">4</span><spanclass="p">;</span><spanclass="kt">long</span><spanclass="kt">long</span><spanclass="n">llo</span><spanclass="o">=</span><spanclass="mi">1234567890</span><spanclass="p">;</span><spanclass="kt">float</span><spanclass="n">fl</span><spanclass="o">=</span><spanclass="mi">1000</span><spanclass="p">.</span><spanclass="mi">256734</span><spanclass="p">;</span><spanclass="kt">double</span><spanclass="n">db</span><spanclass="o">=</span><spanclass="mf">11e+23</span><spanclass="p">;</span><spanclass="kt">long</span><spanclass="kt">double</span><spanclass="n">ld</span><spanclass="o">=</span><spanclass="mf">10e+30</span><spanclass="p">;</span><spanclass="n">printf</span><spanclass="p">(</span><spanclass="s">"-------contents-------sizeof()------</span><spanclass="se">\n\n</span><spanclass="s">"</span><spanclass="p">);</span><spanclass="n">printf</span><spanclass="p">(</span><spanclass="s">"contentsofcharis%c---sizeof%ldbytes</span><spanclass="se">\n\n</span><spanclass="s">"</span><spanclass="p">,</span><spanclass="n">ch</span><spanclass="p">,</span><spanclass="k">sizeof</span><spanclass="p">(</span><spanclass="kt">char</span><spanclass="p">));</span><spanclass="n">printf</span><spanclass="p">(</span><spanclass="s">"contentsintis%d---sizeof%ldbytes</span><spanclass="se">\n\n</span><spanclass="s">"</span><spanclass="p">,</span><spanclass="n">in</span><spanclass="p">,</span><spanclass="k">sizeof</span><spanclass="p">(</span><spanclass="kt">int</span><spanclass="p">));</span><spanclass="n">printf</span><spanclass="p">(</span><spanclass="s">"contentsshortis%d---sizeof%ldbytes</span><spanclass="se">\n\n</span><spanclass="s">"</span><spanclass="p">,</span><spanclass="n">sh</span><spanclass="p">,</span><spanclass="k">sizeof</span><spanclass="p">(</span><spanclass="kt">short</span><spanclass="p">));</span><spanclass="n">printf</span><spanclass="p">(</span><spanclass="s">"contentslongis%ld---sizeof%ldbytes</span><spanclass="se">\n\n</span><spanclass="s">"</span><spanclass="p">,</span><spanclass="n">lo</span><spanclass="p">,</span><spanclass="k">sizeof</span><spanclass="p">(</span><spanclass="kt">long</span><spanclass="p">));</span><spanclass="n">printf</span><spanclass="p">(</span><spanclass="s">"contentslonglongis%lld---sizeof%ldbytes</span><spanclass="se">\n\n</span><spanclass="s">"</span><spanclass="p">,</span><spanclass="n">llo</span><spanclass="p">,</span><spanclass="k">sizeof</span><spanclass="p">(</span><spanclass="kt">long</span><spanclass="kt">long</span><spanclass="p">));</span><spanclass="n">printf</span><spanclass="p">(</span><spanclass="s">"contentsfloatis%f---sizeof%ldbytes</span><spanclass="se">\n\n</span><spanclass="s">"</span><spanclass="p">,</span><spanclass="n">fl</span><spanclass="p">,</span><spanclass="k">sizeof</span><spanclass="p">(</span><spanclass="kt">float</span><spanclass="p">));</span><spanclass="n">printf</span><spanclass="p">(</span><spanclass="s">"contentsdoubleis%e---sizeof%ldbytes</span><spanclass="se">\n\n</span><spanclass="s">"</span><spanclass="p">,</span><spanclass="n">db</span><spanclass="p">,</span><spanclass="k">sizeof</span><spanclass="p">(</span><spanclass="kt">double</span><spanclass="p">));</span><spanclass="n">printf</span><spanclass="p">(</span><spanclass="s">"contentslongdoubleis%LG---sizeof%ldbytes</span><spanclass="se">\n</span><spanclass="s">"</span><spanclass="p">,</span><spanclass="n">ld</span><spanclass="p">,</span><spanclass="k">sizeof</span><spanclass="p">(</span><spanclass="kt">long</span><spanclass="kt">double</span><spanclass="p">));</span><spanclass="k">return</span><spanclass="mi">0</span><spanclass="p">;</span><spanclass="p">}</span></code></pre></div></div><p>Let’scompileandrunthecode.</p><divclass="language-bashhighlighter-rouge"><divclass="highlight"><preclass="highlight"><code><spanclass="nv">$</span>mygcc<spanclass="nt">-o</span>data-typesdata-types.c<spanclass="nv">$</span>./data-types<spanclass="nt">-------contents</span><spanclass="nt">-------</span>sizeof<spanclass="o">()</span><spanclass="nt">------</span>contentsofcharisa<spanclass="nt">---</span>sizeof1bytescontentsintis2<spanclass="nt">---</span>sizeof4bytescontentsshortis3<spanclass="nt">---</span>sizeof2bytescontentslongis4<spanclass="nt">---</span>sizeof8bytescontentslonglongis1234567890<spanclass="nt">---</span>sizeof8bytescontentsfloatis1000.256714<spanclass="nt">---</span>sizeof4bytescontentsdoubleis1.100000e+24<spanclass="nt">---</span>sizeof8bytescontentslongdoubleis1E+31<spanclass="nt">---</span>sizeof16bytes</code></pre></div></div><p>Checkitout:Savethefileinyourdirectory;compileandrunthecode.Checktheoutput.</p><h3id="storage-modifiers-of-variables">Storagemodifiersofvariables</h3><p>Basetypesmaybeprecededwithoneormorestoragemodifier:</p><table><thead><tr><thstyle="text-align:left">storage</th><thstyle="text-align:left">meaning</th></tr><tr><thstyle="text-align:left">modifier</th><thstyle="text-align:left"> </th></tr></thead><tbody><tr><tdstyle="text-align:left"><codeclass="language-plaintexthighlighter-rouge">auto</code></td><tdstyle="text-align:left">thevariableisplacedonthestack(default,deprecated)</td></tr><tr><tdstyle="text-align:left"><codeclass="language-plaintexthighlighter-rouge">const</code></td><tdstyle="text-align:left">thevariableisaconstant,andcan/willneverchangevalue</td></tr><tr><tdstyle="text-align:left"><codeclass="language-plaintexthighlighter-rouge">extern</code></td><tdstyle="text-align:left">thevariableisdefinedoutsideofthecurrentfile</td></tr><tr><tdstyle="text-align:left"><codeclass="language-plaintexthighlighter-rouge">register</code></td><tdstyle="text-align:left">requestthatthevariablebeplacedinaregister(mostlyignored)</td></tr><tr><tdstyle="text-align:left"><codeclass="language-plaintexthighlighter-rouge">static</code></td><tdstyle="text-align:left">thevariableisplacedinglobalstoragewithlimitedvisibility</td></tr><tr><tdstyle="text-align:left"><codeclass="language-plaintexthighlighter-rouge">typedef</code></td><tdstyle="text-align:left">introducesauser-definedtype</td></tr><tr><tdstyle="text-align:left"><codeclass="language-plaintexthighlighter-rouge">unsigned</code></td><tdstyle="text-align:left">storedandusedonlyaspositiveintegers</td></tr></tbody></table><h3id="initialization-of-variables">Initializationofvariables</h3><p>Allscalar<codeclass="language-plaintexthighlighter-rouge">auto</code>and<codeclass="language-plaintexthighlighter-rouge">static</code>variablesmaybeinitializedimmediatelyaftertheirdefinition,typicallywithconstantsorsimpleexpressionsthatthecompilercanevaluateatcompiletime.TheC99languagedefinesthatalluninitializedglobalvariables,andalluninitializedstaticlocalvariableswillhavethestartingvaluesresultingfromtheirmemorylocationsbeingfilledwithzeroes-convenientlythevalueof<codeclass="language-plaintexthighlighter-rouge">0</code>foraninteger,and<codeclass="language-plaintexthighlighter-rouge">0.0</code>forafloatingpointnumber.</p><h3id="scope-rules-of-global-variables">Scoperulesofglobalvariables</h3><p><em>Scope</em>isdefinedasthesection(e.g.,function,block)oftheprogramwherethevariableisvalidandknown.</p><p>InJava,avariableissimplyusedasanamebywhichwerefertoanobject.Anewlycreatedobjectisgivenanameforlaterreference,andthatnamemaybere-usedtorefertoanotherobjectlaterintheprogram.InC,avariablemorestrictlyreferstoamemoryaddress(orcontiguousmemoryaddressstartingfromtheindicatedpoint)andthetypeofthevariabledeclareshowthatmemory’scontentsshouldbeinterpretedandmodified.</p><p>Conlyhastwotruelexicallevels,<codeclass="language-plaintexthighlighter-rouge">global</code>and<codeclass="language-plaintexthighlighter-rouge">function</code>,thoughsub-blocksofvariablesandstatementsmaybeintroducedinsub-blocksinmanyplaces,seeminglycreatingnewlexicallevels.Assuch,variablesaretypicallydefinedglobally(atlexicallevel0),oratthestartofastatementblock,whereafunction’sbodyisunderstoodtobeastatementblock.</p><p>Variablesdefinedgloballyinafile,arevisibleuntiltheendofthatfile.Theyneednotbedeclaredatthetopofafile,buttypicallyare.Ifaglobalvariablehasastoragemodifierof<codeclass="language-plaintexthighlighter-rouge">static</code>,itmeansthatthevariableisonlyavailablefromwithinthatfile.Ifthe<codeclass="language-plaintexthighlighter-rouge">static</code>modifierismissing,thatvariablemaybeaccessedfromanotherfileifpartofaprogramcompiledandlinkedfrommultiplesourcefiles.</p><p>The<codeclass="language-plaintexthighlighter-rouge">extern</code>modifierisused(withinagivenfile)todeclarethattheindicatedvariableisdefinedinanotherfile.Thevariablemaybe<em>declared</em>as<codeclass="language-plaintexthighlighter-rouge">extern</code>inallfiles,butmustbe<em>defined</em>(andnotasa<codeclass="language-plaintexthighlighter-rouge">static</code>!)inonlyasinglefile.</p><h3id="scope-rules-of-local-variables">Scoperulesoflocalvariables</h3><p>Variablesmayalsobedeclaredatthebeginningofastatementblock,butmaynotbedeclaredanywhereotherthanthetopoftheblock.Suchvariablesarevisibleuntiltheendofthatblock;mostvariablesaredeclaredatthetopofafunction’sblock,andarethusvisibleuntiltheendofthecurrentfunction.Avariablesnamemayshadowthatofaglobalvariable,makingthatglobalvariableinaccessible.Blocksdonothavenames,andsoshadowedvariablescannotbenamed.Localvariablesareaccessibleuntiltheendoftheblockinwhichtheyaredefined.</p><p>Localvariablesareimplicitlyprecededbythe<codeclass="language-plaintexthighlighter-rouge">auto</code>modifierascontrolflowenterstheblock;memoryforthevariableisallocatedontherun-timestack.Thememoryisautomaticallydeallocated(orsimplybecomesinaccessible)ascontrolflowleavestheblock.Theimplicit<codeclass="language-plaintexthighlighter-rouge">auto</code>modifierfacilitatesrecursioninCaseachentryintoanewblockallocatesmemoryfornewlocalvariables,andtheseuniqueinstancesareaccessibleonlywhileinthatblock.</p><p>Ifalocalvariableisprecededbythe<codeclass="language-plaintexthighlighter-rouge">static</code>modifier,itsmemoryisnotallocatedontherun-timestack,butinthesamememoryasforglobalvariables.Whencontrolflowleavestheblock,thememoryisnotdeallocated,andremainsfortheexclusiveusebythatlocalvariable.Theresultisthata<codeclass="language-plaintexthighlighter-rouge">static</code>localvariableretainsitsvaluebetweenentriestoitsblock.Whereasthestartingvalueofan<codeclass="language-plaintexthighlighter-rouge">auto</code>localvariable(sittingonthestack)cannotbeassumed(ormorecorrectly,shouldbeconsideredtocontainatotallyrandomvalue),thestartingvalueofastaticlocalvariableisasitwaswhenthevariablewaslastused.</p><h3id="examples-of-global-and-local-variables">Examplesofglobalandlocalvariables</h3><p>Let’slookatsomecodesnippetstoreinforcetheideasoflocalandglobalvariablesandtheissueofthescopeofthesevariablesinasectionofcode.</p><p><strong>Example<ahref="/engs50/Examples/scope.c">scope.c</a></strong></p><divclass="language-chighlighter-rouge"><divclass="highlight"><preclass="highlight"><code><spanclass="cm">/*File:scope.cDescription:Illustratestheuseofglobalandlocalvariablesandglobalfunctionprototypes.Revisedcodetakenfrompg.330(Program7.1)(Bronson)"FirstBookonANSIC"*/</span><spanclass="cp">#include&lt;stdio.h&gt;</span><spanclass="cm">/*firstnumisaglobalvariablenotdefinedonthemain()stack.Ithasfullscopeofallfunctionsinthefilescope.c.Anycodeinthefilecanreadandwritetoit.Oncemain()teriminatesthevariableisdellocatedandnolongerexists*/</span><spanclass="kt">int</span><spanclass="n">firstnum</span><spanclass="p">;</span><spanclass="cm">/*createaglobalvariablenamedfirstnum*/</span><spanclass="kt">void</span><spanclass="nf">valfun</span><spanclass="p">();</span><spanclass="cm">/*globalfunctionprototype*/</span><spanclass="kt">int</span><spanclass="nf">main</span><spanclass="p">()</span><spanclass="p">{</span><spanclass="kt">int</span><spanclass="n">secnum</span><spanclass="p">;</span><spanclass="cm">/*createalocalvariablenamedsecnum*/</span><spanclass="n">firstnum</span><spanclass="o">=</span><spanclass="mi">10</span><spanclass="p">;</span><spanclass="cm">/*storeavalueintotheglobalvariable*/</span><spanclass="n">secnum</span><spanclass="o">=</span><spanclass="mi">20</span><spanclass="p">;</span><spanclass="cm">/*storeavalueintothelocalvariable*/</span><spanclass="n">printf</span><spanclass="p">(</span><spanclass="s">"</span><spanclass="se">\n</span><spanclass="s">Frommain():firstnum=%d"</span><spanclass="p">,</span><spanclass="n">firstnum</span><spanclass="p">);</span><spanclass="n">printf</span><spanclass="p">(</span><spanclass="s">"</span><spanclass="se">\n</span><spanclass="s">Frommain():secnum=%d</span><spanclass="se">\n</span><spanclass="s">"</span><spanclass="p">,</span><spanclass="n">secnum</span><spanclass="p">);</span><spanclass="n">valfun</span><spanclass="p">();</span><spanclass="cm">/*callthefunctionvalfun*/</span><spanclass="n">printf</span><spanclass="p">(</span><spanclass="s">"</span><spanclass="se">\n</span><spanclass="s">Frommain()again:firstnum=%d"</span><spanclass="p">,</span><spanclass="n">firstnum</span><spanclass="p">);</span><spanclass="n">printf</span><spanclass="p">(</span><spanclass="s">"</span><spanclass="se">\n</span><spanclass="s">Frommain()again:secnum=%d</span><spanclass="se">\n</span><spanclass="s">"</span><spanclass="p">,</span><spanclass="n">secnum</span><spanclass="p">);</span><spanclass="k">return</span><spanclass="mi">0</span><spanclass="p">;</span><spanclass="p">}</span><spanclass="kt">void</span><spanclass="nf">valfun</span><spanclass="p">()</span><spanclass="cm">/*novaluesarepassedtothisfunction*/</span><spanclass="p">{</span><spanclass="cm">/*secumisalocalvariablecreatedonthestackwhenvalfun()executes.Whenvalfun()exitsthestackisdeallocatedandthevariablenolongerexists.Itislocalanditsscopeisvalfun()*/</span><spanclass="kt">int</span><spanclass="n">secnum</span><spanclass="p">;</span><spanclass="cm">/*createasecondlocalvariablenamedsecnum*/</span><spanclass="n">secnum</span><spanclass="o">=</span><spanclass="mi">30</span><spanclass="p">;</span><spanclass="cm">/*thisonlyaffectsthislocalvariable'svalue*/</span><spanclass="n">printf</span><spanclass="p">(</span><spanclass="s">"</span><spanclass="se">\n</span><spanclass="s">Fromvalfun():firstnum=%d"</span><spanclass="p">,</span><spanclass="n">firstnum</span><spanclass="p">);</span><spanclass="n">printf</span><spanclass="p">(</span><spanclass="s">"</span><spanclass="se">\n</span><spanclass="s">Fromvalfun():secnum=%d</span><spanclass="se">\n</span><spanclass="s">"</span><spanclass="p">,</span><spanclass="n">secnum</span><spanclass="p">);</span><spanclass="n">firstnum</span><spanclass="o">=</span><spanclass="mi">40</span><spanclass="p">;</span><spanclass="cm">/*thischangesfirstnumforbothfunctions*/</span><spanclass="p">}</span></code></pre></div></div><p>Ifwerunthecodetheoutputisasfollows:</p><divclass="language-bashhighlighter-rouge"><divclass="highlight"><preclass="highlight"><code><spanclass="nv">$</span>mygcc<spanclass="nt">-o</span>scopescope.c<spanclass="nv">$</span>./scopeFrommain<spanclass="o">()</span>:firstnum<spanclass="o">=</span>10Frommain<spanclass="o">()</span>:secnum<spanclass="o">=</span>20Fromvalfun<spanclass="o">()</span>:firstnum<spanclass="o">=</span>10Fromvalfun<spanclass="o">()</span>:secnum<spanclass="o">=</span>30Frommain<spanclass="o">()</span>again:firstnum<spanclass="o">=</span>40Frommain<spanclass="o">()</span>again:secnum<spanclass="o">=</span>20</code></pre></div></div><p>Studytheoutput.Isitwhatyouexpected?</p><p>Thefirstthingtonoteaboutthesourcecodeisthatitdefinesaglobalvariable<codeclass="language-plaintexthighlighter-rouge">firstnum</code>that’sscopeisthecompletefileandthereforeisaccessiblefrom<codeclass="language-plaintexthighlighter-rouge">main()</code>andthe<codeclass="language-plaintexthighlighter-rouge">valfun()</code>.</p><p>Note<codeclass="language-plaintexthighlighter-rouge">scope.c</code>hasa<codeclass="language-plaintexthighlighter-rouge">main()</code>anda<codeclass="language-plaintexthighlighter-rouge">valfun()</code>function.The<em>prototype</em>for<codeclass="language-plaintexthighlighter-rouge">valfun()</code>isdeclaredatthetopofthefile,givingitglobalscopeinthefile<codeclass="language-plaintexthighlighter-rouge">scope.c</code>.(Wewilldiscussprototypesmorelater.)Both<codeclass="language-plaintexthighlighter-rouge">main()</code>and<codeclass="language-plaintexthighlighter-rouge">valfun()</code>updateandprintthevalueof<codeclass="language-plaintexthighlighter-rouge">firstnum</code>,whichrepresentsavariablewithamemoryaddress(spaceisnotallocatedonthestackasinthecaseofautovariablessuchas<codeclass="language-plaintexthighlighter-rouge">secnum</code>).Notethat<codeclass="language-plaintexthighlighter-rouge">main()</code>and<codeclass="language-plaintexthighlighter-rouge">valfun()</code>bothhavelocalvariablesnamed<codeclass="language-plaintexthighlighter-rouge">secnum</code>.Thisnamecollisionisnotaproblemandcausesnoclashbecauseofthescopeofthesetwodifferentlocalvariables(thathappentohavethesamename)onlyhavelocalscopeinsidethe<codeclass="language-plaintexthighlighter-rouge">main()</code>and<codeclass="language-plaintexthighlighter-rouge">valfun()</code>functions,respectively.Theirinstancesareprivateto<codeclass="language-plaintexthighlighter-rouge">main()</code>and<codeclass="language-plaintexthighlighter-rouge">valfun()</code>,respectively.Theyhavenoassociationotherthanhavingthesamenames.Theyareautovariablescreatedonthestackandnolongerexistwhenthefunctionexits.Forexample,<codeclass="language-plaintexthighlighter-rouge">valfun()</code>createsavariablefor<codeclass="language-plaintexthighlighter-rouge">secnum</code>ofintegertypeonitslocalstackwhenitexecutes,butwhenitreturnscontrolto<codeclass="language-plaintexthighlighter-rouge">main()</code>thestackisdeallocatedandthevariablenolongerexists.Incontrast,theglobalvariable<codeclass="language-plaintexthighlighter-rouge">firstnum</code>anditscurrentvaluearenotchangedwhen<codeclass="language-plaintexthighlighter-rouge">valfun()</code>exits.</p><h3id="examples-of-auto-and-static-local-variables">Examplesofautoandstaticlocalvariables</h3><p>Consideranotherstoragemodifierthatisimpactedbyscope:<codeclass="language-plaintexthighlighter-rouge">static</code>.Herethevariableisplacedinglobalstoragewithlimitedvisibilitydependingonwhereitisdefined.Let’slookattwocodesnippetsthatillustratetheuseoflocalautoandstaticvariables.TheserepresenttwoimportantcasesinC.</p><p>First,let’slookatthecaseofautolocalvariables.</p><p><strong>Example:<ahref="/engs50/Examples/auto.c">auto.c</a></strong></p><divclass="language-chighlighter-rouge"><divclass="highlight"><preclass="highlight"><code><spanclass="cm">/*File:auto.cDescription:IllustratestheautolocalvariablesCodetakenfrompg.336(Program7.2)(Bronson)"FirstBookonANSIC"*/</span><spanclass="cp">#include&lt;stdio.h&gt;</span><spanclass="kt">void</span><spanclass="nf">testauto</span><spanclass="p">();</span><spanclass="cm">/*functionprototype*/</span><spanclass="kt">int</span><spanclass="nf">main</span><spanclass="p">()</span><spanclass="p">{</span><spanclass="kt">int</span><spanclass="n">count</span><spanclass="p">;</span><spanclass="cm">/*createtheautovariablecount*/</span><spanclass="k">for</span><spanclass="p">(</span><spanclass="n">count</span><spanclass="o">=</span><spanclass="mi">1</span><spanclass="p">;</span><spanclass="n">count</span><spanclass="o">&lt;=</span><spanclass="mi">3</span><spanclass="p">;</span><spanclass="n">count</span><spanclass="o">++</span><spanclass="p">)</span><spanclass="n">testauto</span><spanclass="p">();</span><spanclass="k">return</span><spanclass="mi">0</span><spanclass="p">;</span><spanclass="p">}</span><spanclass="kt">void</span><spanclass="nf">testauto</span><spanclass="p">()</span><spanclass="p">{</span><spanclass="kt">int</span><spanclass="n">num</span><spanclass="o">=</span><spanclass="mi">0</span><spanclass="p">;</span><spanclass="cm">/*createtheautovariablenum*/</span><spanclass="cm">/*andinitializetozero*/</span><spanclass="n">printf</span><spanclass="p">(</span><spanclass="s">"Thevalueoftheautomaticvariablenumis%d</span><spanclass="se">\n</span><spanclass="s">"</span><spanclass="p">,</span><spanclass="n">num</span><spanclass="p">);</span><spanclass="n">num</span><spanclass="o">++</span><spanclass="p">;</span><spanclass="p">}</span></code></pre></div></div><p>Ifwerunthecodetheoutputisasfollows:</p><divclass="language-bashhighlighter-rouge"><divclass="highlight"><preclass="highlight"><code><spanclass="nv">$</span>./autoThevalueoftheautomaticvariablenumis0Thevalueoftheautomaticvariablenumis0Thevalueoftheautomaticvariablenumis0</code></pre></div></div><p>Studytheoutput.Isitwhatyouexpected?</p><p>Nowlet’slookatthecasewhen<codeclass="language-plaintexthighlighter-rouge">num</code>isdefinedas<codeclass="language-plaintexthighlighter-rouge">static</code>insidethescopeofthefunction<codeclass="language-plaintexthighlighter-rouge">teststat()</code>.Note,thatthevalueof<codeclass="language-plaintexthighlighter-rouge">num</code>isnowpersistentacrossmultipleinvocationsofthefunction.Thisisindirectcontrasttotheautolocalvarableofthelastcodesnippet-i.e.,<codeclass="language-plaintexthighlighter-rouge">auto.c</code>.Inessence,theoperator<codeclass="language-plaintexthighlighter-rouge">static</code>allocatesmemorytothevariableoftype<codeclass="language-plaintexthighlighter-rouge">int</code>thatisoutsidethestackjustlikeaglobalvariablein<codeclass="language-plaintexthighlighter-rouge">scope.c</code>-i.e.,<codeclass="language-plaintexthighlighter-rouge">firstnum</code>.However,thedistinctionhereisthat<codeclass="language-plaintexthighlighter-rouge">static</code>isnotglobal.Itisonlyaccessibleinthefunction<codeclass="language-plaintexthighlighter-rouge">teststat()</code>.Wehopethatclarifiestheissueofscope,localandglobalvariablesandtheissueofautovariablesandstaticvariables.</p><p>First,let’slookatthecaseofstaticlocalvariables.</p><p><strong>Example<ahref="/engs50/Examples/static.c">static.c</a></strong></p><divclass="language-chighlighter-rouge"><divclass="highlight"><preclass="highlight"><code><spanclass="cm">/*File:static.cDescription:Illustratestheuseofautovariables,with`static`.Revisedcodetakenfrompg.336(Program7.2)(Bronson)"FirstBookonANSIC"*/</span><spanclass="cp">#include&lt;stdio.h&gt;</span><spanclass="kt">void</span><spanclass="nf">teststat</span><spanclass="p">();</span><spanclass="cm">/*functionprototype*/</span><spanclass="kt">int</span><spanclass="nf">main</span><spanclass="p">()</span><spanclass="p">{</span><spanclass="kt">int</span><spanclass="n">count</span><spanclass="p">;</span><spanclass="cm">/*countisalocalautovariable*/</span><spanclass="k">for</span><spanclass="p">(</span><spanclass="n">count</span><spanclass="o">=</span><spanclass="mi">1</span><spanclass="p">;</span><spanclass="n">count</span><spanclass="o">&lt;=</span><spanclass="mi">3</span><spanclass="p">;</span><spanclass="n">count</span><spanclass="o">++</span><spanclass="p">)</span><spanclass="n">teststat</span><spanclass="p">();</span><spanclass="k">return</span><spanclass="mi">0</span><spanclass="p">;</span><spanclass="p">}</span><spanclass="cm">/*Note,thatthevaruablenuminteststat()isonlysettozeroonce.Thevaluesetbythelocalscopestaticvariablenumdetainsitsvaluewhenteststat()returns.*/</span><spanclass="kt">void</span><spanclass="nf">teststat</span><spanclass="p">()</span><spanclass="p">{</span><spanclass="k">static</span><spanclass="kt">int</span><spanclass="n">num</span><spanclass="o">=</span><spanclass="mi">0</span><spanclass="p">;</span><spanclass="cm">/*numisalocalstaticvariable*/</span><spanclass="n">printf</span><spanclass="p">(</span><spanclass="s">"Thevalueofthestaticvariablenumisnow%d</span><spanclass="se">\n</span><spanclass="s">"</span><spanclass="p">,</span><spanclass="n">num</span><spanclass="p">);</span><spanclass="n">num</span><spanclass="o">++</span><spanclass="p">;</span><spanclass="p">}</span></code></pre></div></div><p>Ifwerunthecodetheoutputisasfollows:</p><divclass="language-bashhighlighter-rouge"><divclass="highlight"><preclass="highlight"><code><spanclass="nv">$</span>./staticThevalueofthestaticvariablenumisnow0Thevalueofthestaticvariablenumisnow1Thevalueofthestaticvariablenumisnow2</code></pre></div></div><p>Isthiswhatyouexpected?</p><p>Question:IfIhavedefined<codeclass="language-plaintexthighlighter-rouge">staticintnum;</code>atthetopof<codeclass="language-plaintexthighlighter-rouge">static.c</code>howwouldthatchangethescopeofthestaticvariable?Isitdifferentto<codeclass="language-plaintexthighlighter-rouge">intnum</code>;asdefinedasglobalvariable(like<codeclass="language-plaintexthighlighter-rouge">firstnum</code>in<codeclass="language-plaintexthighlighter-rouge">scope</code>.c)?</p><h3id="flow-of-control-in-a-c-program">FlowofcontrolinaCprogram</h3><p>ControlflowwithinCprogramsisalmostidenticaltotheequivalentconstructsinJava.However,Cprovidesnoexceptionmechanism,andsoChasno<codeclass="language-plaintexthighlighter-rouge">try</code>,<codeclass="language-plaintexthighlighter-rouge">catch</code>,and<codeclass="language-plaintexthighlighter-rouge">finally</code>,constructs.</p><p>Conditionalexecution</p><divclass="language-chighlighter-rouge"><divclass="highlight"><preclass="highlight"><code><spanclass="k">if</span><spanclass="p">(</span><spanclass="n">expression</span><spanclass="p">)</span><spanclass="n">statement1</span><spanclass="p">;</span><spanclass="k">if</span><spanclass="p">(</span><spanclass="n">expression</span><spanclass="p">)</span><spanclass="p">{</span><spanclass="n">statement1</span><spanclass="p">;</span><spanclass="n">statement2</span><spanclass="p">;</span><spanclass="p">......</span><spanclass="p">}</span><spanclass="k">if</span><spanclass="p">(</span><spanclass="n">expression</span><spanclass="p">)</span><spanclass="n">statement</span><spanclass="p">;</span><spanclass="k">else</span><spanclass="n">statement</span><spanclass="p">;</span></code></pre></div></div><p>Ofsignificance,andaverycommoncauseoferrorsinCprograms,isthatC(beforeC99)hasnoBooleandatatype.Instead,anyexpressionthatevaluatestotheintegervalueof0isconsideredfalse,andanynonzerovalueastrue(theoppositeofbash!).Aconditionalstatement’scontrollingexpressionisevaluatedandifnon-zero(i.e.,true)thefollowingstatementisexecuted.Mosterrorsareintroducedwhenprogrammers(accidentally)useembeddedassignmentstatementsinconditionalexpressions:</p><divclass="language-chighlighter-rouge"><divclass="highlight"><preclass="highlight"><code><spanclass="k">if</span><spanclass="p">(</span><spanclass="n">loop_index</span><spanclass="o">=</span><spanclass="n">MAXINDEX</span><spanclass="p">)</span><spanclass="n">statement</span><spanclass="p">;</span><spanclass="cm">/*insteadof...*/</span><spanclass="k">if</span><spanclass="p">(</span><spanclass="n">loop_index</span><spanclass="o">==</span><spanclass="n">MAXINDEX</span><spanclass="p">)</span><spanclass="n">statement</span><spanclass="p">;</span></code></pre></div></div><p>Agoodhabittogetintoistoplaceconstantsontheleftof(potential)assignments:</p><divclass="language-chighlighter-rouge"><divclass="highlight"><preclass="highlight"><code><spanclass="k">if</span><spanclass="p">(</span><spanclass="mi">0</span><spanclass="o">=</span><spanclass="n">value</span><spanclass="p">)</span><spanclass="n">statement</span><spanclass="p">;</span></code></pre></div></div><p>Whencompilingwith<codeclass="language-plaintexthighlighter-rouge">gcc-std=c11-Wall-pedantic</code>thecompilerwillcomplainabouttheuseofassignmentoperatorsinside<codeclass="language-plaintexthighlighter-rouge">if</code>conditions…theonlywayto‘shutupthecompiler’istouseextraparentheses:</p><divclass="language-chighlighter-rouge"><divclass="highlight"><preclass="highlight"><code><spanclass="k">if</span><spanclass="p">(</span><spanclass="p">(</span><spanclass="n">loop_index</span><spanclass="o">=</span><spanclass="n">MAXINDEX</span><spanclass="p">)</span><spanclass="p">)</span><spanclass="n">statement</span><spanclass="p">;</span></code></pre></div></div><p>C’sothercontrolflowstatementsareveryunsurprising:</p><divclass="language-chighlighter-rouge"><divclass="highlight"><preclass="highlight"><code><spanclass="k">while</span><spanclass="p">(</span><spanclass="n">conditional</span><spanclass="o">-</span><spanclass="n">expression</span><spanclass="p">)</span><spanclass="p">{</span><spanclass="n">statement1</span><spanclass="p">;</span><spanclass="n">statement2</span><spanclass="p">;</span><spanclass="p">......</span><spanclass="p">}</span><spanclass="k">do</span><spanclass="p">{</span><spanclass="n">statement1</span><spanclass="p">;</span><spanclass="n">statement2</span><spanclass="p">;</span><spanclass="p">......</span><spanclass="p">}</span><spanclass="k">while</span><spanclass="p">(</span><spanclass="n">conditional</span><spanclass="o">-</span><spanclass="n">expression</span><spanclass="p">);</span><spanclass="k">for</span><spanclass="p">(</span><spanclass="n">initialization</span><spanclass="p">;</span><spanclass="n">conditional</span><spanclass="o">-</span><spanclass="n">expression</span><spanclass="p">;</span><spanclass="n">adjustment</span><spanclass="p">)</span><spanclass="p">{</span><spanclass="n">statement1</span><spanclass="p">;</span><spanclass="n">statement2</span><spanclass="p">;</span><spanclass="p">......</span><spanclass="p">}</span></code></pre></div></div><p>Examplesofcodesnippets:</p><divclass="language-chighlighter-rouge"><divclass="highlight"><preclass="highlight"><code><spanclass="cm">/*Loops:usingtheforstatement*/</span><spanclass="cp">#defineARRAY_LENGTH100</span><spanclass="kt">long</span><spanclass="n">array</span><spanclass="p">[</span><spanclass="n">ARRAY_LENGTH</span><spanclass="p">];</span><spanclass="kt">int</span><spanclass="n">i</span><spanclass="p">;</span><spanclass="k">for</span><spanclass="p">(</span><spanclass="n">i</span><spanclass="o">=</span><spanclass="mi">0</span><spanclass="p">;</span><spanclass="n">i</span><spanclass="o">&lt;</span><spanclass="n">ARRAY_LENGTH</span><spanclass="p">;</span><spanclass="n">i</span><spanclass="o">++</span><spanclass="p">)</span><spanclass="p">{</span><spanclass="n">array</span><spanclass="p">[</span><spanclass="n">i</span><spanclass="p">]</span><spanclass="o">=</span><spanclass="mi">4</span><spanclass="o">*</span><spanclass="n">i</span><spanclass="p">;</span><spanclass="n">printf</span><spanclass="p">(</span><spanclass="err">'</span><spanclass="n">Value</span><spanclass="n">of</span><spanclass="n">i</span><spanclass="n">is</span><spanclass="o">%</span><spanclass="n">d</span><spanclass="err">\</span><spanclass="n">n</span><spanclass="s">",i);</span><spanclass="err"></span><spanclass="s">}</span><spanclass="err"></span></code></pre></div></div><p>Anyofthecomponentsofthe<codeclass="language-plaintexthighlighter-rouge">for</code>statement’s<em>for-expressions</em>maybemissing,Iftheconditional-expressionismissing,itisalwaystrue.InfiniteloopsmayberequestedinCwith<codeclass="language-plaintexthighlighter-rouge">for(;;)</code>…orwith<codeclass="language-plaintexthighlighter-rouge">while(1)</code>…</p><h3id="the-equivalence-of-for-and-while">Theequivalenceofforandwhile</h3><divclass="language-chighlighter-rouge"><divclass="highlight"><preclass="highlight"><code><spanclass="k">for</span><spanclass="p">(</span><spanclass="n">expression1</span><spanclass="p">;</span><spanclass="n">expression2</span><spanclass="p">;</span><spanclass="n">expression3</span><spanclass="p">)</span><spanclass="p">{</span><spanclass="n">statement1</span><spanclass="p">;</span><spanclass="p">}</span><spanclass="n">expression1</span><spanclass="p">;</span><spanclass="k">while</span><spanclass="p">(</span><spanclass="n">expression2</span><spanclass="p">)</span><spanclass="p">{</span><spanclass="n">statement1</span><spanclass="p">;</span><spanclass="n">expression3</span><spanclass="p">;</span><spanclass="p">}</span></code></pre></div></div><p>Exampleofequivalenceusingthe<codeclass="language-plaintexthighlighter-rouge">while</code>statement</p><divclass="language-chighlighter-rouge"><divclass="highlight"><preclass="highlight"><code><spanclass="n">i</span><spanclass="o">=</span><spanclass="mi">0</span><spanclass="p">;</span><spanclass="k">while</span><spanclass="p">(</span><spanclass="n">i</span><spanclass="o">&lt;</span><spanclass="n">ARRAY_LENGTH</span><spanclass="p">)</span><spanclass="p">{</span><spanclass="n">array</span><spanclass="p">[</span><spanclass="n">i</span><spanclass="p">]</span><spanclass="o">=</span><spanclass="mi">4</span><spanclass="o">*</span><spanclass="n">i</span><spanclass="p">;</span><spanclass="n">printf</span><spanclass="p">(</span><spanclass="err">'</span><spanclass="n">Value</span><spanclass="n">of</span><spanclass="n">i</span><spanclass="n">is</span><spanclass="o">%</span><spanclass="n">d</span><spanclass="err">\</span><spanclass="n">n</span><spanclass="s">",i);</span><spanclass="err"></span><spanclass="s">i++;</span><spanclass="err"></span><spanclass="s">}</span><spanclass="err"></span></code></pre></div></div><h3id="the-switch-statement">Theswitchstatement</h3><divclass="language-chighlighter-rouge"><divclass="highlight"><preclass="highlight"><code><spanclass="k">switch</span><spanclass="p">(</span><spanclass="n">expression</span><spanclass="p">)</span><spanclass="p">{</span><spanclass="k">case</span><spanclass="n">const1</span><spanclass="p">:</span><spanclass="n">statement1</span><spanclass="p">;</span><spanclass="k">break</span><spanclass="p">;</span><spanclass="k">case</span><spanclass="n">const2</span><spanclass="p">:</span><spanclass="n">statement2</span><spanclass="p">;</span><spanclass="k">break</span><spanclass="p">;</span><spanclass="k">case</span><spanclass="n">const3</span><spanclass="p">:</span><spanclass="k">case</span><spanclass="n">const4</span><spanclass="p">:</span><spanclass="n">statement4</span><spanclass="p">;</span><spanclass="k">default</span><spanclass="o">:</span><spanclass="n">statementN</span><spanclass="p">;</span><spanclass="k">break</span><spanclass="p">;</span><spanclass="p">}</span></code></pre></div></div><p>OneofthefewdifferencesherebetweenCandJavaisthatCpermitscontrolto“dropdown”tofollowingcaseconstructs,unlessthereisanexplicit<codeclass="language-plaintexthighlighter-rouge">break</code>statement.</p><p><strong>Example<ahref="/engs50/Examples/operator.c">operator.c</a></strong></p><divclass="language-chighlighter-rouge"><divclass="highlight"><preclass="highlight"><code><spanclass="cm">/*File:operator.cDescription:Implementsbasicoperations(multiplication,division,addition,modulos.Revisedversionofcodepg.191(Program4.6)(Bronson)"FirstBookonANSIC"*/</span><spanclass="cp">#include&lt;stdio.h&gt;</span><spanclass="kt">int</span><spanclass="nf">main</span><spanclass="p">()</span><spanclass="p">{</span><spanclass="kt">int</span><spanclass="n">opselect</span><spanclass="p">;</span><spanclass="kt">float</span><spanclass="n">fnum</span><spanclass="p">,</span><spanclass="n">snum</span><spanclass="p">;</span><spanclass="n">printf</span><spanclass="p">(</span><spanclass="s">"Pleasetypeintwonumbers:"</span><spanclass="p">);</span><spanclass="n">scanf</span><spanclass="p">(</span><spanclass="s">"%f%f"</span><spanclass="p">,</span><spanclass="o">&amp;</span><spanclass="n">fnum</span><spanclass="p">,</span><spanclass="o">&amp;</span><spanclass="n">snum</span><spanclass="p">);</span><spanclass="n">printf</span><spanclass="p">(</span><spanclass="s">"Enteraselectcode:"</span><spanclass="p">);</span><spanclass="n">printf</span><spanclass="p">(</span><spanclass="s">"</span><spanclass="se">\n</span><spanclass="s">1foraddition"</span><spanclass="p">);</span><spanclass="n">printf</span><spanclass="p">(</span><spanclass="s">"</span><spanclass="se">\n</span><spanclass="s">2formultiplication"</span><spanclass="p">);</span><spanclass="n">printf</span><spanclass="p">(</span><spanclass="s">"</span><spanclass="se">\n</span><spanclass="s">3fordivision:"</span><spanclass="p">);</span><spanclass="n">printf</span><spanclass="p">(</span><spanclass="s">"</span><spanclass="se">\n</span><spanclass="s">4formodulus:"</span><spanclass="p">);</span><spanclass="n">scanf</span><spanclass="p">(</span><spanclass="s">"%d"</span><spanclass="p">,</span><spanclass="o">&amp;</span><spanclass="n">opselect</span><spanclass="p">);</span><spanclass="c1">//Thislinebelowasanintentionalbug.Itiscommentedout.</span><spanclass="c1">//itcausesasegmentationfault(segfaultforshort)</span><spanclass="c1">//scanf("%d",opselect);</span><spanclass="k">switch</span><spanclass="p">(</span><spanclass="n">opselect</span><spanclass="p">)</span><spanclass="p">{</span><spanclass="k">case</span><spanclass="mi">1</span><spanclass="p">:</span><spanclass="n">printf</span><spanclass="p">(</span><spanclass="s">"Thesumofthenumbersenteredis%6.3f</span><spanclass="se">\n</span><spanclass="s">"</span><spanclass="p">,</span><spanclass="n">fnum</span><spanclass="o">+</span><spanclass="n">snum</span><spanclass="p">);</span><spanclass="k">break</span><spanclass="p">;</span><spanclass="k">case</span><spanclass="mi">2</span><spanclass="p">:</span><spanclass="n">printf</span><spanclass="p">(</span><spanclass="s">"Theproductofthenumbersenteredis%6.3f</span><spanclass="se">\n</span><spanclass="s">"</span><spanclass="p">,</span><spanclass="n">fnum</span><spanclass="o">*</span><spanclass="n">snum</span><spanclass="p">);</span><spanclass="k">break</span><spanclass="p">;</span><spanclass="k">case</span><spanclass="mi">3</span><spanclass="p">:</span><spanclass="k">if</span><spanclass="p">(</span><spanclass="n">snum</span><spanclass="o">!=</span><spanclass="mi">0</span><spanclass="p">.</span><spanclass="mi">0</span><spanclass="p">)</span><spanclass="n">printf</span><spanclass="p">(</span><spanclass="s">"Thefirstnumberdividedbythesecondis%6.3f</span><spanclass="se">\n</span><spanclass="s">"</span><spanclass="p">,</span><spanclass="n">fnum</span><spanclass="o">/</span><spanclass="n">snum</span><spanclass="p">);</span><spanclass="k">else</span><spanclass="n">printf</span><spanclass="p">(</span><spanclass="s">"Divisionbyzeroisnotallowed</span><spanclass="se">\n</span><spanclass="s">"</span><spanclass="p">);</span><spanclass="k">break</span><spanclass="p">;</span><spanclass="k">case</span><spanclass="mi">4</span><spanclass="p">:</span><spanclass="n">printf</span><spanclass="p">(</span><spanclass="s">"Themodulusofthenumbersenteredis%d</span><spanclass="se">\n</span><spanclass="s">"</span><spanclass="p">,</span><spanclass="p">(</span><spanclass="kt">int</span><spanclass="p">)</span><spanclass="n">fnum</span><spanclass="o">%</span><spanclass="p">(</span><spanclass="kt">int</span><spanclass="p">)</span><spanclass="n">snum</span><spanclass="p">);</span><spanclass="k">break</span><spanclass="p">;</span><spanclass="nl">default:</span><spanclass="n">printf</span><spanclass="p">(</span><spanclass="s">"Needtoenteranumberbetween1-4</span><spanclass="se">\n\n</span><spanclass="s">"</span><spanclass="p">);</span><spanclass="p">}</span><spanclass="k">return</span><spanclass="mi">0</span><spanclass="p">;</span><spanclass="p">}</span></code></pre></div></div><h3id="the-break-statement">Thebreakstatement</h3><divclass="language-chighlighter-rouge"><divclass="highlight"><preclass="highlight"><code><spanclass="k">for</span><spanclass="p">(</span><spanclass="n">expression1</span><spanclass="p">;</span><spanclass="n">expression2</span><spanclass="p">;</span><spanclass="n">expression3</span><spanclass="p">)</span><spanclass="p">{</span><spanclass="n">statement1</span><spanclass="p">;</span><spanclass="k">if</span><spanclass="p">(</span><spanclass="p">...</span><spanclass="p">)</span><spanclass="k">break</span><spanclass="p">;</span><spanclass="n">statementN</span><spanclass="p">;</span><spanclass="p">}</span><spanclass="k">while</span><spanclass="p">(</span><spanclass="n">expression1</span><spanclass="p">)</span><spanclass="p">{</span><spanclass="n">statement1</span><spanclass="p">;</span><spanclass="k">if</span><spanclass="p">(</span><spanclass="p">...</span><spanclass="p">)</span><spanclass="k">break</span><spanclass="p">;</span><spanclass="n">statementN</span><spanclass="p">;</span><spanclass="p">}</span><spanclass="k">switch</span><spanclass="p">(</span><spanclass="n">expression1</span><spanclass="p">)</span><spanclass="p">{</span><spanclass="k">case</span><spanclass="n">const1</span><spanclass="p">:</span><spanclass="n">statement</span><spanclass="mi">1</span><spanclass="p">;</span><spanclass="k">break</span><spanclass="p">;</span><spanclass="k">case</span><spanclass="n">const2</span><spanclass="p">:</span><spanclass="n">statement</span><spanclass="mi">2</span><spanclass="p">;</span><spanclass="k">break</span><spanclass="p">;</span><spanclass="k">case</span><spanclass="n">const3</span><spanclass="p">:</span><spanclass="n">statement</span><spanclass="mi">3</span><spanclass="p">;</span><spanclass="k">break</span><spanclass="p">;</span><spanclass="nl">default:</span><spanclass="n">statement</span><spanclass="n">n</span><spanclass="p">;</span><spanclass="k">break</span><spanclass="p">;</span><spanclass="p">}</span></code></pre></div></div><h3id="the-continue-statement">Thecontinuestatement</h3><divclass="language-chighlighter-rouge"><divclass="highlight"><preclass="highlight"><code><spanclass="k">for</span><spanclass="p">(</span><spanclass="n">expression1</span><spanclass="p">;</span><spanclass="n">expression2</span><spanclass="p">;</span><spanclass="n">expression3</span><spanclass="p">)</span><spanclass="p">{</span><spanclass="n">statement1</span><spanclass="p">;</span><spanclass="k">if</span><spanclass="p">(</span><spanclass="p">...</span><spanclass="p">)</span><spanclass="k">continue</span><spanclass="p">;</span><spanclass="n">statementN</span><spanclass="p">;</span><spanclass="p">}</span><spanclass="k">while</span><spanclass="p">(</span><spanclass="n">expression1</span><spanclass="p">)</span><spanclass="p">{</span><spanclass="n">statement1</span><spanclass="p">;</span><spanclass="k">if</span><spanclass="p">(</span><spanclass="p">...</span><spanclass="p">)</span><spanclass="k">continue</span><spanclass="p">;</span><spanclass="n">statementN</span><spanclass="p">;</span><spanclass="p">}</span></code></pre></div></div></div></article></div></div><footerclass="site-footer"><divclass="wrapper"><h2class="footer-heading">Engs50(CS50)--DartmouthCollege</h2><p><fontsize=-1>ThisversionofthecourseisbaseduponthosedesignedbyProfessorsPalmer,Kotz,Zhou,Campbell,andBalkcom.Iamdeeplyindebtedtotheseoutstandingeducators.--<ahref="https://engineering.dartmouth.edu/people/faculty/stephen-taylor/">StephenTaylor</a></font></p><p><small>Thispagewaslastupdatedon<strong>2023-01-05</strong>at<strong>11:31</strong>.</small></p></div></footer></body></html>
