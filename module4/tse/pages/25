https://thayer.github.io/engs50/Notes/debug/
2
56330
<!DOCTYPEhtml><html><head><metacharset="utf-8"><metahttp-equiv="X-UA-Compatible"content="IE=edge"><metaname="viewport"content="width=device-width,initial-scale=1"><title>DebuggingwithGDBandValgrind</title><metaname="description"content="InEngs50youwilllearnhowtodesign&buildlarge,reliable,maintainable,andunderstandablesoftwaresystems.IntheprocessyouwilllearntoprograminCwithUnixdevelopmenttools."><linkrel="shortcuticon"href="/engs50/50.png"/><linkrel="stylesheet"href="/engs50/css/main.css"><linkrel="canonical"href="/engs50/Notes/debug/"></head><body><headerclass="site-header"><aclass="site-title"href="/engs50/"><imgwidth=48align=centersrc="/engs50/50.png"alt="icon">Engs50(CS50)</a><navclass="site-nav">[<ahref="/engs50/Labs/">Labs</a>][<ahref="/engs50/Notes/">Notes</a>][<ahref="/engs50/Reading/">Reading</a>][<ahref="/engs50/Resources/">Resources</a>][<ahref="/engs50/Examples/">Examples</a>]</nav></header><divclass="page-content"><divclass="wrapper"><articleclass="post"><headerclass="post-header"><h1class="post-title">DebuggingwithGDBandValgrind</h1></header><divclass="post-content"><h3id="goals">Goals</h3><ul><li>howtouseGDBtodebugcode.</li><li>howtousevalgrindtotrackdownandfixmemory-relatedissues.</li></ul><p>Foralookatacodeperformanceprofilingtoolcalled<codeclass="language-plaintexthighlighter-rouge">grpof</code>,seethe<ahref="extra/">lectureextra</a>.</p><p>Therearesomegreatreferencematerialsfor<codeclass="language-plaintexthighlighter-rouge">gdb</code>atthebeginningofthesection“TheGNUDebugger(GDB)”below.</p><p>Toreviewthecodediscussedinclasstoday,see<ahref="/engs50/Examples/password.c">password.c</a>,<ahref="/engs50/Examples/names9.c">names9.c</a>,andthefamiliarreadlinepcodefromtheexamplesaswell.</p><!--Youcanviewtoday'sTerminal[script](/engs50/Notes/debug/script.txt).--><h2id="introduction-to-debugging">Introductiontodebugging</h2><blockquote><p>“Debuggingistwiceashardaswritingthecodeinthefirstplace.Therefore,ifyouwritethecodeascleverlyaspossible,youare,bydefinition,notsmartenoughtodebugit.”-BrianKernighan</p></blockquote><p>Aswehavestartedtoturnourattentiontowardswritinglarger,morecomplexCprogramswehavetriedtostresstheimportanceofdebuggingincorrectorsuspiciousbehaviorinprogramsaswellasdocumentingindetailhowthoseprogramshavebeentested.Thegoalinmakingdebuggingandtestingapriorityisbuildingprogramsinsuchawaythatweareconfidentthattheyarerobustandcorrect.</p><p>Alas,despiteourgreatintentionstocomposequalitysoftware,bugsstillfindtheirwayintoourcode.Bugsaresuchaninevitablityinfactthatmanypeoplehavetriedtoestimatethenumberofbugspersomenumberoflinesofcode(LoC).Somepeoplebelievetheunderlyingtakeawayisthatourcodeshouldbeasconcise/complexasneededsothatwecanhavefewerlinesofcode.Inthisclass,however,wetakethestancethateveryoneshouldwriteclearcodeandshouldavoidtheuseofoverlycomplexcodebecausethiscanresultincodethatis<em>extremely</em>difficulttodebugwhenthoseinevitablebugscropup.ThewordsofBrianKernighan(above)ringloudandclearonthistopic.</p><p>InthislecturewewilltakealookatacoupleofpopulartoolsthatareusedfordebuggingCprograms.Inalaterlecturewewillfocusmoreonvariousapproachestotesting.</p><p>Feelfreetoskipthesenotesifyouwriteperfect,bugfreecode;-)</p><h2id="techniques-for-limiting-those-pesky-bugs">Techniquesforlimitingthosepeskybugs</h2><blockquote><p>“Don’tPanic”–Hitchiker’sGuidetotheGalaxy</p></blockquote><p>Thetroublewithbugsisthatnotwoarethesame.Bugscanbesimple:badpointersandarraysubscripterrors;whileothersaresometimedifficulttodebug:thesystemsmightrunfordaysandthenfailbecauseofaslowmemoryleakornumericoverflowproblem.</p><p>Programmersaimtounderstandthenatureofthebugtheyaretryingtoswat:<em>isitreproducible?</em>(doesitalwaysfailunderthesamesetofconditions),<em>doesitalwaysmanifestitselfinthesameway?</em>,andsoon.Somebugsareparticularlyhardtofind,likea<ahref="https://en.wikipedia.org/wiki/Heisenbug">Heisenbug</a>which</p><blockquote><p>seemstodisappearoralteritsbehaviorwhenoneattemptstostudyit.AnexampleofaHeisenbugisonethatisrelatedtothecurrentmixofprocessesrunningatthesametimeastheprogrambeingstudied.</p></blockquote><p>Thesearecluesthathelptrackdownthosepeskybugsincomplexsystems.TosomedegreebeingagooddebuggerofCcodecomeswithexperience.</p><p>Bynowyouareusedtosegfaultsandseeingfilessuchascoredumpsinyourdirectorywhenyourunyourprogramandsomethinggoeswrong(unlessyourarewriting/compiling/runningprogramsontheCSmachines—therearedetailsneartheendofthislectureaboutaccessinganddebuggingcorefilesontheCSmachines).YoumayhaveheardothersmentiontoolslikethetheGNUdebugger(<codeclass="language-plaintexthighlighter-rouge">gdb</code>)andValgrind(<codeclass="language-plaintexthighlighter-rouge">valgrind</code>)—orevenhavesomeexperienceusingthesetoolsyourself—whichcanbeaninvaluableaidinsolvingproblems.Throughasetofexampleswewillshowhowtodebugproblemsinasystematicmanner.Butfirstlet’sdiscusswhybugsoccurandwhattechnquesotherthanrunning<codeclass="language-plaintexthighlighter-rouge">gdb</code>help.</p><p>Thecomplexityofaprogramisrelatedtothenumberofinteractingcomponents;forexample,thecrawlerinteractswiththeexternal<codeclass="language-plaintexthighlighter-rouge">libcurl</code>library.Thereisalineofthoughtthatsaysasaruleofthumbthenumberofbugsgrowswiththenumberofinteractions.Reducingthecomplexityandinteractionsenablesustofocusinonthelocationofbugsincode.GordonBellsummeditupthisway:</p><blockquote><p>“Thecheapest,fastest,andmostreliablecomponentsofacomputersystemaretheonesthataren’tthere.”–<ahref="http://research.microsoft.com/en-us/um/people/gbell/">GordonBell</a></p></blockquote><p>Gordon’spointisthattheimportanceofasimpledesigncannotbeoveremphasized.</p><p>Debuggingproblemsrangesfromeasy,moderate,orevenallthewaythroughdownrightsuperhard.Techniquesthathelpreducedeguggingtimeinclude:</p><ul><li><strong>agooddesignanddesignmethodology;</strong></li><li><strong>consistentstyle(e.g.,useCprogramidiomsasmuchaspossible);</strong></li><li><strong>boundaryconditiontests;</strong></li><li><strong>assertionsandsanitytesting;</strong></li><li><strong>defensiveprogramming;</strong></li><li><strong>designingfortesting;</strong></li><li><strong>avoidfilesthathavealargenumberoffunctions,andfunctionsthathavealargenumberoflines;Aimforfunctionsthatdoonething,anddoitwell!</strong></li><li><strong>limitglobaldatawheneverpossible;and</strong></li><li><strong>leveragedeskcheckingtools.</strong></li></ul><p>Whilewe’vealreadydiscussedsomeofthesetopicsinthiscourse,wewilldiscussmoreoftheminthislectureandinfuturelectures.</p><h2id="approaches-to-debugging">Approachestodebugging</h2><blockquote><p>Insanity:doingthesamethingoverandoveragainandexpectingdifferentresults.<br/>–Unknown</p></blockquote><p>Whentrackingdownpeskybugswecanthinkofthefollowingstepstofindingandcorrectingthem—asortof“buglifecycle”:</p><ul><li><strong>Testing:</strong>Findingoutwhatbugsexist.Wehavealreadydesignedsomesimpletestsforprogramswe’vewritteninthisclassalready.Inafuturelecturewewilllookatmoreapproachestotesting.</li><li><strong>Stabilization:</strong>Tryandmakethebugsreproducible(identifytheconditionsthatcauseaparticularbugeverytime).</li><li><strong>Localization:</strong>Identifythefunction/lineofthecoderesponsible.Ifitrepeatedanywhere,then<em>refactor</em>thecode.<ul><li>“Refactor”meanscleanitup,reorganizeit,improvereadability/testability,etc.,allwithoutchangingthecode’sbehavior.</li><li>Besuretorununittestsbeforeandafterrefactoringtoensureyou“didnoharm.”</li></ul></li><li><strong>Correction:</strong>Fixthecode!</li><li><strong>Verification:</strong>Testthecodefixandconfirmitworks.Thenimagineotherboundary-caseexamplesthatarerelatedtotheonethatcausedthisbugtooccurandtestthosewhileyou’rehere.</li></ul><p>Eveninlightoftheabovementionedstepstofindingandcorrectingbugs,therearemanywaysthatpeopleapproachdebuggingtheirprogramswhenissuesarise…</p><ul><li>Theydon’t.</li><li>Theysiftthroughwarning/errormessages;onceallofthemessagesaregone,theyassumetheirprogramiscorrect.</li><li>Theyuse<codeclass="language-plaintexthighlighter-rouge">printf</code>-styledebugging(i.e.,use<codeclass="language-plaintexthighlighter-rouge">printf</code>statementsstrategicallyplacedthroughoutcodetohelpwithinspectionofvariablesandcontrolflow).</li><li>Theyuseaspecializeddebuggingtools/programs(e.g.,pluginsintegratedintoyourfavoriteIDE,commandlinetoolslike<codeclass="language-plaintexthighlighter-rouge">gdb</code>and<codeclass="language-plaintexthighlighter-rouge">valgrind</code>).</li></ul><p>Wehopeitisclearthat<em>not</em>debuggingisabadidea.Eliminatingallofthewarningsanderrorsisagoodidea(andindeedisrequiredwhensubmittingassignmentsincs50:)butwithoutpropertestingthereisnoguaranteethatyourprogramiscorrectdoeswhatyouthinkitshoulddo.Inthefollowingsectionswewilldiscusssomeoftheotherapproachestodebugging.</p><h3id="code-inspection">CodeInspection</h3><p>Manytimespeoplerushand“hack”thedebugphaseandsitattheterminalhopingtoeventuallytrackdownthatbugviatrialanderror.Mostpeopledothisastheirfirstresort.Youwillfindthisapproachcanbesuccessfulbutitcanbeverytimeconsuming-putmoreplainly,itwilltakelongerthanothertechniques.</p><p><strong><em>Oneofthemosteffectivedebugtoolsisyou!</em></strong>Stopandreadyourcode.Pretendyouareacomputerandexecutethecodewithapenandpaper.Asyoureadyourcode,keepsomeofthefollowingtipsinmind:</p><ul><li>Drawdiagrams!Especiallyfordatastructures.</li><li>Regardingfor/whileloops,andrecursion,thinkaboutthebasecase,andtheboundaryconditions,andworkinductivelytowardthegeneralcase.Errorsmostoftenoccuratthebasecaseorattheboundarycases.</li></ul><p>Codeinspectionisveryuseful.Goodprogrammerscloselytracethroughtheircodeindetail.Lookforboundaryproblemsincode,manytimesbugsexistattheboundaries-ofstructures,arrays,code(e.g.,forloops),and,mostofall,data.Manydifficultbugsrequiremorepowerthanjusthackingandhoping.Onceyouhavereadyourcodeandconvincedyourselfitworksthenbugsremainyouneedtoinstrumentyourcodeandstartthedetectivework.</p><p>Sometimeswhiledebuggingyouwilldiscoverother,unrelatedbugsthathaven’tyetmanifestedthemselves.FIXTHEM!</p><p>PragmaticProgrammerTip:</p><blockquote><p><strong>Don’tlivewithbrokenwindows</strong>Fixbaddesigns,wrongdecisions,andpoorcodewhenyouseethem.</p></blockquote><p>PragmaticProgrammerTip:</p><blockquote><p><strong>FixtheProblem,NottheBlame</strong>Itdoesn’treallymatterwhetherthebugisyourfaultorsomeoneelse’s—itisstillyourproblem,anditstillneedstobefixed.</p></blockquote><h2id="the-printf-approach-to-debugging">The<codeclass="language-plaintexthighlighter-rouge">printf</code>approachtodebugging</h2><p>“AllIneedis<codeclass="language-plaintexthighlighter-rouge">printf</code>,right?”</p><p>Upuntilnowyouhavebeenusingmostly<codeclass="language-plaintexthighlighter-rouge">printf()</code>(oritsvariants)tohelpyoudebugyourcode.Thatcanonlygetyousofar.Manydifferenttypesoferrorsorbugscanexistinsoftware.Forexample,youmayhavebugfreecodebuttheperformanceofthesystemisabysmal.Howdoyoufindperformanceerrorsinyourcode-coulditbethechoiceofdatastructureistoo“slow”,thestructureofyourcodeisawful,orperhapsthealgorithmsareabadmatchforthesystemhardwareoraparticularsetofinputdata?Whathappensifyoucodelookserrorfreebutyouhavememoryleaks?You’llgetlittlehelpfrom<codeclass="language-plaintexthighlighter-rouge">printf()</code>forthese.</p><p>Worse,theunderlyingbugmayeveninterferewith<codeclass="language-plaintexthighlighter-rouge">printf()</code>’slimitedcontributiontoyourefforts.Forexample,ifyouhaveasegfaultthatoccursafteryour<codeclass="language-plaintexthighlighter-rouge">printf()</code>isexecutedbutitsstringnevergetsdisplayedbecausetheprocesssegfaults—youmightthinkthatthebugoccursbeforeyour<codeclass="language-plaintexthighlighter-rouge">printf</code>whenreallythebughappensmuchlater.Thetakeawayhereisthat<codeclass="language-plaintexthighlighter-rouge">printf</code>isnotyourfriendintheseexamples,ratherit’saredherring.Whathappensifyoursystemrunsforhoursandonlyunderacertainsetofsystemconditionsthecodefails.Workingyourwaythrough1000sof<codeclass="language-plaintexthighlighter-rouge">printf</code>statementsmaynothelp.Whenabugisburieddeepintheexecutionofyoursoftwareyouneedsophisticatedtoolstotrackthosedown.Youneedmorethan<codeclass="language-plaintexthighlighter-rouge">printf()</code>toattackthesebugs.Thislecturetalksabouttoolstohelpwithperformanceissues,memoryleaksanddifficultbugs.</p><p>Onemorethingaboutusing<codeclass="language-plaintexthighlighter-rouge">printf()</code>fordebugging.Justbecause<codeclass="language-plaintexthighlighter-rouge">stdout</code>showssomeofyour<codeclass="language-plaintexthighlighter-rouge">printf()</code>swereexecuteddoesn’talwaysmeanthatthelastmessagewrittento<codeclass="language-plaintexthighlighter-rouge">stdout</code>isfromthelast<codeclass="language-plaintexthighlighter-rouge">printf()</code>beforetheprogramhadaproblem.Unixoutputisoften<em>lazy</em>,meaningthatthesystemwill<em>eventually</em>sendthemessageto<codeclass="language-plaintexthighlighter-rouge">stdout</code>butonlywhenitisready(e.g.,someminimumnumberofcharacterstoprinttomakeitworthwhile,whenthesystemisdoingoutputforyourprocessaswellasothers,etc.).Thismayseemunimportant,butitmeansthatyourprogram<em>mayexecutethecodefollowingthe<codeclass="language-plaintexthighlighter-rouge">printf()</code>beforetheoutputappears</em>.So,ifyouareusing<codeclass="language-plaintexthighlighter-rouge">printf()</code>fordebugging,youshouldfollowitwitha<codeclass="language-plaintexthighlighter-rouge">fflush(stdout)</code>whichtellsthesystem“printitNOW”beforeyourprogramcontinues.SomewilldefineaCpreprocessormacroforthis:</p><pre><codeclass="language-C">/*debugMacros.c-intheexamplesdirectory*/#include&lt;stdio.h&gt;#include&lt;stdlib.h&gt;#defineDEBUGMSG(s){printf("DEBUG:%s",s);fflush(stdout);}/*Ingccandothermoderncompilersyoucandefine*//*themacrotouseavariablenumberofarguments*/#defineEPRINTF(...)fprintf(stderr,__VA_ARGS__)intmain(){DEBUGMSG("Enteredmain\n");intrc=42,b=2;floata=1.,c=3.14159;if(rc){EPRINTF("Badnessabounds!rc=%d\n",rc);EPRINTF("Saysomethingelse...");EPRINTF("andthenabitmore:%f,%d,%f.\n",a,b,c);}printf("bye!");return0;}</code></pre><h2id="the-gnu-debugger-gdb">TheGNUDebugger(GDB)</h2><p>Togetstartedtype<codeclass="language-plaintexthighlighter-rouge">mangdb</code>atthecommandline.Thewebalsohasgoodinformationon<codeclass="language-plaintexthighlighter-rouge">gdb</code>:foradetailedarticlecheckout:<ahref="http://ace.cs.ohiou.edu/morton/docs/gdb_manual/gdb.html">theGDBmanual</a>.Itshouldbenosurprisethatthe<codeclass="language-plaintexthighlighter-rouge">emacs</code>editoralsosupports<codeclass="language-plaintexthighlighter-rouge">gdb</code>-see<ahref="http://tedlab.mit.edu/~dr/gdbintro.html">AnIntroductionToUsingGDBUnderEmacs</a>.Whenlearninganewtool,suchas<codeclass="language-plaintexthighlighter-rouge">gdb</code>,itcanbequitehelpfultokeepaagood<codeclass="language-plaintexthighlighter-rouge">gdb</code><ahref="http://users.ece.utexas.edu/~adnan/gdb-refcard.pdf">quickreferencecard</a>handy-allyouneedtoknowintermsofcommandsyntaxishere.</p><p><strong>NOTE:</strong>Beforewegetstartedusing<codeclass="language-plaintexthighlighter-rouge">gdb</code>,ensureyour<codeclass="language-plaintexthighlighter-rouge">mygcc</code>aliashasthe<codeclass="language-plaintexthighlighter-rouge">-ggdb</code>flag-ourstandard<codeclass="language-plaintexthighlighter-rouge">.bashrc</code>filedefines<codeclass="language-plaintexthighlighter-rouge">mygcc</code>withthisflag.Thisflagensuresthatusefulmetadataispackagedwithyourexecutableatcompiletimethat<codeclass="language-plaintexthighlighter-rouge">gdb</code>needstohelpyoudebugyourprograms.</p><divclass="language-bashhighlighter-rouge"><divclass="highlight"><preclass="highlight"><code><spanclass="nv">$</span><spanclass="nb">alias</span>mygcc<spanclass="nb">alias</span><spanclass="nv">mygcc</span><spanclass="o">=</span><spanclass="sb">`</span>gcc<spanclass="nt">-Wall</span><spanclass="nt">-pedantic</span><spanclass="nt">-std</span><spanclass="o">=</span>c11<spanclass="nt">-ggdb</span><spanclass="sb">`</span></code></pre></div></div><p><strong>NOTE:</strong>Forthecuriousstudent,itisalsoworthnotingthatyoucanuseGDBtodebugprogramswrittennotonlyinCbutalsoinC++,FORTRAN,andModula-2.</p><p>Thegdbdebuggerisinvokedwiththeshellcommand<codeclass="language-plaintexthighlighter-rouge">gdb</code>;itthenprintsitsownpromptandacceptsitsownwiderangeofcommands.Oncestarted,itreadscommandsfromtheterminaluntilyoutellittoexitwiththegdbcommand<codeclass="language-plaintexthighlighter-rouge">quit</code>.Youcangetonlinehelpfrom<codeclass="language-plaintexthighlighter-rouge">gdb</code>itselfbyusingthecommand<codeclass="language-plaintexthighlighter-rouge">help</code>.</p><divclass="language-plaintexthighlighter-rouge"><divclass="highlight"><preclass="highlight"><code>$gdbGNUgdb(GDB)Fedora7.10.1-31.fc23Copyright(C)2015FreeSoftwareFoundation,Inc.LicenseGPLv3+:GNUGPLversion3orlater&lt;http://gnu.org/licenses/gpl.html&gt;Thisisfreesoftware:youarefreetochangeandredistributeit.ThereisNOWARRANTY,totheextentpermittedbylaw.Type"showcopying"and"showwarranty"fordetails.ThisGDBwasconfiguredas"x86_64-redhat-linux-gnu".Type"showconfiguration"forconfigurationdetails.Forbugreportinginstructions,pleasesee:&lt;http://www.gnu.org/software/gdb/bugs/&gt;.FindtheGDBmanualandotherdocumentationresourcesonlineat:&lt;http://www.gnu.org/software/gdb/documentation/&gt;.Forhelp,type"help".Type"aproposword"tosearchforcommandsrelatedto"word".(gdb)</code></pre></div></div><p>Youcanrun<codeclass="language-plaintexthighlighter-rouge">gdb</code>withnoargumentsoroptions;butthemostusualwaytostartGDBiswithoneargument,specifyinganexecutableprogramastheargument:</p><divclass="language-bashhighlighter-rouge"><divclass="highlight"><preclass="highlight"><code><spanclass="nv">$</span>gdbprogram</code></pre></div></div><h3id="gdb-demo">GDBDemo</h3><p>Inthefollowingexampleswewillusealotofthebasic<codeclass="language-plaintexthighlighter-rouge">gdb</code>commands-<codeclass="language-plaintexthighlighter-rouge">break</code>,<codeclass="language-plaintexthighlighter-rouge">run</code>,<codeclass="language-plaintexthighlighter-rouge">next</code>,<codeclass="language-plaintexthighlighter-rouge">step</code>,<codeclass="language-plaintexthighlighter-rouge">continue</code>,<codeclass="language-plaintexthighlighter-rouge">display</code>,<codeclass="language-plaintexthighlighter-rouge">printf</code>,<codeclass="language-plaintexthighlighter-rouge">x</code>(examinememory),<codeclass="language-plaintexthighlighter-rouge">backtrace</code>(<codeclass="language-plaintexthighlighter-rouge">bt</code>forshort),and<codeclass="language-plaintexthighlighter-rouge">frame</code>(<ahref="http://sourceware.org/gdb/current/onlinedocs/gdb/Frames.html">checkoutstackframes</a>-thisisanimportantconceptinCandveryusefulfordebuggingandpokingaroundinyourcodeandlookingatvariables).Thesearemostofthecommoncommands.</p><p>Istronglyrecommendthatyougothroughthesequenceofstepsbelowandusethesedebuggingcommands.Don’tworry,youcan’tbreakanything.Justliketheshellcommandsyou’llonlyneedasubsetofthethecompletesetof<codeclass="language-plaintexthighlighter-rouge">gdb</code>commandstobecomeaveryeffectivedebugger.Again,<codeclass="language-plaintexthighlighter-rouge">printf</code>isfornovicesandnotpartofthehacker’sparlanceorthenecessarytoolsinyourtoolkit:<codeclass="language-plaintexthighlighter-rouge">gdb</code>is!</p><p>Let’sstartby<codeclass="language-plaintexthighlighter-rouge">cd</code>‘ingtothedirectorywherewehavesomeprogramthatwewanttodebug—forthepurposeofthisdemoIwillbeusinganew“password”program.</p><divclass="language-bashhighlighter-rouge"><divclass="highlight"><preclass="highlight"><code><spanclass="nv">$</span><spanclass="nb">cd</span>~/cs50-live/password<spanclass="nv">$</span>make</code></pre></div></div><p>Theprogramissimple:“password”simulatesaprogramthatpromptstheusertoentertheirpassword.Iftheuser’s“guess”matchesthepassword,thentheuseris“authenticated”(i.e.,theygetthenice“success”message).Iftheuserfailstoenterthecorrectpassword,theywillbepromptedagain.Theuserisonlyallowed3guessesbeforetheprogramterminates.</p><p>ItriedtheprogramoncewhereIenteredthecorrectpassword(whichiscurrentlyhardcodedintotheprogram)andsuccessfully“authenticated.”Ialsotriedtheprogramonsomereasonable“guess”passwordsandIwasn’tabletoauthenticate.</p><divclass="language-plaintexthighlighter-rouge"><divclass="highlight"><preclass="highlight"><code>$./passwordpassword:cs50success!$./passwordpassword:passwordincorrect.tryagain.(attempt1)password:dartmouthincorrect.tryagain.(attempt2)password:passwdincorrect.tryagain.(attempt3)you'veexceededthemax.numberofattempts.tryagainlater.</code></pre></div></div><p>SoI’mgood,right?!</p><p>Well,exceptforthisweirdthingIencountered.IthoughtI’dtesttheprogramwithafewmorepasswordsthatthatIthoughtof:</p><divclass="language-plaintexthighlighter-rouge"><divclass="highlight"><preclass="highlight"><code>$./passwordpassword:incorrect.tryagain.(attempt1)password:2345incorrect.tryagain.(attempt2)password:abcdefghijklmnsuccess!</code></pre></div></div><p>WHAT?!Success?Really?</p><p>OK,let’spokeatthisalittlemore:</p><divclass="language-plaintexthighlighter-rouge"><divclass="highlight"><preclass="highlight"><code>$./passwordpassword:abcdefghijklmnopqrstuvwxyzSegmentationfault(coredumped)</code></pre></div></div><p>Uhoh.Thedreadedsegfault.OK,Ineedtoinvestigatemore.ClearlysomethingfunnyhappenswhenIstartenteringlongpasswords(thatorthisprogramreallydoesn’tlikethealphabet…).SincetheweirdbehaviorI’mnoticingseemstoberelatedtoreading/checkingpasswordsthatareentered,I’llstartmyinvestigationofthecodethere.</p><p>Let’stryrunningourprograminthatcooldebuggingtool,<codeclass="language-plaintexthighlighter-rouge">gdb</code>.When<codeclass="language-plaintexthighlighter-rouge">gdb</code>startsupitprintsoutabunchofinformationaboutitsversionandlicense,thendropsintothe<codeclass="language-plaintexthighlighter-rouge">gdb</code>“shell.”</p><divclass="language-plaintexthighlighter-rouge"><divclass="highlight"><preclass="highlight"><code>$gdbpasswordGNUgdb(GDB)Fedora7.10.1-31.fc23Copyright(C)2015FreeSoftwareFoundation,Inc....(snipped)...Readingsymbolsfrompassword...done.(gdb)</code></pre></div></div><p>Oneofthepowerfulfeaturesthatadebuggeroffersusistheabilitytoset“breakpoints”inourcode;whenwerunourprogramandthedebuggerencountersabreakpointthatwepreviouslyset,theexecutionoftheprogramstopsatthatpoint.Let’ssetafewbreakpoints:</p><divclass="language-plaintexthighlighter-rouge"><divclass="highlight"><preclass="highlight"><code>(gdb)breakmainBreakpoint1at0x400805:filepassword.c,line22.(gdb)breakcheck_passwordBreakpoint2at0x4008b4:filepassword.c,line57.(gdb)break36Breakpoint3at0x40086a:filepassword.c,line36.(gdb)infobreakNumTypeDispEnbAddressWhat1breakpointkeepy0x0000000000400805inmainatpassword.c:222breakpointkeepy0x00000000004008b4incheck_passwordatpassword.c:573breakpointkeepy0x000000000040086ainmainatpassword.c:36</code></pre></div></div><p>Hopefullyyoucaughtthat:noticethatwecansetbreakpointsbyidentifyingthenameofafunction(e.g.,“main”and“check_password”),orbyspecifyingaparticularlineinoursourcecode(e.g.,line36).Thereareotheridentifiersthatcanbeusedtoenablebreakpoints(e.g.,bymemoryaddress)butwewillleaveyoutoexplorethoselater.Whenyouaredebuggingprogramswithmultiplefilesyoucanalsosetbreakpointsindifferentfilesbyspecifyingthefileaswellasthefunctionname/lineofcodewhereyou’dliketoenableabreakpoint.Again,wewillgetfamiliarwiththebasicshereandyoucangoexploresomeoftheothercool<codeclass="language-plaintexthighlighter-rouge">gdb</code>featureslater.Anytimeyouwanttoseethebreakpointsyou’vecurrentlycreated,run<codeclass="language-plaintexthighlighter-rouge">infobreak</code>(asshownabove).Youcanalsoclearallofyourbreakpoints(<codeclass="language-plaintexthighlighter-rouge">clear</code>),clearspecificbreakpoints(<codeclass="language-plaintexthighlighter-rouge">clearfunction</code>or<codeclass="language-plaintexthighlighter-rouge">clearline</code>),orevenenable/disablebreakpointssothatyoucanleavetheminplace,butcontrolwhetherthecauseyourprogramtostopwhenthebreakpointisencountered.Let’sdisableallofourbreakpointsexceptfortheonewesetatthe<codeclass="language-plaintexthighlighter-rouge">check_password</code>function:</p><divclass="language-plaintexthighlighter-rouge"><divclass="highlight"><preclass="highlight"><code>(gdb)disable13(gdb)infobreakNumTypeDispEnbAddressWhat1breakpointkeepn0x0000000000400805inmainatpassword.c:222breakpointkeepy0x00000000004008b4incheck_passwordatpassword.c:573breakpointkeepn0x000000000040086ainmainatpassword.c:36</code></pre></div></div><p>Atthispointwe’vestarted<codeclass="language-plaintexthighlighter-rouge">gdb</code>andtolditaboutsomebreakpointswewantset,butwehaven’tactuallystartedrunningourprogram.Let’srunourprogramnow:</p><divclass="language-plaintexthighlighter-rouge"><divclass="highlight"><preclass="highlight"><code>(gdb)runStartingprogram:/net/grad/traviswp/cs50-live/password/passwordBreakpoint2,check_password()atpassword.c:5757intauthenticated=0;//"flag"thatdeterminesiftheusersuccessfullyauthenticated.</code></pre></div></div><p>Justaswehoped(expected),thedebuggerstartedourprogramrunningbut“paused”theprogramassoonasithitthebreakpointthatwesetatthe<codeclass="language-plaintexthighlighter-rouge">check_password</code>function.Oncetheprogramhasstoppedwecan“pokearound”abit.</p><p>Nowlet’s<codeclass="language-plaintexthighlighter-rouge">step</code>onelineofcodeatatime:</p><divclass="language-plaintexthighlighter-rouge"><divclass="highlight"><preclass="highlight"><code>(gdb)step60printf("password:");(gdb)step__printf(format=0x400a9f"password:")atprintf.c:2828{(gdb)step32va_start(arg,format);</code></pre></div></div><p>Oops!Steppinglinebylineisnicebut<codeclass="language-plaintexthighlighter-rouge">gdb</code>’s<codeclass="language-plaintexthighlighter-rouge">step</code>commandallowedustowalkrightdownintotheickydetailsof<codeclass="language-plaintexthighlighter-rouge">printf</code>!Thisisprettycoolthatwecan“step”intofunctionsbut<codeclass="language-plaintexthighlighter-rouge">printf</code>doesalotofworkthatwearen’tinterestedinrightnow.Ifyoufindyourselfdeepdowninsomefunctionthatyouaccidentallysteppedinto,usethe<codeclass="language-plaintexthighlighter-rouge">finish</code>commandtostarttheprogramrunningagainuntiljustafterthefunctioninthecurrentstackframereturns.</p><divclass="language-plaintexthighlighter-rouge"><divclass="highlight"><preclass="highlight"><code>(gdb)finishRuntillexitfrom#0__printf(format=0x400a9f"password:")atprintf.c:32check_password()atpassword.c:6161if(fgets(guess,50,stdin)==NULL)Valuereturnedis$1=10</code></pre></div></div><p>Nowthatwearebackupinour<codeclass="language-plaintexthighlighter-rouge">check_password</code>functionwecanproceed.Toavoidstepping<em>into</em>functionswecanusethealternative<codeclass="language-plaintexthighlighter-rouge">gdb</code>commandcalled<codeclass="language-plaintexthighlighter-rouge">next</code>whichissimilarto<codeclass="language-plaintexthighlighter-rouge">step</code>inthatitexecutesonelineofcodeandthenpausesatthenextlineofcode,however<codeclass="language-plaintexthighlighter-rouge">next</code>willstep<em>over</em>functionssothatwedon’tendupdeepdowninsomecodethatisn’trelevanttous(i.e.,deepinsideofthedetailsof<codeclass="language-plaintexthighlighter-rouge">printf</code>);let’strythatnow:</p><divclass="language-plaintexthighlighter-rouge"><divclass="highlight"><preclass="highlight"><code>(gdb)nextpassword:password65if(strlen(guess)==0)(gdb)next71if(guess[strlen(guess)-1]!='\n'){(gdb)next78guess[strlen(guess)-1]=0;(gdb)next82if(strcmp(PASSWORD,guess)==0)(gdb)next85returnauthenticated;</code></pre></div></div><p>Whenwewereusing<codeclass="language-plaintexthighlighter-rouge">next</code>(above)wefinallygottheprompttoenterapassword—Idecidedtotryoneofthemostpopularpasswordsoutthere:“password”:).</p><p>Beforewegoanyfurther,let’slookatsomeofthelocalvariables.Wecanusethe<codeclass="language-plaintexthighlighter-rouge">print</code>commandtodisplaythevalueofsomeexpression(e.g.,variablename).</p><divclass="language-plaintexthighlighter-rouge"><divclass="highlight"><preclass="highlight"><code>(gdb)printauthenticated$2=0(gdb)printguess$3="password\000"</code></pre></div></div><p>WecanevenevaluateCcode!</p><divclass="language-plaintexthighlighter-rouge"><divclass="highlight"><preclass="highlight"><code>(gdb)printstrlen(guess)$4=8</code></pre></div></div><p>OruseC’s“addressof”operatortolearnaboutwheresomeofourvariablesliveinmemory.Keepinmindthatthesevariablesliveonthe“stack”andarelocalvariablesthatonlyexistwithinthe<codeclass="language-plaintexthighlighter-rouge">check_password</code>function.</p><divclass="language-plaintexthighlighter-rouge"><divclass="highlight"><preclass="highlight"><code>(gdb)print&amp;authenticated$5=(int*)0x7fffffffdf8c(gdb)print&amp;guess$6=(char(*)[10])0x7fffffffdf80</code></pre></div></div><p>Prettycool,right?Noticethat<codeclass="language-plaintexthighlighter-rouge">gdb</code>isniceenoughtoalsogiveusinformationaboutthe<em>type</em>ofthethingthatwearelookingat!</p><p>Let’srun<codeclass="language-plaintexthighlighter-rouge">next</code>untilwearedonein<codeclass="language-plaintexthighlighter-rouge">check_password</code>.Oncewereturnfrom<codeclass="language-plaintexthighlighter-rouge">check_password</code>wearereturnedto<codeclass="language-plaintexthighlighter-rouge">main</code>atthepointinthecodejustafterwherewecalled<codeclass="language-plaintexthighlighter-rouge">check_password</code>.IkindofforgetwhereweareinthecodesoI’mgoingtousethe<codeclass="language-plaintexthighlighter-rouge">list</code>commandtodumpoutsomeofthesourcecodearoundwhereIamcurrentlystoppedintheprogram’sexecution.Bydefault,<codeclass="language-plaintexthighlighter-rouge">list</code>willshowus10linesofcodewhereourcurrentlineis“centered”intheoutput.</p><divclass="language-plaintexthighlighter-rouge"><divclass="highlight"><preclass="highlight"><code>(gdb)next86}(gdb)nextmain(argc=1,argv=0x7fffffffe0a8)atpassword.c:3838n_guesses++;(gdb)list3334//getpasswordandcheckifuserauthenticated35intresult;36while(n_guesses&lt;MAX_NUM_GUESSES){37result=check_password();38n_guesses++;39if(result)40break;41else42printf("(%d)incorrect.tryagain.(attempt%d)\n",result,n_guesses);</code></pre></div></div><p>Backtosteppingandcheckingsomevariables…andtryinganotherpassword…</p><divclass="language-plaintexthighlighter-rouge"><divclass="highlight"><preclass="highlight"><code>(gdb)step39if(result)(gdb)step42printf("(%d)incorrect.tryagain.(attempt%d)\n",result,n_guesses);(gdb)step__printf(format=0x400a28"(%d)incorrect.tryagain.(attempt%d)\n")atprintf.c:2828{(gdb)finishRuntillexitfrom#0__printf(format=0x400a28"(%d)incorrect.tryagain.(attempt%d)\n")atprintf.c:28(0)incorrect.tryagain.(attempt1)main(argc=1,argv=0x7fffffffe0a8)atpassword.c:3636while(n_guesses&lt;MAX_NUM_GUESSES){Valuereturnedis$7=38(gdb)next37result=check_password();(gdb)nextBreakpoint2,check_password()atpassword.c:5757intauthenticated=0;//"flag"thatdeterminesiftheusersuccessfullyauthenticated.(gdb)next60printf("password:");(gdb)next61if(fgets(guess,50,stdin)==NULL)(gdb)nextpassword:password265if(strlen(guess)==0)(gdb)printguess$8="password2\n"(gdb)printauthenticated$9=0</code></pre></div></div><p>OK,I’mgettingtiredofstepping.Ratherthansteppinglinebyline,Iwanttostarttheprogramrunningagain(atleastuntilithitsthebreakpointagain)sothatIcanspeeduptheprocessgettingbacktothecodewhereIcanenterapasswordandverifythechanges.TodothisIcansimplyusethe<codeclass="language-plaintexthighlighter-rouge">continue</code>commandwhichwillcontinuetheexecutionoftheprogramuntilitisstoppedagainforsomereason.</p><divclass="language-plaintexthighlighter-rouge"><divclass="highlight"><preclass="highlight"><code>(gdb)continueContinuing.(0)incorrect.tryagain.(attempt2)Breakpoint2,check_password()atpassword.c:5757intauthenticated=0;//"flag"thatdeterminesiftheusersuccessfullyauthenticated.(gdb)next60printf("password:");(gdb)61if(fgets(guess,50,stdin)==NULL)(gdb)password:password123465if(strlen(guess)==0)(gdb)cContinuing.(0)incorrect.tryagain.(attempt3)you'veexceededthemax.numberofattempts.tryagainlater.[Inferior1(process16748)exitedwithcode02]</code></pre></div></div><p>Itlookslikewegotbootedfromtheprogrambecauseweexceededthemaximumnumberofattemptsthatitwillallow.</p><p>Atthispointwe’veseensomeuseful<codeclass="language-plaintexthighlighter-rouge">gdb</code>commandsandyouarenowequippedtodosomedebuggingonyourown.Keeppokingattheprogramandseeifyoucanfindtheerrorthatallowspeopletoauthenticateincaseswheretheyreallyshouldn’tbeallowedtodoso.Ifyouneedapushintherightdirection,checkoutthis<ahref="passwordhint.html">hint</a>.Ifyoureallycan’tfigureitoutaftertryingtouse<codeclass="language-plaintexthighlighter-rouge">gdb</code>,youcanalsocheckouta<ahref="passwordsolution.html">briefdiscussionforthesolution</a>tothebug—onlydothisifyou’ve<em>really</em>givenittheol’collegetrythough:)</p><p><strong>Acoupleofcoolthingstonoteabout<codeclass="language-plaintexthighlighter-rouge">gdb</code>atthispoint:</strong></p><ul><li>Everytimeyouenteracommandatthe<codeclass="language-plaintexthighlighter-rouge">gdb</code>“shell”thatissuccessful,theoutputvalueisstoredinavariabledenoted<codeclass="language-plaintexthighlighter-rouge">$N</code>where<codeclass="language-plaintexthighlighter-rouge">N</code>incrementsby1foreachcommandthatyourun.Youcanusethosevariablesatalaterpointifyouwant(e.g.,<codeclass="language-plaintexthighlighter-rouge">print$3</code>).</li><li><codeclass="language-plaintexthighlighter-rouge">gdb</code>supportsauto-completiononfunctionnamesandvariablenames!Goaheadandtryitout!</li><li>Alsosimilartotheregularshell,the<codeclass="language-plaintexthighlighter-rouge">gdb</code>shellallowsyoutoarrowup/downtorevisitpastcommands.</li><li>Manyofthe<codeclass="language-plaintexthighlighter-rouge">gdb</code>commandshaveabbreviatedforms(e.g.,<codeclass="language-plaintexthighlighter-rouge">run</code>=&gt;<codeclass="language-plaintexthighlighter-rouge">r</code>,<codeclass="language-plaintexthighlighter-rouge">continue</code>=&gt;<codeclass="language-plaintexthighlighter-rouge">c</code>,<codeclass="language-plaintexthighlighter-rouge">next</code>=&gt;<codeclass="language-plaintexthighlighter-rouge">n</code>,<codeclass="language-plaintexthighlighter-rouge">backtrace</code>=&gt;<codeclass="language-plaintexthighlighter-rouge">bt</code>);seethe<ahref="http://users.ece.utexas.edu/~adnan/gdb-refcard.pdf">gdbquickreferenceguide</a>toseeothercommandsthathaveabbreviatedforms.</li><li>Youcanactuallyre-runthepreviouscommandsimplybyhitting<codeclass="language-plaintexthighlighter-rouge">&lt;enter&gt;</code>.</li></ul><h3id="frequently-used-gdb-commands">Frequentlyused<codeclass="language-plaintexthighlighter-rouge">gdb</code>commands</h3><p>Belowaresomeofthemorecommon<codeclass="language-plaintexthighlighter-rouge">gdb</code>commandsthatyouwillneed.Seealsothisprintable<ahref="http://users.ece.utexas.edu/~adnan/gdb-refcard.pdf">gdbquickreferenceguide</a>.</p><table><thead><tr><thstyle="text-align:left">command</th><thstyle="text-align:left">purpose</th></tr></thead><tbody><tr><tdstyle="text-align:left"><codeclass="language-plaintexthighlighter-rouge">run[arglist]</code></td><tdstyle="text-align:left">Startyourprogram(witharglist,ifspecified).</td></tr><tr><tdstyle="text-align:left"><codeclass="language-plaintexthighlighter-rouge">break[file:]function</code></td><tdstyle="text-align:left">Setabreakpointatfunction(infile).</td></tr><tr><tdstyle="text-align:left"><codeclass="language-plaintexthighlighter-rouge">list[file:]function</code></td><tdstyle="text-align:left">Typethetextoftheprograminthevicinityofwhereitispresentlystopped.</td></tr><tr><tdstyle="text-align:left"><codeclass="language-plaintexthighlighter-rouge">backtrace</code></td><tdstyle="text-align:left">Backtrace:displaytheprogramstack.</td></tr><tr><tdstyle="text-align:left"><codeclass="language-plaintexthighlighter-rouge">frame[args]</code></td><tdstyle="text-align:left">Theframecommandallowsyoutomovefromonestackframetoanother,andtoprintthestackframeyouselect.argsmaybeeithertheaddressoftheframeorthestackframenumber.Withoutanargument,frameprintsthecurrentstackframe.</td></tr><tr><tdstyle="text-align:left"><codeclass="language-plaintexthighlighter-rouge">printexpr</code></td><tdstyle="text-align:left">Displaythevalueofanexpression.</td></tr><tr><tdstyle="text-align:left"><codeclass="language-plaintexthighlighter-rouge">continue</code></td><tdstyle="text-align:left">Continuerunningyourprogram(afterstopping,e.g.atabreakpoint).</td></tr><tr><tdstyle="text-align:left"><codeclass="language-plaintexthighlighter-rouge">next</code></td><tdstyle="text-align:left">Executenextprogramline(afterstopping);stepoveranyfunctioncallsintheline.</td></tr><tr><tdstyle="text-align:left"><codeclass="language-plaintexthighlighter-rouge">step</code></td><tdstyle="text-align:left">Executenextprogramline(afterstopping);stepintoanyfunctioncallsintheline.</td></tr><tr><tdstyle="text-align:left"><codeclass="language-plaintexthighlighter-rouge">help[name]</code></td><tdstyle="text-align:left">ShowinformationaboutGDBcommandname,orgeneralinformationaboutusingGDB.</td></tr><tr><tdstyle="text-align:left"><codeclass="language-plaintexthighlighter-rouge">quit</code></td><tdstyle="text-align:left">ExitfromGDB.</td></tr></tbody></table><h2id="valgrind-a-memory-management-profiling-tool">Valgrind:amemorymanagementprofilingtool</h2><p>The<codeclass="language-plaintexthighlighter-rouge">valgrind</code>toolisexcellentforfindinganumberofproblems,specificallyissuesinprogramsthatinvolveillegalmemoryaccessandmemoryleaks.BesuretoreadthisexcellentbrieftutorialfromStanford’sCS107class:<ahref="https://web.stanford.edu/class/cs107/guide_valgrind.html">GuidetoValgrind</a>(someofthenotesbelowareadaptedfromthisguide).</p><p>Runningaprogramunder<codeclass="language-plaintexthighlighter-rouge">valgrind</code>resultsinextensivecheckingofmemoryallocationsandaccessesanditprovidesareportwithdetailedinformationaboutthecontextandcircumstancesofeacherror.Theoutputreportcanbequiteverboseandalittledifficulttousetoimproveyourprogram’susageofmemoryifyoudon’tknowwhatyouarelookingfor;thereforeoneofourobjectiveshereistolookatacoupleofexamplesandstarttogetahandleonhowtoreadandinterpret<codeclass="language-plaintexthighlighter-rouge">valgrind</code>’soutput.</p><p><strong>=&gt;TheGoalofaProgrammer:</strong>Acleanreportfrom<codeclass="language-plaintexthighlighter-rouge">valgrind</code>thatindicates“noerrorsandnoleaks.”</p><p>Asfarasyouareconcernedwhenusing<codeclass="language-plaintexthighlighter-rouge">valgrind</code>,therearetwogeneraltypesoffeedbackyouwillgetregardingyourprogram’susageofmemory.Wewilllookatthesenext.</p><h3id="memory-errors">Memoryerrors</h3><p>Thereallyobviousandbadmemoryerrorswillcrashyourprogramoutright(e.g.,accessingmemorythatisoutsideofyourprogram’sallocatedmemory).Thenotsoobviousmemoryrelatederrorsmay“getlucky”mostofthetime(i.e.,touchvalidmemory),buteveryonceinawhiletheluckrunsoutandyourprogram,somewhatmysteriously,fails.Running<codeclass="language-plaintexthighlighter-rouge">valgrind</code>onyourprogramcangiveyouinsightfulinformationonbothofthesesortsoferrors.</p><p>Whenanerrorisdetectedby<codeclass="language-plaintexthighlighter-rouge">valgrind</code>youshouldseesomeoutputthatincludessomesortoferrordescription,theoffendingsourcecode(line),andalittlebitofinformationabouttheactualmemoryandwhatmaybegoingwrong.Thereareafewdifferenttypesofmemoryerrorsthatyoumayseesuchas:</p><ul><li><codeclass="language-plaintexthighlighter-rouge">Invalidread/writeofsizeX</code></li><li><codeclass="language-plaintexthighlighter-rouge">Useofuninitializedvalue</code>or<codeclass="language-plaintexthighlighter-rouge">Conditionaljumpormovedependsonunitializedvalue(s)</code></li><li><codeclass="language-plaintexthighlighter-rouge">Sourceanddestinationoverlapinmemcpy()</code></li><li><codeclass="language-plaintexthighlighter-rouge">Invalidfree()</code></li><li>etc.</li></ul><h3id="memory-leaks">Memory“leaks”</h3><p>Whenyouallocatememory(e.g.,<codeclass="language-plaintexthighlighter-rouge">malloc</code>)butfailtoproperly<codeclass="language-plaintexthighlighter-rouge">free</code>thatmemorywhenitisnolongerneeded,thisleadstowhatisknownasa<em>memoryleak</em>.</p><p>Aswe’veseeninclass,memoryleaksinsmall,short-livedprogramsthatexitfairlyquicklydon’tcauseanynoticableissues.Inlargerprojectsthatoperateonlotsofdataand/orthosethatareintendedtorunforalongtime(e.g.,webservers),memoryleakscanaddupquicklyandcauseyourprogramtofail.</p><p>Valgrindallowsyoutocheckyourprograms(e.g.,<codeclass="language-plaintexthighlighter-rouge">prog</code>)formemoryleaksandtogetthebestfeedbackyou’llwanttospecifysomeadditionalflags:</p><divclass="language-bashhighlighter-rouge"><divclass="highlight"><preclass="highlight"><code><spanclass="nv">$</span>valgrind<spanclass="nt">--leak-check</span><spanclass="o">=</span>full<spanclass="nt">--show-leak-kinds</span><spanclass="o">=</span>all./prog<spanclass="o">[</span>ARGS]</code></pre></div></div><p>Forconvenience,we’veactuallydefinedanicemyvalgrindaliasinthecs50bashrcfileforjustthisreason.</p><divclass="language-bashhighlighter-rouge"><divclass="highlight"><preclass="highlight"><code><spanclass="nv">$</span><spanclass="nb">alias</span>myvalgrind</code></pre></div></div><p>Thus,youcansimplyrun:</p><divclass="language-bashhighlighter-rouge"><divclass="highlight"><preclass="highlight"><code><spanclass="nv">$</span>myvalgrind./prog<spanclass="o">[</span>ARGS]</code></pre></div></div><p>Theeasiestwaytodetermineifthereissomesortofmemoryleakistocheckthealloc/freecountsgeneratedinthe<codeclass="language-plaintexthighlighter-rouge">valgrind</code>output.Ideally,thecountsshouldmatch.Iftheydon’tyou’llgeta“LEAKSUMMARY”attheendofthereportaswellasalittlebitofinformationfrom<codeclass="language-plaintexthighlighter-rouge">valgrind</code>regardingeachofthedetectedmemoryleaks(e.g.,howmanybyteswereleaked,whereinthecodetheallocationhappened).</p><p>Whenprofilingyourprogram,<codeclass="language-plaintexthighlighter-rouge">valgrind</code>willattempttocategorizeanymemoryleaksintooneoffourcategories:<strong>(1)definitelylost:</strong>memorythatwasallocatedfromtheheapbutnotproperlyfreed,andthereisnolongerapointertothedata;<strong>(2)indirectlylost:</strong>memoryallocatedfromtheheapthatwasindirectlylostdueto“losing”apointerthatprovidedaccesstootherheap-allocatedmemory;<strong>(3)possiblylost:</strong>memorythatwasallocatedfromtheheapbutnotproperlyfreed—<codeclass="language-plaintexthighlighter-rouge">valgrind</code>can’tdeterminewhetherornotthereisapointertothememory;<strong>(4)stillreachable:</strong>memorythatwasallocatedfromtheheapbutnotproperlyfreed,buttheprogramstillretainsapointertothememoryinsomeway.Regardlessofthecategory,theseareallconsideredmemoryleaksandshouldbefixed!</p><h3id="valgrind-demos">ValgrindDemos</h3><p>Inclasswelookedatoneofthemorerecentversionsofthe“names”program,<codeclass="language-plaintexthighlighter-rouge">names9</code>.Running<codeclass="language-plaintexthighlighter-rouge">valgrind</code>byitselfdoesagoodjobofidentifyingvarioustypesof<em>memoryerrors</em>(seeabove).Ifwewant,however,toalsogetinformationabout<em>memoryleaks</em>inourprograms,weneedtorun<codeclass="language-plaintexthighlighter-rouge">valgrind</code>withtheflagsmentionedabove.Hereisasnippetoftheoutputthatwesawwhenrunning<codeclass="language-plaintexthighlighter-rouge">valgrind</code>onthe<codeclass="language-plaintexthighlighter-rouge">names9</code>:</p><divclass="language-plaintexthighlighter-rouge"><divclass="highlight"><preclass="highlight"><code>$myvalgrind./names==18387==Memcheck,amemoryerrordetector==18387==Copyright(C)2002-2015,andGNUGPL'd,byJulianSewardetal.==18387==UsingValgrind-3.11.0andLibVEX;rerunwith-hforcopyrightinfo==18387==Command:./names==18387==joebilltravismary4names:{mary,travis,bill,joe,}==18387====18387==HEAPSUMMARY:==18387==inuseatexit:396bytesin9blocks==18387==totalheapusage:12allocs,3frees,2,525bytesallocated==18387====18387==64bytesin4blocksareindirectlylostinlossrecord1of3==18387==at0x4C2BBAD:malloc(vg_replace_malloc.c:299)==18387==by0x40091E:bagnode_new(in/net/class/cs50/demo/names)==18387==by0x4008CE:bag_insert(in/net/class/cs50/demo/names)==18387==by0x400833:main(in/net/class/cs50/demo/names)==18387====18387==324bytesin4blocksareindirectlylostinlossrecord2of3==18387==at0x4C2DA60:calloc(vg_replace_malloc.c:711)==18387==by0x400A70:freadlinep(in/net/class/cs50/demo/names)==18387==by0x4007B8:readlinep(in/net/class/cs50/demo/names)==18387==by0x400815:main(in/net/class/cs50/demo/names)==18387====18387==396(8direct,388indirect)bytesin1blocksaredefinitelylostinlossrecord3of3==18387==at0x4C2BBAD:malloc(vg_replace_malloc.c:299)==18387==by0x400896:bag_new(in/net/class/cs50/demo/names)==18387==by0x4007FB:main(in/net/class/cs50/demo/names)==18387====18387==LEAKSUMMARY:==18387==definitelylost:8bytesin1blocks==18387==indirectlylost:388bytesin8blocks==18387==possiblylost:0bytesin0blocks==18387==stillreachable:0bytesin0blocks==18387==suppressed:0bytesin0blocks==18387====18387==Forcountsofdetectedandsuppressederrors,rerunwith:-v==18387==ERRORSUMMARY:1errorsfrom1contexts(suppressed:0from0)</code></pre></div></div><p>Therecanbe<em>alot</em>ofoutputbutweknowfromallofourexperienceasdebuggersatthispointthatweshouldbeginfixingerrorsstartingwiththefirstonereported—thisisthebestplacetostartand,inmanycases,willfixalotofthesubsequentmessagesaswell.Thefirstbitoffeedbackthat<codeclass="language-plaintexthighlighter-rouge">valgrind</code>gaveussaysthat“64bytesin4blocksareindirectlylost…”Whichroutinesareidentifiedaspossiblesourcesofmemoryleakage?Whichoftheseroutinesactuallyallocatememorythatwasapparentlyleaked?Howcanthisbefixed?</p><p><strong>Hint:</strong>Thereexistsacommentinthecodethatidentifieswherewewereabit“lazy.”Whatneedstobedoneforthecodetobelesslazy?</p><p>Withthefixinplace,let’sre-run<codeclass="language-plaintexthighlighter-rouge">valgrind</code>:</p><divclass="language-plaintexthighlighter-rouge"><divclass="highlight"><preclass="highlight"><code>$myvalgrind./names==19656==Memcheck,amemoryerrordetector==19656==Copyright(C)2002-2015,andGNUGPL'd,byJulianSewardetal.==19656==UsingValgrind-3.11.0andLibVEX;rerunwith-hforcopyrightinfo==19656==Command:./names==19656==joebilltravismary4names:{mary,travis,bill,joe,}==19656====19656==HEAPSUMMARY:==19656==inuseatexit:0bytesin0blocks==19656==totalheapusage:12allocs,12frees,2,525bytesallocated==19656====19656==Allheapblockswerefreed--noleaksarepossible==19656====19656==Forcountsofdetectedandsuppressederrors,rerunwith:-v==19656==ERRORSUMMARY:0errorsfrom0contexts(suppressed:0from0)</code></pre></div></div><p>Lookatthat!Nomoreerrors!</p><h2id="activity---try-it">Activity-tryit!</h2><p>Attheendoftheday<codeclass="language-plaintexthighlighter-rouge">gdb</code>and<codeclass="language-plaintexthighlighter-rouge">valgrind</code>aretoolsthatyoucanchoosetouseornot(thoughyourgraderwilllikelyusebothtoexplorethecorrectnessofyourprogramssoyoushouldtoo!).Readingaboutgreattoolsisonething,butreallylearninghowtouseatoolcomesfrom…usingatool!Belowaresomeinstructionstogetyousetupwithafewprogramsthathavesomebugs—someobvious,andsomenotsoobvious—andyourgoalistofindthosebugsandsquash‘emusing<codeclass="language-plaintexthighlighter-rouge">gdb</code>and/or<codeclass="language-plaintexthighlighter-rouge">valgrind</code>.Goodluck!</p><p>Intoday’s<ahref="activity.html">activity</a>weusegdbtoexploreandfixlogicandmemorybugsincode.Inyoursectionmeetingthisweekyou’llusegdbandvalgrindtopracticemorelogicandmemorydebugging.</p></div></article></div></div><footerclass="site-footer"><divclass="wrapper"><h2class="footer-heading">Engs50(CS50)--DartmouthCollege</h2><p><fontsize=-1>ThisversionofthecourseisbaseduponthosedesignedbyProfessorsPalmer,Kotz,Zhou,Campbell,andBalkcom.Iamdeeplyindebtedtotheseoutstandingeducators.--<ahref="https://engineering.dartmouth.edu/people/faculty/stephen-taylor/">StephenTaylor</a></font></p><p><small>Thispagewaslastupdatedon<strong>2023-01-05</strong>at<strong>11:31</strong>.</small></p></div></footer></body></html>
