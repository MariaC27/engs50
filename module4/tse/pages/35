https://thayer.github.io/engs50/Notes/querier/
2
32542
<!DOCTYPEhtml><html><head><metacharset="utf-8"><metahttp-equiv="X-UA-Compatible"content="IE=edge"><metaname="viewport"content="width=device-width,initial-scale=1"><title>TSEQuerier</title><metaname="description"content="InEngs50youwilllearnhowtodesign&buildlarge,reliable,maintainable,andunderstandablesoftwaresystems.IntheprocessyouwilllearntoprograminCwithUnixdevelopmenttools."><linkrel="shortcuticon"href="/engs50/50.png"/><linkrel="stylesheet"href="/engs50/css/main.css"><linkrel="canonical"href="/engs50/Notes/querier/"></head><body><headerclass="site-header"><aclass="site-title"href="/engs50/"><imgwidth=48align=centersrc="/engs50/50.png"alt="icon">Engs50(CS50)</a><navclass="site-nav">[<ahref="/engs50/Labs/">Labs</a>][<ahref="/engs50/Notes/">Notes</a>][<ahref="/engs50/Reading/">Reading</a>][<ahref="/engs50/Resources/">Resources</a>][<ahref="/engs50/Examples/">Examples</a>]</nav></header><divclass="page-content"><divclass="wrapper"><articleclass="post"><headerclass="post-header"><h1class="post-title">TSEQuerier</h1></header><divclass="post-content"><h3id="goals">Goals</h3><p>Therearethreeminilecturestoday.</p><ulid="markdown-toc"><li><ahref="#goals"id="markdown-toc-goals">Goals</a></li><li><ahref="#the-querier"id="markdown-toc-the-querier">theQuerier</a></li><li><ahref="#fuzz-testing"id="markdown-toc-fuzz-testing">FuzzTesting</a></li><li><ahref="#expressions"id="markdown-toc-expressions">Expressionsandaccumulators</a><ul><li><ahref="#arithmetic-expressions"id="markdown-toc-arithmetic-expressions">Arithmeticexpressions</a></li><li><ahref="#precedence"id="markdown-toc-precedence">Precedence</a></li></ul></li><li><ahref="#activity"id="markdown-toc-activity">Activity</a></li></ul><h2id="the-querier">theQuerier</h2><p>ThethirdcomponentoftheTinySearchEngineisthe<em>Querier</em>,whichreadstheindexproducedbytheIndexerandthepagefilesproducedbytheCrawler,tointeractivelyanswerwrittenqueriesenteredbytheuser.</p><p>OurQuerierloadstheindexintomemory(adatastructurewedevelopedfortheIndexer)andthenpromptstheuserforqueries.Queriesarecomprisedofwords,withoptional<codeclass="language-plaintexthighlighter-rouge">and</code>/<codeclass="language-plaintexthighlighter-rouge">or</code>operators.Forexample,</p><divclass="language-plaintexthighlighter-rouge"><divclass="highlight"><preclass="highlight"><code>computersciencecomputerandsciencecomputerorsciencebaseballorbasketballorultimatefrisbee</code></pre></div></div><p>Thefirsttwoexamplesaretreatedidentically,matchingonlydocumentsthathave<em>both</em>words-notnecessarilytogether(asinthephrase“computerscience”).Thethirdpicksupdocumentsthathave<em>either</em>word.Thefourthmatchesdocumentsthatmentionbaseball,orbasketball,orboth“ultimate”andtheword“frisbee”(notnecessarilytogether).</p><p>Here’sanexamplerun,withtheoutputtruncatedabit:</p><divclass="language-plaintexthighlighter-rouge"><divclass="highlight"><preclass="highlight"><code>$querier/querierdata/cs50-3data/cs50-index3KEYWORDs:&gt;computerandscienceQuery:computerandscienceMatches139documents(ranked):score141doc19:http://old-www.cs.dartmouth.edu/~dfk/papers/index.htmlscore135doc349:http://old-www.cs.dartmouth.edu/~dfk/papers/index-t.htmlscore135doc348:http://old-www.cs.dartmouth.edu/~dfk/papers/index-a.htmlscore135doc347:http://old-www.cs.dartmouth.edu/~dfk/papers/index-c.htmlscore10doc11:http://old-www.cs.dartmouth.edu/~dfk/armada/score4doc9:http://old-www.cs.dartmouth.edu/~dfk/people.htmlscore4doc7:http://old-www.cs.dartmouth.edu/~dfk/teaching.htmlscore3doc206:http://old-www.cs.dartmouth.edu/~dfk/papers/abstracts/deshpande-thesis.htmlscore3doc167:http://old-www.cs.dartmouth.edu/~dfk/papers/abstracts/nanda-thesis.htmlscore3doc18:http://old-www.cs.dartmouth.edu/~dfk/index.html...KEYWORDs:&gt;tinysearchengineQuery:tinysearchengineNodocumentsmatch.-----------------------------------------------KEYWORDs:&gt;TSEQuery:tseNodocumentsmatch.-----------------------------------------------KEYWORDs:&gt;NOTEweLOWERcasethequeryfirstQuery:notewelowercasethequeryfirstNodocumentsmatch.-----------------------------------------------KEYWORDs:&gt;spacesdonotmattterQuery:spacesdonotmattterNodocumentsmatch.-----------------------------------------------KEYWORDs:&gt;non-lettercharactersaredisallowedError:badcharacter'-'inquery.KEYWORDs:&gt;evendigitsasincs50Error:badcharacter'5'inquery.KEYWORDs:&gt;andQuery:andError:'and'cannotbefirstKEYWORDs:&gt;orQuery:orError:'or'cannotbefirstKEYWORDs:&gt;whataboutandQuery:whataboutandError:'and'cannotbelastKEYWORDs:&gt;friendandfoeQuery:friendandfoeNodocumentsmatch.-----------------------------------------------KEYWORDs:&gt;quitQuery:quitNodocumentsmatch.-----------------------------------------------KEYWORDs:&gt;exitQuery:exitMatches1documents(ranked):score3doc3:http://old-www.cs.dartmouth.edu/~dfk/visit-dartmouth.html-----------------------------------------------KEYWORDs:&gt;^D</code></pre></div></div><p>Let’sstudythe<ahref="/engs50/Labs/Lab6/REQUIREMENTS.html">RequirementsSpec</a>fortheQuerier,andrunsomedemos.</p><p>Today’sdemoscriptsarehere:<ahref="/engs50/Notes/querier/script1.txt">script1</a>and<ahref="/engs50/Notes/querier/script2.txt">script2</a>.</p><h2id="fuzz-testing">FuzzTesting</h2><p>Inarecentlecturewetalkedabout<em>unittesting</em>,andthedifferencebetween<em>glass-boxtesting</em>and<em>black-boxtesting</em>.Usually,thesetestsarebasedonacarefullyconstructedseriesoftestcases,devisedtotestallcodesequencesandpushonthe“edgecases”.</p><p>However,suchtestsareonlyasgoodasthetestwriter-whomustlogicallystudythecode(forglass-boxtesting)orthespecs(forblack-boxtesting)tothinkofthesuitabletestcases.It’spossibletheywillmisssomeimportantcases.</p><p>Anothersolution,therefore,is<strong><em>fuzztesting</em></strong>,aformofblack-boxtestinginwhichyoufirethousandsofrandominputsattheprogramtoseehowitreacts.Thechancesoftriggeringanunconsideredtestcaseisfargreaterifyoutryalotofcases!</p><p>Hereisafuzz-testingprogramforour<em>querier</em>.Itgeneratesaseriesofrandomqueriesonstdout,whichitthenpipestothequerieronstdin.Here’sthecoreofthefuzztester:</p><divclass="language-chighlighter-rouge"><divclass="highlight"><preclass="highlight"><code><spanclass="cm">/****************generate_query****************/</span><spanclass="cm">/*generateonerandomqueryandprinttostdout.*pullrandomwordsfromthewordlistandfromthedictionary.*/</span><spanclass="k">static</span><spanclass="kt">void</span><spanclass="nf">generate_query</span><spanclass="p">(</span><spanclass="k">const</span><spanclass="n">wordlist_t</span><spanclass="o">*</span><spanclass="n">wordlist</span><spanclass="p">,</span><spanclass="k">const</span><spanclass="n">wordlist_t</span><spanclass="o">*</span><spanclass="n">dictionary</span><spanclass="p">)</span><spanclass="p">{</span><spanclass="c1">//someparametersthataffectquerygeneration</span><spanclass="k">const</span><spanclass="kt">int</span><spanclass="n">max_words</span><spanclass="o">=</span><spanclass="mi">6</span><spanclass="p">;</span><spanclass="c1">//generate1..max_words</span><spanclass="k">const</span><spanclass="kt">float</span><spanclass="n">or_probability</span><spanclass="o">=</span><spanclass="mi">0</span><spanclass="p">.</span><spanclass="mi">3</span><spanclass="p">;</span><spanclass="c1">//P(ORbetweentwowords)</span><spanclass="k">const</span><spanclass="kt">float</span><spanclass="n">and_probability</span><spanclass="o">=</span><spanclass="mi">0</span><spanclass="p">.</span><spanclass="mi">2</span><spanclass="p">;</span><spanclass="c1">//P(ANDbetweentwowords)</span><spanclass="k">const</span><spanclass="kt">float</span><spanclass="n">dict_probability</span><spanclass="o">=</span><spanclass="mi">0</span><spanclass="p">.</span><spanclass="mi">2</span><spanclass="p">;</span><spanclass="c1">//P(drawfromdictinsteadofwordlist)</span><spanclass="kt">int</span><spanclass="n">qwords</span><spanclass="o">=</span><spanclass="n">random</span><spanclass="p">()</span><spanclass="o">%</span><spanclass="n">max_words</span><spanclass="o">+</span><spanclass="mi">1</span><spanclass="p">;</span><spanclass="c1">//numberofwordsinquery</span><spanclass="k">for</span><spanclass="p">(</span><spanclass="kt">int</span><spanclass="n">qw</span><spanclass="o">=</span><spanclass="mi">0</span><spanclass="p">;</span><spanclass="n">qw</span><spanclass="o">&lt;</span><spanclass="n">qwords</span><spanclass="p">;</span><spanclass="n">qw</span><spanclass="o">++</span><spanclass="p">)</span><spanclass="p">{</span><spanclass="c1">//drawawordeitherdictionaryorwordlist</span><spanclass="k">if</span><spanclass="p">((</span><spanclass="n">random</span><spanclass="p">()</span><spanclass="o">%</span><spanclass="mi">100</span><spanclass="p">)</span><spanclass="o">&lt;</span><spanclass="p">(</span><spanclass="n">dict_probability</span><spanclass="o">*</span><spanclass="mi">100</span><spanclass="p">))</span><spanclass="p">{</span><spanclass="n">printf</span><spanclass="p">(</span><spanclass="s">"%s"</span><spanclass="p">,</span><spanclass="n">dictionary</span><spanclass="o">-&gt;</span><spanclass="n">words</span><spanclass="p">[</span><spanclass="n">random</span><spanclass="p">()</span><spanclass="o">%</span><spanclass="n">dictionary</span><spanclass="o">-&gt;</span><spanclass="n">nwords</span><spanclass="p">]);</span><spanclass="p">}</span><spanclass="k">else</span><spanclass="p">{</span><spanclass="n">printf</span><spanclass="p">(</span><spanclass="s">"%s"</span><spanclass="p">,</span><spanclass="n">wordlist</span><spanclass="o">-&gt;</span><spanclass="n">words</span><spanclass="p">[</span><spanclass="n">random</span><spanclass="p">()</span><spanclass="o">%</span><spanclass="n">wordlist</span><spanclass="o">-&gt;</span><spanclass="n">nwords</span><spanclass="p">]);</span><spanclass="p">}</span><spanclass="c1">//lastword?</span><spanclass="k">if</span><spanclass="p">(</span><spanclass="n">qw</span><spanclass="o">&lt;</span><spanclass="n">qwords</span><spanclass="o">-</span><spanclass="mi">1</span><spanclass="p">)</span><spanclass="p">{</span><spanclass="c1">//whichoperatortoprint?</span><spanclass="kt">int</span><spanclass="n">op</span><spanclass="o">=</span><spanclass="n">random</span><spanclass="p">()</span><spanclass="o">%</span><spanclass="mi">100</span><spanclass="p">;</span><spanclass="k">if</span><spanclass="p">(</span><spanclass="n">op</span><spanclass="o">&lt;</span><spanclass="p">(</span><spanclass="n">and_probability</span><spanclass="o">*</span><spanclass="mi">100</span><spanclass="p">))</span><spanclass="p">{</span><spanclass="n">printf</span><spanclass="p">(</span><spanclass="s">"AND"</span><spanclass="p">);</span><spanclass="p">}</span><spanclass="k">else</span><spanclass="k">if</span><spanclass="p">(</span><spanclass="n">op</span><spanclass="o">&lt;</span><spanclass="p">(</span><spanclass="n">and_probability</span><spanclass="o">*</span><spanclass="mi">100</span><spanclass="o">+</span><spanclass="n">or_probability</span><spanclass="o">*</span><spanclass="mi">100</span><spanclass="p">))</span><spanclass="p">{</span><spanclass="n">printf</span><spanclass="p">(</span><spanclass="s">"OR"</span><spanclass="p">);</span><spanclass="p">}</span><spanclass="p">}</span><spanclass="p">}</span><spanclass="n">printf</span><spanclass="p">(</span><spanclass="s">"</span><spanclass="se">\n</span><spanclass="s">"</span><spanclass="p">);</span><spanclass="p">}</span></code></pre></div></div><p>Withthefollowingsetup,</p><divclass="language-bashhighlighter-rouge"><divclass="highlight"><preclass="highlight"><code><spanclass="nv">$</span><spanclass="nb">cd</span>tse<spanclass="nv">$</span><spanclass="nb">mkdir</span>data/cs50-3<spanclass="nv">$</span>crawler/crawlerhttp://old-www.cs.dartmouth.edu/~cs50/data/cs50-33<spanclass="nv">$</span>indexer/indexerdata/cs50-3data/cs50-index3</code></pre></div></div><p>Andhere’stheoutputof10randomqueries:</p><divclass="language-bashhighlighter-rouge"><divclass="highlight"><preclass="highlight"><code><spanclass="nv">$</span>querier/fuzzqueryusage:querier/fuzzqueryindexFilenumQueriesrandomSeed<spanclass="nv">$</span>querier/fuzzquerydata/cs50-index3100querier/fuzzquery:generating10queriesfrom5586wordscapturedANDdespitepcsORfrontiersactivityawareORrelaytourunixdownloadingORpretriactinepiecescolgateORaspectsORwine-wiseORdirexuncompressedORearlytaxonomyaustrianANDjewelryORmanagesonceforcedodamelocalizationORmarschcomparisonsufferdesiresORworkflowfacilitatedgarthORyangORcardiacANDruslanANDsynthetic</code></pre></div></div><p>Andhere’swhathappenswhenwepipeittoourquerier(outputabbreviatedalittle):</p><divclass="language-plaintexthighlighter-rouge"><divclass="highlight"><preclass="highlight"><code>$querier/fuzzquerydata/cs50-index3100|querier/querierdata/cs50-3data/cs50-index3querier/fuzzquery:generating10queriesfrom5586wordsKEYWORDs:&gt;Query:capturedanddespiteNodocumentsmatch.-----------------------------------------------KEYWORDs:&gt;Query:pcsorfrontiersactivityawareorrelaytourMatches39documents(ranked):score37doc349:http://old-www.cs.dartmouth.edu/~dfk/papers/index-t.htmlscore37doc348:http://old-www.cs.dartmouth.edu/~dfk/papers/index-a.htmlscore37doc347:http://old-www.cs.dartmouth.edu/~dfk/papers/index-c.htmlscore37doc19:http://old-www.cs.dartmouth.edu/~dfk/papers/index.htmlscore2doc53:http://old-www.cs.dartmouth.edu/~dfk/papers/abstracts/oldfield-app-pario.html...-----------------------------------------------KEYWORDs:&gt;Query:unixdownloadingorpreMatches1documents(ranked):score1doc104:http://old-www.cs.dartmouth.edu/~dfk/papers/abstracts/khanna-group.html-----------------------------------------------KEYWORDs:&gt;Error:badcharacter'-'inquery.KEYWORDs:&gt;Query:uncompressedorearlytaxonomyaustrianandjewelryormanagesMatches3documents(ranked):score2doc19:http://old-www.cs.dartmouth.edu/~dfk/papers/index.htmlscore1doc81:http://old-www.cs.dartmouth.edu/~dfk/STARFISH/score1doc67:http://old-www.cs.dartmouth.edu/~dfk/RAPID-Transit.html-----------------------------------------------KEYWORDs:&gt;Query:onceforcedodamelocalizationormarschMatches5documents(ranked):score2doc19:http://old-www.cs.dartmouth.edu/~dfk/papers/index.htmlscore1doc316:http://old-www.cs.dartmouth.edu/~dfk/papers/abstracts/anthony-sith3.htmlscore1doc349:http://old-www.cs.dartmouth.edu/~dfk/papers/index-t.htmlscore1doc348:http://old-www.cs.dartmouth.edu/~dfk/papers/index-a.htmlscore1doc347:http://old-www.cs.dartmouth.edu/~dfk/papers/index-c.html-----------------------------------------------KEYWORDs:&gt;Query:comparisonMatches11documents(ranked):score3doc349:http://old-www.cs.dartmouth.edu/~dfk/papers/index-t.htmlscore3doc348:http://old-www.cs.dartmouth.edu/~dfk/papers/index-a.htmlscore3doc347:http://old-www.cs.dartmouth.edu/~dfk/papers/index-c.html...-----------------------------------------------KEYWORDs:&gt;Query:sufferdesiresorworkflowMatches1documents(ranked):score1doc336:http://old-www.cs.dartmouth.edu/~dfk/papers/abstracts/mare-thesis.html-----------------------------------------------KEYWORDs:&gt;Query:facilitatedMatches2documents(ranked):score1doc260:http://old-www.cs.dartmouth.edu/~dfk/papers/abstracts/chen-fusenet.htmlscore1doc180:http://old-www.cs.dartmouth.edu/~dfk/papers/abstracts/tan-crf-s3.html-----------------------------------------------KEYWORDs:&gt;Query:garthoryangorcardiacandruslanandsyntheticMatches3documents(ranked):score1doc19:http://old-www.cs.dartmouth.edu/~dfk/papers/index.htmlscore1doc90:http://old-www.cs.dartmouth.edu/~dfk/charisma/score1doc9:http://old-www.cs.dartmouth.edu/~dfk/people.html-----------------------------------------------</code></pre></div></div><p>Wecouldgenerateadifferentseriesofrandomqueriesbychangingtherandomseed,andwecanrunalotmorequeries,too!</p><divclass="language-plaintexthighlighter-rouge"><divclass="highlight"><preclass="highlight"><code>$querier/fuzzquerydata/cs50-index310999|querier/querierdata/cs50-3data/cs50-index3&gt;/dev/nullquerier/fuzzquery:generating10queriesfrom5586words$querier/fuzzquerydata/cs50-index310000999|querier/querierdata/cs50-3data/cs50-index3querier/fuzzquery:generating10000queriesfrom5586words</code></pre></div></div><p>Thefuzztesterdoesnottest<em>all</em>aspectsofthequerier;inparticular,itwillnotgeneratesyntacticallyincorrectinputs.Thoseshouldbetestedbyanotherprogram,perhapsanotherfuzztester.Furthermore,itdoesnotverifywhetherthequerieractuallyproducestherightanswers!</p><p>Forregressiontesting,wemightsavethequerieroutputinafile,andthencomparetheoutputofafreshtestrunagainstthesavedresultsfromearlierruns.Ifwehadearlierbelievedthoseresultstobecorrect,thenseeingunchangedoutputwouldpresumablyindicatetheresults(andthusthenewcode)arestillcorrect.</p><h2id="expressions">Expressionsandaccumulators</h2><p>Thinkingaheadtothequerier,let’sthinkabouthowoneevaluatesanexpressioninvolvingoperators.We’llworkwithanarithmeticanalogy.</p><h3id="arithmetic-expressions">Arithmeticexpressions</h3><p>Considerthefollowingarithmeticexpression:</p><divclass="language-chighlighter-rouge"><divclass="highlight"><preclass="highlight"><code><spanclass="n">sum</span><spanclass="o">=</span><spanclass="n">a</span><spanclass="o">+</span><spanclass="n">b</span><spanclass="o">+</span><spanclass="n">c</span><spanclass="o">+</span><spanclass="n">d</span></code></pre></div></div><p>Sinceadditionisa<em>left-associative</em>operator,thismeansthesamethingas</p><divclass="language-chighlighter-rouge"><divclass="highlight"><preclass="highlight"><code><spanclass="n">sum</span><spanclass="o">=</span><spanclass="p">(((</span><spanclass="n">a</span><spanclass="o">+</span><spanclass="n">b</span><spanclass="p">)</span><spanclass="o">+</span><spanclass="n">c</span><spanclass="p">)</span><spanclass="o">+</span><spanclass="n">d</span><spanclass="p">)</span></code></pre></div></div><p>Thismeanswecanscantheexpressionfromlefttoright,accumulatingasumaswego,effectivelylikethis:</p><divclass="language-chighlighter-rouge"><divclass="highlight"><preclass="highlight"><code><spanclass="n">sum</span><spanclass="o">=</span><spanclass="mi">0</span><spanclass="n">sum</span><spanclass="o">=</span><spanclass="n">sum</span><spanclass="o">+</span><spanclass="n">a</span><spanclass="n">sum</span><spanclass="o">=</span><spanclass="n">sum</span><spanclass="o">+</span><spanclass="n">b</span><spanclass="n">sum</span><spanclass="o">=</span><spanclass="n">sum</span><spanclass="o">+</span><spanclass="n">c</span><spanclass="n">sum</span><spanclass="o">=</span><spanclass="n">sum</span><spanclass="o">+</span><spanclass="n">d</span></code></pre></div></div><p>Here,the<codeclass="language-plaintexthighlighter-rouge">sum</code>actsasan<em>accumulator</em>.(Indeed,manyearlyhardwarearchitecturesincludeanexplicitregistercalledan‘accumulator’.)</p><p>Weoftenseethisapproachgeneralizedincode:</p><divclass="language-chighlighter-rouge"><divclass="highlight"><preclass="highlight"><code><spanclass="kt">int</span><spanclass="n">n</span><spanclass="o">=</span><spanclass="mi">5</span><spanclass="p">;</span><spanclass="kt">int</span><spanclass="n">array</span><spanclass="p">[</span><spanclass="n">n</span><spanclass="p">]</span><spanclass="o">=</span><spanclass="p">{</span><spanclass="mi">42</span><spanclass="p">,</span><spanclass="mi">34</span><spanclass="p">,</span><spanclass="mi">12</span><spanclass="p">,</span><spanclass="o">-</span><spanclass="mi">5</span><spanclass="p">,</span><spanclass="mi">19</span><spanclass="p">};</span><spanclass="kt">int</span><spanclass="n">sum</span><spanclass="o">=</span><spanclass="mi">0</span><spanclass="p">;</span><spanclass="k">for</span><spanclass="p">(</span><spanclass="kt">int</span><spanclass="n">i</span><spanclass="o">=</span><spanclass="mi">0</span><spanclass="p">;</span><spanclass="n">i</span><spanclass="o">&lt;</span><spanclass="n">n</span><spanclass="p">;</span><spanclass="n">i</span><spanclass="o">++</span><spanclass="p">)</span><spanclass="n">sum</span><spanclass="o">+=</span><spanclass="n">array</span><spanclass="p">[</span><spanclass="n">i</span><spanclass="p">];</span><spanclass="n">printf</span><spanclass="p">(</span><spanclass="s">"sum=%d;average=%f</span><spanclass="se">\n</span><spanclass="s">"</span><spanclass="p">,</span><spanclass="n">sum</span><spanclass="p">,</span><spanclass="p">(</span><spanclass="kt">float</span><spanclass="p">)</span><spanclass="n">sum</span><spanclass="o">/</span><spanclass="n">n</span><spanclass="p">);</span></code></pre></div></div><h3id="precedence">Precedence</h3><p>Whatifyouhaveamixtureofoperators,withprecedence?</p><p>Considerthefollowingarithmeticexpression:</p><divclass="language-chighlighter-rouge"><divclass="highlight"><preclass="highlight"><code><spanclass="n">sum</span><spanclass="o">=</span><spanclass="n">a</span><spanclass="o">+</span><spanclass="n">b</span><spanclass="o">*</span><spanclass="n">c</span><spanclass="o">+</span><spanclass="n">d</span></code></pre></div></div><p>Bothadditionandmultiplicationare<em>left-associative</em>operators,butmultiplicationhasprecedenceoveraddition.Thus,weimplicitlyrewritetheaboveexpressionasfollows:</p><divclass="language-chighlighter-rouge"><divclass="highlight"><preclass="highlight"><code><spanclass="n">sum</span><spanclass="o">=</span><spanclass="p">((</span><spanclass="n">a</span><spanclass="o">+</span><spanclass="p">(</span><spanclass="n">b</span><spanclass="o">*</span><spanclass="n">c</span><spanclass="p">))</span><spanclass="o">+</span><spanclass="n">d</span><spanclass="p">)</span></code></pre></div></div><p>or,insequence,</p><divclass="language-chighlighter-rouge"><divclass="highlight"><preclass="highlight"><code><spanclass="n">sum</span><spanclass="o">=</span><spanclass="mi">0</span><spanclass="n">sum</span><spanclass="o">=</span><spanclass="n">sum</span><spanclass="o">+</span><spanclass="n">a</span><spanclass="n">prod</span><spanclass="o">=</span><spanclass="mi">1</span><spanclass="n">prod</span><spanclass="o">=</span><spanclass="n">prod</span><spanclass="o">*</span><spanclass="n">b</span><spanclass="n">prod</span><spanclass="o">=</span><spanclass="n">prod</span><spanclass="o">*</span><spanclass="n">c</span><spanclass="n">sum</span><spanclass="o">=</span><spanclass="n">sum</span><spanclass="o">+</span><spanclass="n">prod</span><spanclass="n">sum</span><spanclass="o">=</span><spanclass="n">sum</span><spanclass="o">+</span><spanclass="n">d</span></code></pre></div></div><p>Noticehowwe‘stepaside’fromthesumforamomentwhilewecomputetheproduct<codeclass="language-plaintexthighlighter-rouge">b*c</code>…usinganexactlyanalogousprocess.<codeclass="language-plaintexthighlighter-rouge">prod</code>isanaccumulatorfortheproduct;itisinitializedtothe<em>multiplicativeidentity</em>(1)insteadofthe<em>additiveidentity</em>(0),forreasonsIhopeareobvious.Butthenwejustmultiplyineachofthesuccessiveitems,oneatatime.</p><p>Thisgeneralizestolongerexpressionslike</p><divclass="language-chighlighter-rouge"><divclass="highlight"><preclass="highlight"><code><spanclass="n">sum</span><spanclass="o">=</span><spanclass="n">a</span><spanclass="o">*</span><spanclass="n">b</span><spanclass="o">+</span><spanclass="n">c</span><spanclass="o">*</span><spanclass="n">d</span><spanclass="o">*</span><spanclass="n">e</span><spanclass="o">+</span><spanclass="n">f</span><spanclass="o">+</span><spanclass="n">g</span><spanclass="o">*</span><spanclass="n">h</span><spanclass="o">*</span><spanclass="n">i</span></code></pre></div></div><p>becomes</p><divclass="language-chighlighter-rouge"><divclass="highlight"><preclass="highlight"><code><spanclass="n">sum</span><spanclass="o">=</span><spanclass="mi">0</span><spanclass="n">prod</span><spanclass="o">=</span><spanclass="mi">1</span><spanclass="n">prod</span><spanclass="o">=</span><spanclass="n">prod</span><spanclass="o">*</span><spanclass="n">a</span><spanclass="n">prod</span><spanclass="o">=</span><spanclass="n">prod</span><spanclass="o">*</span><spanclass="n">b</span><spanclass="n">sum</span><spanclass="o">=</span><spanclass="n">sum</span><spanclass="o">+</span><spanclass="n">prod</span><spanclass="n">prod</span><spanclass="o">=</span><spanclass="mi">1</span><spanclass="n">prod</span><spanclass="o">=</span><spanclass="n">prod</span><spanclass="o">*</span><spanclass="n">c</span><spanclass="n">prod</span><spanclass="o">=</span><spanclass="n">prod</span><spanclass="o">*</span><spanclass="n">d</span><spanclass="n">prod</span><spanclass="o">=</span><spanclass="n">prod</span><spanclass="o">*</span><spanclass="n">e</span><spanclass="n">sum</span><spanclass="o">=</span><spanclass="n">sum</span><spanclass="o">+</span><spanclass="n">prod</span><spanclass="n">prod</span><spanclass="o">=</span><spanclass="mi">1</span><spanclass="n">prod</span><spanclass="o">=</span><spanclass="n">prod</span><spanclass="o">*</span><spanclass="n">f</span><spanclass="n">sum</span><spanclass="o">=</span><spanclass="n">sum</span><spanclass="o">+</span><spanclass="n">prod</span><spanclass="n">prod</span><spanclass="o">=</span><spanclass="mi">1</span><spanclass="n">prod</span><spanclass="o">=</span><spanclass="n">prod</span><spanclass="o">*</span><spanclass="n">g</span><spanclass="n">prod</span><spanclass="o">=</span><spanclass="n">prod</span><spanclass="o">*</span><spanclass="n">h</span><spanclass="n">prod</span><spanclass="o">=</span><spanclass="n">prod</span><spanclass="o">*</span><spanclass="n">i</span><spanclass="n">sum</span><spanclass="o">=</span><spanclass="n">sum</span><spanclass="o">+</span><spanclass="n">prod</span></code></pre></div></div><p>Let’saddsomeindentationtomakethisalittleeasiertoread:</p><divclass="language-chighlighter-rouge"><divclass="highlight"><preclass="highlight"><code><spanclass="n">sum</span><spanclass="o">=</span><spanclass="mi">0</span><spanclass="n">prod</span><spanclass="o">=</span><spanclass="mi">1</span><spanclass="n">prod</span><spanclass="o">=</span><spanclass="n">prod</span><spanclass="o">*</span><spanclass="n">a</span><spanclass="n">prod</span><spanclass="o">=</span><spanclass="n">prod</span><spanclass="o">*</span><spanclass="n">b</span><spanclass="n">sum</span><spanclass="o">=</span><spanclass="n">sum</span><spanclass="o">+</span><spanclass="n">prod</span><spanclass="n">prod</span><spanclass="o">=</span><spanclass="mi">1</span><spanclass="n">prod</span><spanclass="o">=</span><spanclass="n">prod</span><spanclass="o">*</span><spanclass="n">c</span><spanclass="n">prod</span><spanclass="o">=</span><spanclass="n">prod</span><spanclass="o">*</span><spanclass="n">d</span><spanclass="n">prod</span><spanclass="o">=</span><spanclass="n">prod</span><spanclass="o">*</span><spanclass="n">e</span><spanclass="n">sum</span><spanclass="o">=</span><spanclass="n">sum</span><spanclass="o">+</span><spanclass="n">prod</span><spanclass="n">prod</span><spanclass="o">=</span><spanclass="mi">1</span><spanclass="n">prod</span><spanclass="o">=</span><spanclass="n">prod</span><spanclass="o">*</span><spanclass="n">f</span><spanclass="n">sum</span><spanclass="o">=</span><spanclass="n">sum</span><spanclass="o">+</span><spanclass="n">prod</span><spanclass="n">prod</span><spanclass="o">=</span><spanclass="mi">1</span><spanclass="n">prod</span><spanclass="o">=</span><spanclass="n">prod</span><spanclass="o">*</span><spanclass="n">g</span><spanclass="n">prod</span><spanclass="o">=</span><spanclass="n">prod</span><spanclass="o">*</span><spanclass="n">h</span><spanclass="n">prod</span><spanclass="o">=</span><spanclass="n">prod</span><spanclass="o">*</span><spanclass="n">i</span><spanclass="n">sum</span><spanclass="o">=</span><spanclass="n">sum</span><spanclass="o">+</span><spanclass="n">prod</span></code></pre></div></div><p>NoticewhatIdidwith<codeclass="language-plaintexthighlighter-rouge">f</code>,andthatI<em>neveraddanythingto<codeclass="language-plaintexthighlighter-rouge">sum</code>otherthan<codeclass="language-plaintexthighlighter-rouge">prod</code></em>.</p><p>Thisstructureshouldgiveyouahintabouthowyoumightwritecodetoevaluatesuchexpressions…ifyouhavea<codeclass="language-plaintexthighlighter-rouge">product</code>functiontoscantheexpressionlefttorightfromagivenstartingpoint,accumulatingaproductofindividualitemsuntilitseesa<codeclass="language-plaintexthighlighter-rouge">+</code>ortheendoftheexpression,youcanthenwriteafunction<codeclass="language-plaintexthighlighter-rouge">sum</code>thatscanstheexpressionlefttorightfromthestart,accumulatingasumofproductsbycalling<codeclass="language-plaintexthighlighter-rouge">product</code>atthestartandaftereach<codeclass="language-plaintexthighlighter-rouge">+</code>.</p><h2id="activity">Activity</h2><p>Intoday’s<ahref="activity.html">activity</a>yourgroupwilldiscusshowtheaboveideasrelateto<codeclass="language-plaintexthighlighter-rouge">and</code>an<codeclass="language-plaintexthighlighter-rouge">or</code>operatorsinaqueryexpression.</p></div></article></div></div><footerclass="site-footer"><divclass="wrapper"><h2class="footer-heading">Engs50(CS50)--DartmouthCollege</h2><p><fontsize=-1>ThisversionofthecourseisbaseduponthosedesignedbyProfessorsPalmer,Kotz,Zhou,Campbell,andBalkcom.Iamdeeplyindebtedtotheseoutstandingeducators.--<ahref="https://engineering.dartmouth.edu/people/faculty/stephen-taylor/">StephenTaylor</a></font></p><p><small>Thispagewaslastupdatedon<strong>2023-01-05</strong>at<strong>11:31</strong>.</small></p></div></footer></body></html>
