https://thayer.github.io/engs50/Notes/git/
2
53990
<!DOCTYPEhtml><html><head><metacharset="utf-8"><metahttp-equiv="X-UA-Compatible"content="IE=edge"><metaname="viewport"content="width=device-width,initial-scale=1"><title>Thegitsourcecodemanagementsystem</title><metaname="description"content="InEngs50youwilllearnhowtodesign&buildlarge,reliable,maintainable,andunderstandablesoftwaresystems.IntheprocessyouwilllearntoprograminCwithUnixdevelopmenttools."><linkrel="shortcuticon"href="/engs50/50.png"/><linkrel="stylesheet"href="/engs50/css/main.css"><linkrel="canonical"href="/engs50/Notes/git/"></head><body><headerclass="site-header"><aclass="site-title"href="/engs50/"><imgwidth=48align=centersrc="/engs50/50.png"alt="icon">Engs50(CS50)</a><navclass="site-nav">[<ahref="/engs50/Labs/">Labs</a>][<ahref="/engs50/Notes/">Notes</a>][<ahref="/engs50/Reading/">Reading</a>][<ahref="/engs50/Resources/">Resources</a>][<ahref="/engs50/Examples/">Examples</a>]</nav></header><divclass="page-content"><divclass="wrapper"><articleclass="post"><headerclass="post-header"><h1class="post-title">Thegitsourcecodemanagementsystem</h1></header><divclass="post-content"><h3id="goals">Goals</h3><ul><li>exploreversioncontrol</li><li>learntouse<strong>Git</strong></li><li>learntouse<strong>Gitlab</strong></li></ul><!--Today'sTerminal[script](/engs50/Notes/git/script.txt)showssomeoftheliveexamples-thoughonlytheTerminalsideofthedemo.--><h2id="version-control-systems">Versioncontrolsystems</h2><p>Uptothispointinyoursoftwareengineeringcareer,manyofyourprogrammingprojectswillhavebeensmall,individualendeavors.Assoftwarematuresitoftengrowsincomplexity,asbugsarefixed,featuresareadded,andthenumberofcontributingdevelopersincreases.Managingthiscomplexitybecomesamammothtaskthatcrushesmanyfledglingstartups.Asimilarfateisinstoreforprojectsthatlackreliableversioncontrol(<em>wereceivedabugreportonversion1.1…whatWASinversion1.1?</em>).Theabilitytoeasilybackoutchanges,ortoacceptonlyasubsetofagroupofchanges,especiallyinateamenvironment,isalsoessentialanditencouragesexperimentation.Anothersoftwaredevelopmentpracticethatversioncontrolaidsis<em>codereviews:</em>proposedchangesmaybeexaminedbeforebeingincorporatedintothemastersourcecoderepository.ToolslikeGitgiveprogrammerstheabilitytobranchawayfromthemaindevelopmenttracktotryoutanewfeatureordebugaquickfix,andlatermergeinthechangeslaterorabandonthementirely.Finally,VersionControlSystemsalsoserveasaformofbackup…justincase.</p><p>Somesoloprogrammersmightfeeltheydon’tneedversioncontrol.Thisisshortsighted…asthesolepersondoingthework,withnosupportorbackupteam,thesefolksneedversioncontrolevenmore!</p><p>Versioncontrolsystems(VCS)comeinmanyflavors.Youmayhaveheardofsomeoftheopen-sourceincarnations,suchas<ahref="http://cvs.nongnu.org">ConcurrentVersionsSystem</a>(<codeclass="language-plaintexthighlighter-rouge">cvs</code>),<ahref="http://mercurial.selenic.com">Mercurial</a>(<codeclass="language-plaintexthighlighter-rouge">hg</code>),or<ahref="http://subversion.apache.org">Subversion</a>(<codeclass="language-plaintexthighlighter-rouge">svn</code>).Whilethesesystemsdifferinimplementation,theyallprovidemethodstomanageresources,suchastracking,reverting,andmergingchanges.<strong>Git</strong>isanopen-sourcedistributedversioncontrolsystem(DVCS).</p><p>Anytext-basedfilescanbemanagedbyaVCS.Sourcecode,configurationfiles,SQLscripts,testscripts,documentationwrittenusingLaTeXorMarkdown,XML,webpages,andmoreassetsareeasilymaintainedinaVCS.(IstorethiswebsiteinGitlabusinggit!)Filesthatarenothuman-readable(likeWordorPDFfiles,orimages)canbeproblematic,butcansometimesbestoredinaVCS,withoutthebenefitofsomeofthetext-basedtools.</p><p>TherearetwoprimarygroupsofVersionControlSystems:</p><ul><li>centralized,suchasSubversionandClearCase,whichgenerallyrequireanetworkconnectionforoperation,and</li><li>decentralized,suchasMercurialandgit,whichdonotrequireanetworkconnection.Infact,thesesystems<em>always</em>haveacompletelocalversionoftherepository.</li></ul><p>Wewillbeusing<ahref="http://git-scm.com">Git</a>.TheGitprojectwasoriginallydevelopedby(and<ahref="http://en.wikipedia.org/wiki/Git_(slang)">somewhatnamedafter</a>)LinusTorvaldstomanagetheLinuxkernel(15millionLOC).Manyopen-sourceandcommercialprojectscurrentlyrelyonGit,includingtheLinuxkernel,Google’sAndroidOS,andtheMacOSXpackagemanagerHomebrew.</p><p>WewillbeusingGitontheCSsystemsmachinesusingaCS-managedGitservercalledGitlab.WewillnotcoverinstallationandsetupofGitonyourpersonallaptoportheuseofthird-partyGit-relatedapplicationssuchas<ahref="https://github.com">Github</a>,<ahref="https://bitbucket.org">BitBucket</a>,or<ahref="https://www.sourcetreeapp.com/">SourceTree</a>.Theenterprisingstudentmayexplorethese(andotheradvanced)topicsontheirown.Youwillfindseveralfreebooksandinteractivetutorialsonthe<ahref="/engs50/Resources">resourcespage</a>.Iparticularlyrecommend<em>ProGit</em>byScottChaconandBenStraub(availablefree<ahref="http://git-scm.com/book/en/v2">online</a>).</p><h2id="why-version-control">WhyVersionControl</h2><p>Imaginethefollowingscenario:Youhaveatermpapertowrite.So,beingadiligentstudent,youstartearlybywritingaroughdraft,savedas<codeclass="language-plaintexthighlighter-rouge">paper.doc</code>.Asyouexploreyourtopic,youthink,“IlikewhatIhave,butwhatifIadded…”Youdonotwanttoloseyourcurrentprogress,soyoucopyyourpapertoanewfile<codeclass="language-plaintexthighlighter-rouge">paper2.doc</code>andbeginexploringnewideas.Asideascomeandgo,youcontinuetoreplicateandrenameyourfiles.Youreachthefinalweekofclasseswith5differentdocuments,eachcontainingsomethingyouwanttokeep.Youcreateanewfile,named<codeclass="language-plaintexthighlighter-rouge">final.doc</code>,thatwillcontainallofthedisparatepiecesofthoughtlinkedtogether.Beforethedeadline,yourealizeyouwanttoreworktheintro,andthuscreate<codeclass="language-plaintexthighlighter-rouge">final2.doc</code>.Intheend,yousubmitsomethingthatlookslike<codeclass="language-plaintexthighlighter-rouge">final2-good-final.doc</code>.Nowimagineyouhadtowritethispapertogetherwithothers?</p><p>Versioncontrolsystemsaredesignedtoalleviatethehardshipsofmanagingresources,likesourcecodefilesortermpapers.WhenusingaVCS,filesaretrackedsothatanychangescanberecorded.Inthesimpleexampleabove,youendedupwithmultiplefiles,somelikelysharinglargeportionsofthesametext.InsomeVCS,storagespaceissavedbyonlysavingchanges,or“deltas”,tofiles.Thesechangescanbeloggedandtimestamped,sothatgoingbacktotheversionlastTuesdaybefore9PMwouldbeveryeasy.Inthepreviousexample,youwantedtocombinepartsofmultiplefiles.Thisconceptisknownas<em>merging</em>.Inadditiontotrackingfiles,andallowingeasyreversion,VCSoftenhavecapabilitiesforeasymerging.</p><p>Whencollaboratingwithmultipleusers,VCScomeintwovarieties:client-serveranddistributed.Intheclient-servermodel,thecentralrepositoryissharedamongstallusers.Heretermslike“checkout”and“lock”comeintoplay.Whenauserwantstoeditafile,theycheckoutthatfile.Thislocksthefilefrombeingeditedbyanyotherusersatthesametime.SomeVCSallow“stealing”offilesforurgentorprioritychanges,butingeneralifauserhascontrol,thennooneelsecanhavethatfileuntiltheycheckitin.Acommoncomplaintwithclient-serversystemsistheirbeingslow,becauseeveryoperationmustcommunicatewiththecentralserveranditisnotgenerallysafeformultipleuserstomodifythesamefiles.CVSandSVNareexamplesoftheclient-servermodel.Indistributedversion-controlsystems,eachusermaintainstheirownlocalrepositoryandchangesaresharedperiodicallyamongstallotherusers.Mergeconflictscanarisewhenmultipleusersmodifythesamefile,andmanyVCSprovideadvancedfeaturestosimplifythisprocess.MercurialandGitareamongthemorepopulardistributedversioncontrolsystems,bothknownfortheirspeedandflexibility.</p><h2id="git-configuration">GitConfiguration</h2><p>BeforeyoucanstartusingGit,youwillneedtoconfigureyourdevelopmentenvironment.Gitstoresenvironmentsettingsinthreedifferentfiles:</p><ul><li><codeclass="language-plaintexthighlighter-rouge">/etc/gitconfig</code>—containssettingsforallusersonasystem</li><li><codeclass="language-plaintexthighlighter-rouge">~/.gitconfig</code>—containsuser-specificsettings</li><li><codeclass="language-plaintexthighlighter-rouge">project/.git/config</code>—containsproject-specificsettings</li></ul><p>Projectsettingsoverrideusersettings,whichinturnoverridesystemsettings.Therearemanyconfigurationoptions,butataminimumyouneedtotellGitwhoyouare(yourname)andhowtocontactyou(youremail).Althoughyoucaneditthosefileswithaneditor,Gitprovidesacommand<codeclass="language-plaintexthighlighter-rouge">config</code>forsettingcommonparameters,asshownbelow.HereIalsosetmypreferrededitorto<codeclass="language-plaintexthighlighter-rouge">emacs</code>.</p><divclass="language-bashhighlighter-rouge"><divclass="highlight"><preclass="highlight"><code><spanclass="o">[</span>kotz@flume~]<spanclass="nv">$</span>gitconfig<spanclass="nt">--global</span>user.name<spanclass="s2">"DavidKotz"</span><spanclass="o">[</span>kotz@flume~]<spanclass="nv">$</span>gitconfig<spanclass="nt">--global</span>user.email<spanclass="s2">"kotz@cs.dartmouth.edu"</span><spanclass="o">[</span>kotz@flume~]<spanclass="nv">$</span>gitconfig<spanclass="nt">--global</span>core.editoremacs<spanclass="c">#orvim,BBedit,...</span><spanclass="o">[</span>kotz@flume~]<spanclass="nv">$</span>gitconfig<spanclass="nt">--global</span>color.ui<spanclass="nb">true</span><spanclass="c">#ifyoulikecolors</span><spanclass="o">[</span>kotz@flume~]<spanclass="nv">$</span>gitconfig<spanclass="nt">--global</span>push.defaultsimple</code></pre></div></div><p>Youcanviewyourcurrentsettingswiththe<codeclass="language-plaintexthighlighter-rouge">--list</code>option.Thelasttwooptionsmaybeusefulifyouwantcertaincommandstocolortheiroutput.</p><divclass="language-bashhighlighter-rouge"><divclass="highlight"><preclass="highlight"><code><spanclass="o">[</span>kotz@flume~]<spanclass="nv">$</span>gitconfig<spanclass="nt">--list</span>user.name<spanclass="o">=</span>DavidKotzuser.email<spanclass="o">=</span>kotz@cs.dartmouth.educore.editor<spanclass="o">=</span>emacscolor.ui<spanclass="o">=</span><spanclass="nb">true</span>push.default<spanclass="o">=</span>simple<spanclass="o">[</span>kotz@flume~]<spanclass="nv">$</span></code></pre></div></div><p>Asyoucansee,the<codeclass="language-plaintexthighlighter-rouge">--global</code>optionwritesyouruserspecificsettingsto<codeclass="language-plaintexthighlighter-rouge">~/.gitconfig</code>.</p><divclass="language-bashhighlighter-rouge"><divclass="highlight"><preclass="highlight"><code><spanclass="o">[</span>kotz@flume~]<spanclass="nv">$</span><spanclass="nb">cat</span>~/.gitconfig<spanclass="o">[</span>user]name<spanclass="o">=</span>DavidKotzemail<spanclass="o">=</span>kotz@cs.dartmouth.edu<spanclass="o">[</span>core]editor<spanclass="o">=</span>emacs<spanclass="o">[</span>color]ui<spanclass="o">=</span><spanclass="nb">true</span><spanclass="o">[</span>kotz@flume~]<spanclass="nv">$</span></code></pre></div></div><p>Ifyouwanttodigfurther,aself-documenting<codeclass="language-plaintexthighlighter-rouge">.gitconfig</code>startingpointmaybefound<ahref="https://gist.github.com/rab/4067067">here</a>.</p><h2id="gitting-help">GittingHelp</h2><p>Youcanalwaysgethelp:</p><divclass="language-bashhighlighter-rouge"><divclass="highlight"><preclass="highlight"><code><spanclass="o">[</span>kotz@flume~]<spanclass="nv">$</span>mangit<spanclass="o">[</span>kotz@flume~]<spanclass="nv">$</span>git<spanclass="nb">help</span>&lt;<spanclass="nb">command</span><spanclass="o">&gt;</span></code></pre></div></div><p>andtherearemanytutorialsandreferencesontheInternet;seeour<ahref="/engs50/Resources#git">GitResources</a>page.</p><h2id="creating-a-repository">Creatingarepository</h2><p>A<em>repository</em>,called<em>repo</em>forshort,isadatastructurethatcontainsalloftheinformationneededtomanageaproject.Thisoftenincludestheprojectfilesandresourcesthemselves,aswellasanymeta-datausedbytheVCStomanagethem.Let’sseehowtocreateaGitrepo.</p><h3id="create-a-new-empty-local-repository">createanew(empty)localrepository</h3><p>Youalwaysneedalocalrepositorytoworkwithgit.Whenstartinganewprojectfromthebeginning,youcaneithercreatearepoandfillituporcreatearepoinanexistingdirectorythatalreadycontainsfiles.</p><divclass="language-bashhighlighter-rouge"><divclass="highlight"><preclass="highlight"><code><spanclass="o">[</span>kotz@flume~]<spanclass="nv">$</span><spanclass="nb">cd</span>cs50/labs<spanclass="o">[</span>kotz@flume~/cs50/labs]<spanclass="nv">$</span><spanclass="nb">mkdir</span>labx<spanclass="o">[</span>kotz@flume~/cs50/labs]<spanclass="nv">$</span><spanclass="nb">cd</span>labx<spanclass="o">[</span>kotz@flume~/cs50/labs/labx]<spanclass="nv">$</span>gitinitInitializedemptyGitrepository<spanclass="k">in</span>/net/nusers/kotz/cs50/labs/labx/.git/<spanclass="o">[</span>kotz@flume~/cs50/labs/labx]<spanclass="nv">$</span><spanclass="nb">ls</span><spanclass="nt">-a</span>./../.git/<spanclass="o">[</span>kotz@flume~/cs50/labs/labx]<spanclass="nv">$</span></code></pre></div></div><p>NoticethatGitcreatedahiddendirectory<codeclass="language-plaintexthighlighter-rouge">.git</code>-youshouldnotmesswithanyofitscontents.</p><h3id="create-a-repository-in-an-existing-development-directory">createarepositoryinanexistingdevelopmentdirectory</h3><p>SupposeyouwanttobeginusingaVCSafteraprojectalreadyhadalotoffilesinanexistingdirectorytree.</p><divclass="language-bashhighlighter-rouge"><divclass="highlight"><preclass="highlight"><code><spanclass="o">[</span>kotz@flume~]<spanclass="nv">$</span><spanclass="nb">cd</span>cs50/labs/tree6<spanclass="o">[</span>kotz@flume~/cs50/labs/tree6]<spanclass="nv">$</span>gitinit<spanclass="c">#initializetherepo</span>InitializedemptyGitrepository<spanclass="k">in</span>/net/nusers/kotz/cs50/labs/tree6/.git/<spanclass="o">[</span>kotz@flume~/cs50/labs/tree6]<spanclass="nv">$</span>gitadd<spanclass="nb">.</span><spanclass="c">#recursivelyaddthecurrentdirectory</span><spanclass="o">[</span>kotz@flume~/cs50/labs/tree6]<spanclass="nv">$</span>gitstatus<spanclass="c">#printcurrentstatus</span>OnbranchmasterInitialcommitChangestobecommitted:<spanclass="o">(</span>use<spanclass="s2">"gitrm--cached&lt;file&gt;..."</span>tounstage<spanclass="o">)</span>newfile:Makefilenewfile:tree.cnewfile:tree.hnewfile:treetest.c<spanclass="o">[</span>kotz@flume~/cs50/labs/tree6]<spanclass="nv">$</span>gitcommit<spanclass="nt">-m</span><spanclass="s2">"Initialcommitoftreecode"</span><spanclass="o">[</span>master<spanclass="o">(</span>root-commit<spanclass="o">)</span>ef37181]Initialcommitoftreecode4fileschanged,285insertions<spanclass="o">(</span>+<spanclass="o">)</span>createmode100644Makefilecreatemode100644tree.ccreatemode100644tree.hcreatemode100644treetest.c<spanclass="o">[</span>kotz@flume~/cs50/labs/tree6]<spanclass="nv">$</span>gitstatus<spanclass="c">#printcurrentstatus</span>Onbranchmasternothingtocommit,workingdirectoryclean<spanclass="o">[</span>kotz@flume~/cs50/labs/tree6]<spanclass="nv">$</span>git<spanclass="nt">--no-pager</span>log<spanclass="nt">--oneline</span><spanclass="nt">--decorate</span><spanclass="nt">--graph</span><spanclass="nt">--all</span><spanclass="c">#pretty-printthehistoryofcommits</span><spanclass="k">*</span>ef37181<spanclass="o">(</span>HEAD-&gt;master<spanclass="o">)</span>Initialcommitoftreecode<spanclass="o">[</span>kotz@flume~/cs50/labs/tree6]<spanclass="nv">$</span></code></pre></div></div><h2id="files-in-git">Filesingit</h2><p>gittreatsallcontentasbeinginoneofthreestates:</p><ul><li>ignored-gitneverevenlooksatit</li><li>untracked-gitreportsitspresencebutdoesn’ttrackitschanges</li><li>tracked-gittrackseverythingthathappenstoit</li></ul><p>Contentthatisbeingtrackedisalwaysinoneoffourstates:</p><ul><li>changed</li><li>staged</li><li>committed</li><li>pushed</li></ul><h2id="workflow">Workflow</h2><p><imgsrc="/engs50/Notes/git/git-states.png"alt="gitstates"/></p><p>GitworkflowfigurefromJasonTaylor<em>GitComplete</em>.</p><p>Thegeneralworkflowingitisto(1)add/modifyfiles,(2)stagethechanges,(3)committhosestagedchangestotherepo,andsometimes(4)pushthechangestoaremoterepository.Filesthatarenewlycreatedarereferredtoas“untracked”untiltheyareaddedtoGit.Whenfilesaddedtogitarethenchangedtheymustbestagedbeforetheyarecommitted.Youadd/modifyfilesinyour“workingdirectory.”Gitstagesfilesbyrecordingchangesinaspecialfile,oftencalledthe“index”or“stagingarea.”WhenyoucommityourchangesthestagedchangesbecomepermanentlyrecordedintheGitrepository.</p><h3id="checking-git-status">Checkinggitstatus</h3><p>Attimesduringyourdevelopment,itmaybehelpfultodeterminethestatus(untracked,modified,staged,committed,etc.)ofthefileswithinyourdirectoryandrepo.Asshownbelow,nothinghasbeenadded,staged,orcommittedtotherepository.Youcancheckthecurrentstatewiththe<codeclass="language-plaintexthighlighter-rouge">gitstatus</code>command.</p><divclass="language-bashhighlighter-rouge"><divclass="highlight"><preclass="highlight"><code><spanclass="o">[</span>kotz@flume~/cs50/labs/tree6]<spanclass="nv">$</span>gitstatusOnbranchmasternothingtocommit,workingdirectoryclean<spanclass="o">[</span>kotz@flume~/cs50/labs/tree6]<spanclass="nv">$</span></code></pre></div></div><p>Thestatuscommandwilloftengiveyouhints;Watchforthem-thesetipscanbeveryhelpful.</p><h3id="staging-files">StagingFiles</h3><p>Tomovefilesfromyourworkingdirectorytothestagingarea,youusethe<codeclass="language-plaintexthighlighter-rouge">gitadd</code>command.Belowwecreatea<codeclass="language-plaintexthighlighter-rouge">README.md</code>(asinallgoodprojects)andstageit.The<codeclass="language-plaintexthighlighter-rouge">gitstatus</code>commandshowsthefilehasbeenstaged,accordingtothe“Changestobecommitted”heading.</p><divclass="language-bashhighlighter-rouge"><divclass="highlight"><preclass="highlight"><code><spanclass="o">[</span>kotz@flume~/cs50/labs/tree6]<spanclass="nv">$</span><spanclass="nb">cat</span><spanclass="o">&gt;</span>README.md<spanclass="c">#Binary-treedemocode</span><spanclass="c">##Version6:usefunctionpointersandaddtree_print()</span><spanclass="k">*</span>demonstratesuseof<spanclass="k">function</span>pointers<spanclass="k">*</span>addstree_print<spanclass="o">()</span><spanclass="k">function</span><spanclass="k">*</span>hintsathowonemightsupporttree_delete<spanclass="o">()</span><spanclass="k">function</span><spanclass="o">[</span>kotz@flume~/cs50/labs/tree6]<spanclass="nv">$</span><spanclass="nb">ls</span>MakefileREADME.mdtree.ctree.htreetest.c<spanclass="o">[</span>kotz@flume~/cs50/labs/tree6]<spanclass="nv">$</span>gitstatusOnbranchmasterUntrackedfiles:<spanclass="o">(</span>use<spanclass="s2">"gitadd&lt;file&gt;..."</span>toinclude<spanclass="k">in</span>whatwillbecommitted<spanclass="o">)</span>README.mdnothingaddedtocommitbutuntrackedfilespresent<spanclass="o">(</span>use<spanclass="s2">"gitadd"</span>totrack<spanclass="o">)</span><spanclass="o">[</span>kotz@flume~/cs50/labs/tree6]<spanclass="nv">$</span>gitaddREADME.md<spanclass="o">[</span>kotz@flume~/cs50/labs/tree6]<spanclass="nv">$</span>gitstatusOnbranchmasterChangestobecommitted:<spanclass="o">(</span>use<spanclass="s2">"gitresetHEAD&lt;file&gt;..."</span>tounstage<spanclass="o">)</span>newfile:README.md<spanclass="o">[</span>kotz@flume~/cs50/labs/tree6]<spanclass="nv">$</span>gitcommit<spanclass="nt">-m</span><spanclass="s2">"AddedREADME"</span><spanclass="o">[</span>master330e2e1]AddedREADME1filechanged,5insertions<spanclass="o">(</span>+<spanclass="o">)</span>createmode100644README.md<spanclass="o">[</span>kotz@flume~/cs50/labs/tree6]<spanclass="err">$</span></code></pre></div></div><p><strong>Hint:</strong>Ifyouhaveseveralnew,modified,ordeletedfilesto<codeclass="language-plaintexthighlighter-rouge">gitadd</code>,youcanuse<codeclass="language-plaintexthighlighter-rouge">gitadd--all</code></p><blockquote><p>NoticethatIused<codeclass="language-plaintexthighlighter-rouge">README.md</code>ratherthan<codeclass="language-plaintexthighlighter-rouge">README</code>above.Afilewithextension<codeclass="language-plaintexthighlighter-rouge">.md</code>isassumedtobeatextfileinMarkdownsyntax,whichprovidesverysimple(andreadable)markupforheadings,lists,italics,bold,andcodesnippets.(ThiscoursewebsiteiswritteninMarkdown.)ManyVCSwebportals(likeourGitlabandthepopularGithub)allowyoutobrowsethefilesinyourrepositoryandrenderMarkdownformat,makingsuchfilesmuchnicertolookat.Markdowniseasytolearn;see<ahref="/engs50/Resources/#markdown">Markdownresources</a>.</p></blockquote><h3id="recovering-files">Recoveringfiles</h3><p>Githassomecharacteristicsofabackupsystem.Ifyouaccidentallyremoveafile,youcanrecoveritfromthemostrecentcommitbyaskingGittocheckitoutfromthatcommit:</p><divclass="language-bashhighlighter-rouge"><divclass="highlight"><preclass="highlight"><code><spanclass="nv">$</span><spanclass="nb">rm</span>program.c<spanclass="c">#oops!Imeanttormprogram.c~</span><spanclass="nv">$</span>gitcheckoutprogram.c<spanclass="c">#asofthelastcommit</span></code></pre></div></div><p>Formoreabouthowyoucanusethisfeatureto“rollback”toanearlierversionofthecode,seebelow.</p><h3id="ignoring-files">IgnoringFiles</h3><p>Gitworkswellwithnormalfiles,butexecutablesandbinary-formatfiles(likeimages)canpresentachallenge.Inaddition,thereareoftencertainfilesthatyoudonotwanttobeunderversioncontrol,liketemporaryfilesfromyourfavoriteeditor.(Asageneralrule,youshouldnotcommitany<em>derivedfiles</em>toarepo;forexample,anyfilesbuiltbyaMakefile;thesourcefilesliveintherepo,andthederivedfilesarerebuiltbyanyoneusingtherepo.)YoushouldconfigureGittoignorethosefiles,sotheywillnotbeaddedtoyourrepo.</p><p>SomefilenameextensionsaresocommonlyusedtorefertoderivedfilesthatweconfigureGittoignoretheminallofourrepos.<strong>Doitnow!</strong>Createafile<codeclass="language-plaintexthighlighter-rouge">~/.gitignore_global</code>withthefollowingcontents:</p><divclass="language-plaintexthighlighter-rouge"><divclass="highlight"><preclass="highlight"><code>#Objectfilesandlibraries*.o*.a#Emacs*~\#*\#.\#*#debuggersymbols*.dSYM#MacOSX.DS_Store.AppleDouble.LSOverrideIcon._*.Spotlight-V*.Trashes</code></pre></div></div><p>Tomakeiteasy,justcopyourfile:</p><divclass="language-plaintexthighlighter-rouge"><divclass="highlight"><preclass="highlight"><code>cp~cs50/.gitignore~</code></pre></div></div><p>Githubmaintainsalistofcommon<ahref="https://github.com/github/gitignore">ignorefiles</a>,ifyouwanttogetmoreideas.</p><p>ThenyoushouldtellGitaboutproject-specificfilesthatshouldbeignored.Ataminimum,thislistwouldincludethe‘executablebinary’filethatisproducedasaresultofcompilingyourprogram.Asaruleofthumb,youshouldtellGittoignoreanythingthat<codeclass="language-plaintexthighlighter-rouge">make</code>buildsand<codeclass="language-plaintexthighlighter-rouge">makeclean</code>deletes.</p><p>We’llcreatea<codeclass="language-plaintexthighlighter-rouge">.gitignore</code>fileforournewrepo.Below,Ifocusontheneedtoignoretheexecutablefile<codeclass="language-plaintexthighlighter-rouge">treetest</code>thatbuildswith<codeclass="language-plaintexthighlighter-rouge">make</code>.</p><divclass="language-bashhighlighter-rouge"><divclass="highlight"><preclass="highlight"><code><spanclass="o">[</span>kotz@flume~/cs50/labs/tree6]<spanclass="nv">$</span><spanclass="nb">echo</span>treetest<spanclass="o">&gt;</span>.gitignore<spanclass="o">[</span>kotz@flume~/cs50/labs/tree6]<spanclass="nv">$</span>gitstatusOnbranchmasterUntrackedfiles:<spanclass="o">(</span>use<spanclass="s2">"gitadd&lt;file&gt;..."</span>toinclude<spanclass="k">in</span>whatwillbecommitted<spanclass="o">)</span>.gitignorenothingaddedtocommitbutuntrackedfilespresent<spanclass="o">(</span>use<spanclass="s2">"gitadd"</span>totrack<spanclass="o">)</span><spanclass="o">[</span>kotz@flume~/cs50/labs/tree6]<spanclass="nv">$</span>gitadd.gitignore<spanclass="o">[</span>kotz@flume~/cs50/labs/tree6]<spanclass="nv">$</span>gitcommit<spanclass="nt">-m</span><spanclass="s2">"ignoreexecutable"</span><spanclass="o">[</span>master9f01c00]ignoreexecutable1filechanged,1insertion<spanclass="o">(</span>+<spanclass="o">)</span>createmode100644.gitignore<spanclass="o">[</span>kotz@flume~/cs50/labs/tree6]<spanclass="err">$</span></code></pre></div></div><p>Ididn’thavetoaddandcommitthe<codeclass="language-plaintexthighlighter-rouge">.gitignore</code>fileforGittomakeuseofit;Ijustdidn’twanttoforgettoputitintotherepo.Thatway,anyoneelsewholaterusesthisprojectrepowillalsogetthesame<codeclass="language-plaintexthighlighter-rouge">.gitignore</code>file.</p><p>Nowlet’smaketheexecutableandseewhetherGitignoresit.[Notshown:Ifirstmadeasmallchangeto<codeclass="language-plaintexthighlighter-rouge">treetest.c</code>].</p><divclass="language-bashhighlighter-rouge"><divclass="highlight"><preclass="highlight"><code><spanclass="o">[</span>kotz@flume~/cs50/labs/tree6]<spanclass="nv">$</span>makegcc<spanclass="nt">-Wall</span><spanclass="nt">-pedantic</span><spanclass="nt">-std</span><spanclass="o">=</span>c11<spanclass="nt">-ggdb</span><spanclass="nt">-c</span><spanclass="nt">-o</span>treetest.otreetest.cgcc<spanclass="nt">-Wall</span><spanclass="nt">-pedantic</span><spanclass="nt">-std</span><spanclass="o">=</span>c11<spanclass="nt">-ggdb</span><spanclass="nt">-c</span><spanclass="nt">-o</span>tree.otree.cgcc<spanclass="nt">-Wall</span><spanclass="nt">-pedantic</span><spanclass="nt">-std</span><spanclass="o">=</span>c11<spanclass="nt">-ggdb</span>treetest.otree.o<spanclass="nt">-o</span>treetest<spanclass="o">[</span>kotz@flume~/cs50/labs/tree6]<spanclass="nv">$</span><spanclass="nb">ls</span>MakefileREADME.mdtree.ctree.htree.otreetest<spanclass="k">*</span>treetest.ctreetest.o<spanclass="o">[</span>kotz@flume~/cs50/labs/tree6]<spanclass="nv">$</span>gitstatusOnbranchmasterChangesnotstaged<spanclass="k">for</span>commit:<spanclass="o">(</span>use<spanclass="s2">"gitadd&lt;file&gt;..."</span>toupdatewhatwillbecommitted<spanclass="o">)</span><spanclass="o">(</span>use<spanclass="s2">"gitcheckout--&lt;file&gt;..."</span>todiscardchanges<spanclass="k">in</span>workingdirectory<spanclass="o">)</span>modified:treetest.cUntrackedfiles:<spanclass="o">(</span>use<spanclass="s2">"gitadd&lt;file&gt;..."</span>toinclude<spanclass="k">in</span>whatwillbecommitted<spanclass="o">)</span>tree.otreetest.onochangesaddedtocommit<spanclass="o">(</span>use<spanclass="s2">"gitadd"</span>and/or<spanclass="s2">"gitcommit-a"</span><spanclass="o">)</span></code></pre></div></div><p>Uh-oh.ItlookslikeGitproperlyignored<codeclass="language-plaintexthighlighter-rouge">treetest</code>butdidnotignorethe<codeclass="language-plaintexthighlighter-rouge">.o</code>files.Imusthaveskippedoverthe<ahref="#ignoring-files">directionsabove</a>.Wecanexplicitlyignoretheminthisdirectory:</p><divclass="language-bashhighlighter-rouge"><divclass="highlight"><preclass="highlight"><code><spanclass="o">[</span>kotz@flume~/cs50/labs/tree6]<spanclass="nv">$</span><spanclass="nb">cat</span><spanclass="o">&gt;&gt;</span>.gitignore<spanclass="k">*</span>.o^D<spanclass="o">[</span>kotz@flume~/cs50/labs/tree6]<spanclass="nv">$</span>gitstatusOnbranchmasterChangesnotstaged<spanclass="k">for</span>commit:<spanclass="o">(</span>use<spanclass="s2">"gitadd&lt;file&gt;..."</span>toupdatewhatwillbecommitted<spanclass="o">)</span><spanclass="o">(</span>use<spanclass="s2">"gitcheckout--&lt;file&gt;..."</span>todiscardchanges<spanclass="k">in</span>workingdirectory<spanclass="o">)</span>modified:.gitignoremodified:treetest.cnochangesaddedtocommit<spanclass="o">(</span>use<spanclass="s2">"gitadd"</span>and/or<spanclass="s2">"gitcommit-a"</span><spanclass="o">)</span></code></pre></div></div><p>Itworked;nowIwillcommitallmodifiedfileswith<codeclass="language-plaintexthighlighter-rouge">commit-a</code>:</p><divclass="language-bashhighlighter-rouge"><divclass="highlight"><preclass="highlight"><code><spanclass="o">[</span>kotz@flume~/cs50/labs/tree6]<spanclass="nv">$</span>gitcommit<spanclass="nt">-a</span><spanclass="nt">-m</span><spanclass="s2">"tweakthetestscript"</span><spanclass="o">[</span>master153995e]tweakthe<spanclass="nb">test</span>script2fileschanged,5insertions<spanclass="o">(</span>+<spanclass="o">)</span>,4deletions<spanclass="o">(</span>-<spanclass="o">)</span><spanclass="o">[</span>kotz@flume~/cs50/labs/tree6]<spanclass="nv">$</span></code></pre></div></div><h3id="removing-files">RemovingFiles</h3><p>The<codeclass="language-plaintexthighlighter-rouge">gitrm</code>commandisthecommandtoremovefilesfromtherepository.Forexample,youmayrearrangeyourcodeandsomesourcefilesarenolongerneeded;insteadof<codeclass="language-plaintexthighlighter-rouge">rm</code>youuse<codeclass="language-plaintexthighlighter-rouge">gitrm</code>toremovethefilefrombothyourworkingdirectoryandfromtherepository.(Priorversionsofthefile(s)arestillintherepository,soyoucanalwaysgetthefileback.)</p><blockquote><p>Asgit-statusoutputsometimessuggests,ifyouwanttoremovesomethingfromthestagingareayouusethe<codeclass="language-plaintexthighlighter-rouge">gitrm--cached&lt;file&gt;</code>commandtoremovestagedfiles.Thiscommanddoesn’tremovethefilefromyourdirectory,orfromtherepository-it’sjusttheoppositeof<codeclass="language-plaintexthighlighter-rouge">gitadd</code>.</p></blockquote><h3id="committing-changes">CommittingChanges</h3><p>Whenyouhavemadesomechangesandstagedthem,thenyouarereadytocommitthosechanges(roughly)permanently.Eachcommitshouldbeaccompaniedbyamessageexplainingwhatchangeshavebeenmade.Thecommandtoaccomplishthisis<codeclass="language-plaintexthighlighter-rouge">gitcommit-m"&lt;message&gt;"</code>,aswesawintheexamplesabove.</p><p>Ifyourunthe<codeclass="language-plaintexthighlighter-rouge">gitcommit</code>commandwithoutthe<codeclass="language-plaintexthighlighter-rouge">-m</code>option,youwillbetakentoyourdefaulteditortoenteracommitmessage.Ifyoucommittooearlyandwanttoaddsomethingtothesamecommit,thenyoucanusethe<codeclass="language-plaintexthighlighter-rouge">gitcommit--amend</code>command.</p><p>Thecommitmessageisveryimportant,bothtoyouandtoyourcolleaguesworkingwithyou.Yourcommitsshouldbefairlygranularwithastraightforward<em>presenttense</em>commitmessage.Weencouragetheuseof<em>presenttense</em>sinceyoushouldthinkofthecommitmessageasdescribingwhatthecommitdoes.Thecommitmessagesbecomeevenmoreimportantasyouworkwithateam,particularlywhenthemembersaregeographicallydistributed.</p><h3id="best-practice-make-atomic-changes">BestPractice:Makeatomicchanges</h3><p>Gitdoesn’tcarewhyfilesarechanging.Itjusttracksthecontentasitchanges,allowingyoutochoosehowtouseitthebestway.Gitactionsareatomic,andyourchangesshouldbealso.Ifyoumoveafunctionfromonefiletoanotherthatcouldbetwocommits:onetodeleteitinfileA,andanothertoaddittofileB.ThisisokwithGit,butbetweenthetwocommitsthefunctionismissingentirely,soalaterbuildbasedonthatthecodebaseatthefirstcommitwouldnotwork.Instead,committhenewversionofbothfilesinthesamecommit.</p><p>Similarly,ifyouneedtomakeseveralunrelatedchangestovariousfilesinyourproject,run<codeclass="language-plaintexthighlighter-rouge">gitcommit</code>separatelyforeachsetofchanges,eachcommitwithadifferentmessage,sothatthemessageisrelevanttothefilesbeingcommitted.</p><h3id="git-diff">gitdiff</h3><p>Howcanyoutellwhathaschangedsinceyourlastcommit?With<codeclass="language-plaintexthighlighter-rouge">gitdiff</code>!Below,Ieditthe<codeclass="language-plaintexthighlighter-rouge">README.md</code>fileandthenuse<codeclass="language-plaintexthighlighter-rouge">gitdiff</code>toshowmewhatchanged.Justlike<codeclass="language-plaintexthighlighter-rouge">diff</code>,itprintsalittlebitofcontextandthenuseslinesbeginningwith<codeclass="language-plaintexthighlighter-rouge">+</code>and<codeclass="language-plaintexthighlighter-rouge">-</code>toshowaddedandremovedlines,respectively.</p><divclass="language-bashhighlighter-rouge"><divclass="highlight"><preclass="highlight"><code><spanclass="o">[</span>kotz@flume~/cs50/labs/tree6]<spanclass="nv">$</span>emacsREADME.md<spanclass="o">[</span>kotz@flume~/cs50/labs/tree6]<spanclass="nv">$</span>gitdiffdiff<spanclass="nt">--git</span>a/README.mdb/README.mdindexce0057f..4eb3662100644<spanclass="nt">---</span>a/README.md+++b/README.md@@<spanclass="nt">-4</span>,5+4,8@@<spanclass="k">*</span>addstree_print<spanclass="o">()</span><spanclass="k">function</span><spanclass="k">*</span>hintsathowonemightsupporttree_delete<spanclass="o">()</span><spanclass="k">function</span>-#ThiscodeisnowonGitlab!+Iremovedalineandaddedthisparagraphinstead.+Itwilldemonstratehow<spanclass="sb">`</span>diff<spanclass="sb">`</span>canshowyouthedifferences+betweenthecurrentversionandthelast-committedversion.+</code></pre></div></div><p>Youcanalsoaddaspecificfilename,like<codeclass="language-plaintexthighlighter-rouge">gitdiffMakefile</code>ifyoujustwanttoseedifferencesforonefileratherthanallfilesintherepo.</p><blockquote><p>Ifyoufindtheoutputof<codeclass="language-plaintexthighlighter-rouge">gitdiff</code>mangled,itcouldbebecauseofanincompatibilitybetween<codeclass="language-plaintexthighlighter-rouge">git</code>,the‘pager’program(<codeclass="language-plaintexthighlighter-rouge">less</code>),the<codeclass="language-plaintexthighlighter-rouge">ssh</code>connection,andyourterminalprogram.</p></blockquote><blockquote><p>Iworkedarounditbytellinggittousecatasmypager:</p></blockquote><divclass="language-bashhighlighter-rouge"><divclass="highlight"><preclass="highlight"><code>gitconfig<spanclass="nt">--global</span>core.pager<spanclass="nb">cat</span></code></pre></div></div><h3id="git-tags">gittags</h3><p><em>Beginnerscanignorethisfeaturefornow.</em></p><p>Onceyou’veachievedsomemilestone,suchasadeliverableorrelease,youneedsomemechanismformarkingitinyourgetloghistory.IfyouprinttheGitlogyou’llseethehashcodesontheleftsidethatareusedtoidentifyeachcommit.Clearly,itwouldbeunreasonabletoexpecteveryonetorememberthat5ba4851wasrelease1.0.forthispurposeyouusethe<codeclass="language-plaintexthighlighter-rouge">gittag</code>command.Thisplacesamarkerinthegetlogwiththenameyouspecify.Youshouldtrytousethiscommandonlywhenyou’reinacommitted,up-to-datestate.Later,whenyouneedtoreconstructaparticularrelease,youcanusethistaginthe<codeclass="language-plaintexthighlighter-rouge">gitcheckout</code>command.</p><blockquote><p>Theexampleaboveisfora“lightweight”tag-onethatisjustanameandalocationintheGithistory.Anotheristhe“annotatedtag”justlikethecommitcommanddoes.Thesearegenerallyusedtonotemajorreleasessincetheannotationcanincludethereleasename,releasenotes,andotherinformationrelatedtotherelease.</p></blockquote><p>Foraniceoverviewofhowtousethisfeature,pleaseseethe<ahref="tags.html">“GitTagExtra”</a>thatwe’veadded.</p><h3id="git-stashes">gitstashes</h3><p><em>Beginnerscanignorethisfeaturefornow.</em></p><p>It’sacommonoccurrencetobehappilyworkingonthenextreleaseofthecodewhenahigh-prioritycriticalsituationcomesupwithanimportantcustomer.Thebosswantsyoutostopwhatyou’redoingandfixtheproblem.You’reanxioustofixit,butwhataboutalltheworkyouhaveinyourworkingdirectory?Whereshouldyousaveitsothatyoucandoa<codeclass="language-plaintexthighlighter-rouge">gitcheckout</code>ofthecodethatcorrespondstothereleasethecustomerisrunning?Theansweristodoa<codeclass="language-plaintexthighlighter-rouge">gitstash</code>,whichwillsaveeverythingthatisn’tcommitted,andresetthedirectorytothemostrecentcommittedversion.</p><p>Oncethehighpriorityworkiscompleted,youcanrestorewhatyouhadwith<codeclass="language-plaintexthighlighter-rouge">gitstashapply</code>andyourpreviousworkwillreappear.Onceyou’refinishedwithastash,youshoulddeleteitusing<codeclass="language-plaintexthighlighter-rouge">gitstashdrop</code>whichwilldeletethelaststash.Youmayhavemultiplestashessaved(seethemusingthe<codeclass="language-plaintexthighlighter-rouge">gitstashlist</code>command),but<strong>donot</strong>usethestashforversioncontrolorbackup!</p><h3id="rolling-back-to-a-previous-commit">Rollingbacktoapreviouscommit</h3><p><em>Beginnersshouldignorethisfeaturefornow.</em></p><p><em>ThankstoTravisPetersforthistip.</em></p><p>To“rollback”yourrepositorytoaspecifiedstate(i.e.,aparticularcommit)you’llneedtousethe<codeclass="language-plaintexthighlighter-rouge">gitreset</code>command.</p><p><strong>WARNING:</strong>Pleaseexercisecautionwhenrunningthesecommandsasthisisnotsomethingyoucanundolaterifyoudon’tfollowtheseinstructions!Thistutorialassumesyouarecurrentlyonthe<codeclass="language-plaintexthighlighter-rouge">master</code>branch.</p><p>First,wewanttoensurethatwecancomebacktothisstateofourrepositoryatalaterpointshouldweneedtodoso.Acommitanditspredecessorsarealwaysaccessiblesolongaswehaveapointertothemostrecentcommitinthat“branch”.So,wefirstcreateabranchthatpointstothemostrecentcommitinourcurrentbranch(ideallyyouareonthe“master”branchrightnow):</p><divclass="language-plaintexthighlighter-rouge"><divclass="highlight"><preclass="highlight"><code>$gitbranchmyoldhead</code></pre></div></div><p>Next,weusethe<codeclass="language-plaintexthighlighter-rouge">gitreset</code>commandwhichallowsyouto<em>reset</em>yourcurrent<codeclass="language-plaintexthighlighter-rouge">HEAD</code>tosomespecifiedstate.Accordingtothemanpage(<codeclass="language-plaintexthighlighter-rouge">githelpreset</code>),the<codeclass="language-plaintexthighlighter-rouge">--hard</code>flagdoesthefollowing:</p><blockquote><p>Resetstheindexandworkingtree.Anychangestotrackedfilesintheworkingtreesince<commit>arediscarded.</commit></p></blockquote><divclass="language-plaintexthighlighter-rouge"><divclass="highlight"><preclass="highlight"><code>gitreset--hard&lt;tag/branch/commithash-id&gt;</code></pre></div></div><p>Runningthiscommandeffectivelysetsyour<codeclass="language-plaintexthighlighter-rouge">HEAD</code>backtothetag/branch/committhatyouspecifyandcompletelyclearsoutyourworkingdirectoryandindex(i.e.,stagingarea).</p><p>Finally,ifyouwishtocommitthisstateofyourlocalrepositorysothatyourremoterepositoryissynchronized(i.e.,theremoterepositoryalsopointsbacktothecommitthatyoujustresetyourlocalrepositorybackto),youneedto<codeclass="language-plaintexthighlighter-rouge">gitpush</code>withthe<codeclass="language-plaintexthighlighter-rouge">-f</code>flagwhichwillforcefullyoverwriteyourremoterepository(withoutthe<codeclass="language-plaintexthighlighter-rouge">-f</code>flag,gitwillcomplainaboutyourcurrentbranchbeing“behind”;thisisexpectedinourcase).</p><divclass="language-plaintexthighlighter-rouge"><divclass="highlight"><preclass="highlight"><code>gitpush-f</code></pre></div></div><p><strong>ACoupleofNotes:</strong></p><ul><li>Ifyoudecidethatthe<codeclass="language-plaintexthighlighter-rouge">myoldhead</code>branchisnolongerneededandyoureallydon’twanttokeepthechanges,youcandeletethebranch(<codeclass="language-plaintexthighlighter-rouge">gitbranch-D</code>)andallofthecommitsthatgowithitbyrunningthefollowingcommand:</li></ul><divclass="language-plaintexthighlighter-rouge"><divclass="highlight"><preclass="highlight"><code>gitbranch-Dmyoldhead</code></pre></div></div><ul><li>Whenreferencingcommits,suchasinthe<codeclass="language-plaintexthighlighter-rouge">gitreset</code>commandabove,youdon’thavetocopy/paste(orwriteout!)thewholecommit.Large(cryptographic)hashesareusedbygitfordataintegritypurposes(thedetailsofwhichbeyondthescopeofthesenotes).Whatweareconcernedwith,however,is<em>uniqueness</em>ofthesecommits.Whilenotguaranteed,itisextremelyunlikelythatthe(SHA-1)hashesthataregeneratedfordifferentcommitswillbethesame.Thus,whenreferringtocommits,weneedonlytellGitenoughofthecommithashthatitcanbeconfidentthatyouhaveuniquelyidentifiedaspecificcommit.<strong><em>Inpractice,you’llseepeopleonlyusethefirst7-10charactersofagithashtouniquelyidentifysometag/branch/commit</em></strong>.</li></ul><h2id="other-handy-git-features">Otherhandygitfeatures</h2><p>Githasmany,manymorefeaturesthanwehavedetailedhere.Wehaveonlyscratchedthesurfacewiththecommandsnecessarytoworkcollaborativelyonyourclassproject.Theinterestedstudentisencouragedtoexploretheprovidedresources.Keywords/commandstoinvestigate:<em>show</em>,<em>diff</em>,<em>branch</em>,and<em>rebase</em>.Forexample,here’sagit<em>branch/merge</em>example,fromthefolkswhobroughtyou<ahref="http://gitgraphjs.com/"><em>gitgraph.js</em></a>:<ahref="/engs50/Notes/git/gitgraph-sample.pdf">PDF</a>.</p><h2id="cs-gitlab">CSGitlabServer</h2><p>TheCSGitLabserverishostedat:<ahref="https://gitlab.cs.dartmouth.edu/"><codeclass="language-plaintexthighlighter-rouge">https://gitlab.cs.dartmouth.edu/</code></a>.We’reusingGitLab(insteadofpublicserverselsewhereontheInternet)becauseitallowsyoutomaintainyourownprivaterepositoriesandbecauseitprovidescooltools.Forexample,GitLabincludesagraphical,web-basedwayofexploringyourrepositoriesasshownbelow.</p><p>YoumustregisterforauseridandthencreatearepositoryforLab4usingtheinstructionsthatfollow.</p><p>TogetstartedwithGitLab,followthesesteps:</p><ol><li>Useabrowsertogoto<ahref="https://gitlab.cs.dartmouth.edu/"><codeclass="language-plaintexthighlighter-rouge">https://gitlab.cs.dartmouth.edu/</code></a></li><li>Ifyoudon’talreadyhaveaGitLabuserid,<strong><em>createonethatisidenticaltoyourCSloginname</em></strong>.</li><li><p>WhentheGitLabuseridiscreated,gobackandlogin.Hereistheopeningscreenwhenanewuserlogsin<br/><imgsrc="/engs50/Notes/git/gitlab-newuser.png"alt=""/>andhere’swhatmyopeningscreenlookslike.<br/><imgsrc="/engs50/Notes/git/gitlab-veteran.png"alt=""/></p></li><li><p>AllofourrepositoriesareinaGitlabGroup.ClickontheGroupstabnearthetop.</p></li><li><p>Clickonourgroup<em>CS50-S18</em>toexpandit.<imgsrc="/engs50/Notes/git/gitlabgroup2.jpeg"alt=""/></p></li><li><p>Clickonthe<em>TSE</em>subgrouptoopenit.<imgsrc="/engs50/Notes/git/gitlabgroup3.jpeg"alt=""/></p></li><li><p>Clickonthegreen“NewProject”button.<imgsrc="/engs50/Notes/git/gitlabgroup4.jpeg"alt=""/></p></li><li><p>Fillouttheformbygivingtheprojectaname(required)anddescription(optional).<strong>EnsuretheprojectismarkedPrivate.</strong><imgsrc="/engs50/Notes/git/gitlabgroup5.jpeg"alt=""/></p></li><li><p>Nowtheprojecthasbeensuccessfullycreatedandappearslikethis:<imgsrc="/engs50/Notes/git/gitlabgroup6.jpeg"alt=""/></p></li><li><p>Clickonthe<codeclass="language-plaintexthighlighter-rouge">SSH</code>pop-uptochangeitto<codeclass="language-plaintexthighlighter-rouge">HTTPS</code>.</p></li><li><p>Scrolldowntoseethecommand-lineinstructionsforusingthisproject:<imgsrc="/engs50/Notes/git/gitlab4.png"alt=""/></p></li><li>Let’sassumeyouhadalreadycreatedalocalgitrepositoryusingthelecturenotesabove.Lookattheinstructionsunder<em>ExistingGitrepository.</em>Copythe<codeclass="language-plaintexthighlighter-rouge">gitremoteaddorigin</code>commandyouseethere.</li><li>GotoyourTerminalwindow,and<codeclass="language-plaintexthighlighter-rouge">cd</code>tothedirectorywhereyouhadearliersetupalocalrepository.Pastethe<codeclass="language-plaintexthighlighter-rouge">gitremoteaddorigin</code>command.Thiscommandtiesyourlocalrepositorytothenew‘remote’youcreatedonGitlab,givingthisrelationshipthename‘origin’.</li><li>Thencopyandpastethecommand<codeclass="language-plaintexthighlighter-rouge">gitpush-uoriginmaster</code>.Thispushesyourlocalrepository’s‘master’branchtotheremoteknownas‘origin’.</li><li>EnteryourGitlabusernameandpassword.</li><li>BackintheGitlabbrowserwindow,let’sexplorethefilesnowthere.Clickonthelittle‘home’iconontheleftside,thenonthelittle‘files’icon.Youshouldseethefilesofyournewproject.Notice,below,thatitrendersthe<codeclass="language-plaintexthighlighter-rouge">README.md</code>filenicely.<imgsrc="/engs50/Notes/git/gitlab5.png"alt=""/></li></ol><p>SupposethefirstthingyouwanttodoisupdatetheREADME.mdfile.Soyoueditit,<codeclass="language-plaintexthighlighter-rouge">gitadd</code>,and<codeclass="language-plaintexthighlighter-rouge">gitcommit</code>it.Nowagitstatusshowsyou’rereadytopushtotheremote.</p><divclass="language-bashhighlighter-rouge"><divclass="highlight"><preclass="highlight"><code><spanclass="o">[</span>kotz@flume~/cs50/labs/tree6]<spanclass="nv">$</span><spanclass="nb">cat</span><spanclass="o">&gt;&gt;</span>README.md<spanclass="c">#ThiscodeisnowonGitlab!</span><spanclass="o">[</span>kotz@flume~/cs50/labs/tree6]<spanclass="nv">$</span>gitstatusOnbranchmasterYourbranchisup-to-datewith<spanclass="s1">'origin/master'</span><spanclass="nb">.</span>Changesnotstaged<spanclass="k">for</span>commit:<spanclass="o">(</span>use<spanclass="s2">"gitadd&lt;file&gt;..."</span>toupdatewhatwillbecommitted<spanclass="o">)</span><spanclass="o">(</span>use<spanclass="s2">"gitcheckout--&lt;file&gt;..."</span>todiscardchanges<spanclass="k">in</span>workingdirectory<spanclass="o">)</span>modified:README.mdnochangesaddedtocommit<spanclass="o">(</span>use<spanclass="s2">"gitadd"</span>and/or<spanclass="s2">"gitcommit-a"</span><spanclass="o">)</span><spanclass="o">[</span>kotz@flume~/cs50/labs/tree6]<spanclass="nv">$</span>gitaddREADME.md<spanclass="o">[</span>kotz@flume~/cs50/labs/tree6]<spanclass="nv">$</span>gitcommit<spanclass="nt">-m</span><spanclass="s2">"updatedREADME"</span><spanclass="o">[</span>masterc19159a]updatedREADME1filechanged,3insertions<spanclass="o">(</span>+<spanclass="o">)</span><spanclass="o">[</span>kotz@flume~/cs50/labs/tree6]<spanclass="nv">$</span>gitpushCountingobjects:3,<spanclass="k">done</span><spanclass="nb">.</span>Deltacompressionusingupto8threads.Compressingobjects:100%<spanclass="o">(</span>3/3<spanclass="o">)</span>,<spanclass="k">done</span><spanclass="nb">.</span>Writingobjects:100%<spanclass="o">(</span>3/3<spanclass="o">)</span>,322bytes|0bytes/s,<spanclass="k">done</span><spanclass="nb">.</span>Total3<spanclass="o">(</span>delta2<spanclass="o">)</span>,reused0<spanclass="o">(</span>delta0<spanclass="o">)</span>Tohttps://dfkotz@gitlab.cs.dartmouth.edu/dfkotz/binary-tree.git45993ff..c19159amaster-&gt;master<spanclass="o">[</span>kotz@flume~/cs50/labs/tree6]<spanclass="nv">$</span>gitstatusOnbranchmasterYourbranchisup-to-datewith<spanclass="s1">'origin/master'</span><spanclass="nb">.</span>nothingtocommit,workingdirectoryclean<spanclass="o">[</span>kotz@flume~/cs50/labs/tree6]<spanclass="nv">$</span></code></pre></div></div><p>Jumpbacktothebrowserandhit‘refresh’toseethenew<codeclass="language-plaintexthighlighter-rouge">README</code>.Cool!<imgsrc="/engs50/Notes/git/gitlab6.png"alt=""/></p><h2id="why-is-git-always-asking-for-my-password">WhyisGitalwaysaskingformypassword?</h2><p>BecauseitmustauthenticateyoutoGitlab.IfyouusetheHTTPS-styleURLs,youneedtoenteryourGitlabpassword.IfyouusetheSSH-styleURLs,youneedtoenterthepassphraseyougaveSSHwhenyougeneratedthekeypair.WenowrecommendthatyouuseSSH-styleURLs.Theformermethodisalittletrickybutworththeefforttosetup.Readabout<ahref="/engs50/Resources/gitlab-ssh.html">howtosetupGitlabforSSH</a>.</p><h2id="activity">Activity</h2><p>Intoday’s<ahref="activity.html">activity</a>,eachgroupsetsupasharedrepoonGitlab.</p></div></article></div></div><footerclass="site-footer"><divclass="wrapper"><h2class="footer-heading">Engs50(CS50)--DartmouthCollege</h2><p><fontsize=-1>ThisversionofthecourseisbaseduponthosedesignedbyProfessorsPalmer,Kotz,Zhou,Campbell,andBalkcom.Iamdeeplyindebtedtotheseoutstandingeducators.--<ahref="https://engineering.dartmouth.edu/people/faculty/stephen-taylor/">StephenTaylor</a></font></p><p><small>Thispagewaslastupdatedon<strong>2023-01-05</strong>at<strong>11:31</strong>.</small></p></div></footer></body></html>
