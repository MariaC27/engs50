https://thayer.github.io/engs50/Notes/unittest/
2
23701
<!DOCTYPEhtml><html><head><metacharset="utf-8"><metahttp-equiv="X-UA-Compatible"content="IE=edge"><metaname="viewport"content="width=device-width,initial-scale=1"><title>Unittesting</title><metaname="description"content="InEngs50youwilllearnhowtodesign&buildlarge,reliable,maintainable,andunderstandablesoftwaresystems.IntheprocessyouwilllearntoprograminCwithUnixdevelopmenttools."><linkrel="shortcuticon"href="/engs50/50.png"/><linkrel="stylesheet"href="/engs50/css/main.css"><linkrel="canonical"href="/engs50/Notes/unittest/"></head><body><headerclass="site-header"><aclass="site-title"href="/engs50/"><imgwidth=48align=centersrc="/engs50/50.png"alt="icon">Engs50(CS50)</a><navclass="site-nav">[<ahref="/engs50/Labs/">Labs</a>][<ahref="/engs50/Notes/">Notes</a>][<ahref="/engs50/Reading/">Reading</a>][<ahref="/engs50/Resources/">Resources</a>][<ahref="/engs50/Examples/">Examples</a>]</nav></header><divclass="page-content"><divclass="wrapper"><articleclass="post"><headerclass="post-header"><h1class="post-title">Unittesting</h1></header><divclass="post-content"><p>Thegoalofeffectiveunittestingistoisolateeachfunctionalpartofthesystemandtodemonstratethateachofthosepartsisworkingproperly.</p><p>AshortonlinereferenceisJeffCanna’s<em><ahref="http://www.ibm.com/developerworks/library/j-test.html">Testing,Fun,Really</a></em>.AlthoughheistalkingmostlyaboutJava,hisinsightsonunittestingaresuperb.</p><blockquote><p>“Unitteststelladeveloperthatthecodeisdoingthingsright;functionalteststelladeveloperthatthecodeisdoingtherightthings.”–JeffCanna,<em><ahref="http://www.ibm.com/developerworks/library/j-test.html">Testing,Fun,Really</a></em>.</p></blockquote><blockquote><p>“Unittestsarewrittenfromthedeveloper’sperspectiveandfocusonparticularmethodsoftheclassundertest.”–JeffCanna,<em><ahref="http://www.ibm.com/developerworks/library/j-test.html">Testing,Fun,Really</a></em>.</p></blockquote><p>Usetheseguidelineswhenwritingunittests(fromJeffCanna,<em><ahref="http://www.ibm.com/developerworks/library/j-test.html">Testing,Fun,Really</a></em>):</p><ul><li>“Writetheunittestbeforewritingcodeforclassittests.</li><li>“Capturecodecommentsinunittests.</li><li>“Testallthepublicmethodsthatperforman“interesting”function(thatis,notgettersandsetters,unlesstheydotheirgettingandsettinginsomeuniqueway).</li><li>“Puteachtestcaseinthesamepackageastheclassit’stestingtogainaccesstopackageandprotectedmembers.</li><li>“Avoidusingdomain-specificobjectsinunittests.”</li></ul><h3id="unit-testing-of-our-binary-tree">Unittestingofourbinarytree</h3><p>Today’sTerminal<ahref="/engs50/Notes/unittest/script.txt">script</a>isavailable.</p><p>Unzipthe<ahref="/engs50/Examples/trees.zip">treeexamplesfile</a>.Thetree9exampledemonstratedabinary-treedatastructure.HereweenhanceittobecometreeA(toacomputerscientist,<codeclass="language-plaintexthighlighter-rouge">A</code>comesnextafter<codeclass="language-plaintexthighlighter-rouge">9</code>).</p><p>LookattreeA/tree.canditsMakefileandyou’llnoticethreethings:</p><ul><li>Thecodenowhasa<codeclass="language-plaintexthighlighter-rouge">main()</code>functionatthebottomofthefile.Itisprotectedinside<codeclass="language-plaintexthighlighter-rouge">#ifdefUNIT_TEST...#endif</code>soitisonlycompiled-inwhenwewanttocompileaunittest.</li><li>Preceding<codeclass="language-plaintexthighlighter-rouge">main()</code>isan<codeclass="language-plaintexthighlighter-rouge">#include"unittest.h"</code>topickupseveral<em>preprocessormacros</em>,whichweexplainbelow.</li><li>The<codeclass="language-plaintexthighlighter-rouge">Makefile</code>nowhasa<codeclass="language-plaintexthighlighter-rouge">unittest</code>target,whichbuildsadistinctexecutable,anda<codeclass="language-plaintexthighlighter-rouge">unit</code>target,whichrunsit.</li></ul><blockquote><p>The<codeclass="language-plaintexthighlighter-rouge">unittest</code>targetisunusualinthatitexplicitlymentionsdependencyon<codeclass="language-plaintexthighlighter-rouge">test.c</code>.NormallyMakeautomaticallyrecognizesthedependencybetween<codeclass="language-plaintexthighlighter-rouge">.o</code>filesand<codeclass="language-plaintexthighlighter-rouge">.c</code>files,sowerarelyseeruleswithdependencyon<codeclass="language-plaintexthighlighter-rouge">.c</code>files.Here,becausethereisno<codeclass="language-plaintexthighlighter-rouge">unittest.c</code>,wealwaysbuild<codeclass="language-plaintexthighlighter-rouge">unittest</code>from<codeclass="language-plaintexthighlighter-rouge">tree.c</code>withaspecial<codeclass="language-plaintexthighlighter-rouge">-D</code>flaganddonotuse<codeclass="language-plaintexthighlighter-rouge">tree.o</code>;wemustexplicitlylistallthepiecesthatgointobuilding<codeclass="language-plaintexthighlighter-rouge">unitest</code>.</p></blockquote><p><strong><em>Preprocessormacros.</em></strong></p><p>Theunittestmakesheavyuseofsome<em>macros</em>,whicharerecognizedandtextuallyreplacedbytheCpreprocessorbeforetheCcompilerevenruns.TheyaresousefulI’veputtheminaseparate<codeclass="language-plaintexthighlighter-rouge">unittest.h</code>file,andtextuallyincludethemin<codeclass="language-plaintexthighlighter-rouge">test.c</code>when<codeclass="language-plaintexthighlighter-rouge">UNIT_TEST</code>hasbeendefined.Ishowthecoreof<codeclass="language-plaintexthighlighter-rouge">unittest.h</code>below.</p><p>Theseare<em>macros.</em>NotehowIdefinefragmentsofcodewitheach<codeclass="language-plaintexthighlighter-rouge">#define</code>;thefirsttwoeventakeparameters.WhenscanningCcode,thepreprocessordoes<em>textualsubstitution</em>foreachdefinedsymbol-itdoesnotevaluatethecodeatall,itjustsubstitutestheremainderoftheline(afterthesymbolandafteraspace)intotheCprogramwhereveritseesthatsymbol,optionallyinsertingtheparameterwhereveritappearsinthemacrobody.Becauseeachdefinitionmustappearonone“line”,Ihadtousea<em>linecontinuation</em>character(backslashinthelastcharacteroftheline)toletmeformatthedefinitionsinahuman-readableway.Ilinedupthebackslashessotheyalllookneat.</p><divclass="language-chighlighter-rouge"><divclass="highlight"><preclass="highlight"><code><spanclass="c1">//eachtestshouldstartbysettingtheresultcounttozero</span><spanclass="cp">#defineSTART_TEST_CASE(name)int_failures=0;char*_testname=(name);</span><spanclass="c1">//Checkacondition;iffalse,printwarningmessage.</span><spanclass="c1">//e.g.,EXPECT(dict-&gt;start==NULL).</span><spanclass="c1">//note:thepreprocessor</span><spanclass="c1">//converts__LINE__intolinenumberwherethismacrowasused,and</span><spanclass="c1">//converts"#x"intoastringconstantforargx.</span><spanclass="cp">#defineEXPECT(x)\if(!(x)){\_failures++;\printf("Fail%sLine%d:[%s]\n",_testname,__LINE__,#x);\}</span><spanclass="c1">//returntheresultcountattheendofatest</span><spanclass="cp">#defineEND_TEST_CASE\if(_failures==0){\printf("PASStest%s\n\n",_testname);\}else{\printf("FAILtest%swith%derrors\n\n",_testname,_failures);\}</span><spanclass="cp">#defineTEST_RESULT(_failures)</span></code></pre></div></div><p>Thepreprocessordefinesaspecialmacro<codeclass="language-plaintexthighlighter-rouge">__LINE__</code>thatissettothelinenumberoftheoriginalsourcefile,aseachsourcelineisprocessed;thisisgreatforprintingoutthelinenumberwhereourtestcasefailed.</p><p>Thepreprocessoralsohasspecialsyntax<codeclass="language-plaintexthighlighter-rouge">#parameter</code>thatsubstitutesaCstringconstantforthetextoftheparameter.Youcanseeitrightattheendofthe<codeclass="language-plaintexthighlighter-rouge">EXPECT</code>macro.Thus,<codeclass="language-plaintexthighlighter-rouge">EXPECT(tree!=NULL)</code>willproducecodethatendswith<codeclass="language-plaintexthighlighter-rouge">"tree!=NULL");</code>enablingustoprintthelinenumber<em>and</em>theconditionthatfailed.Youcan’tdothatwithC,onlywiththepreprocessor!</p><p><em>Warning:Istronglydiscouragetheuseofpreprocessormacros.</em>Therearetimes,however,wheretheyaretherighttoolforthejob,andthisisoneofthosetimes.</p><p>Themacrosaremeanttobeusedforconstructingsmallunittestslikethisone:</p><divclass="language-chighlighter-rouge"><divclass="highlight"><preclass="highlight"><code><spanclass="c1">/////////////////////////////////////</span><spanclass="c1">//createandvalidateanemptytree</span><spanclass="kt">int</span><spanclass="nf">test_newtree0</span><spanclass="p">()</span><spanclass="p">{</span><spanclass="n">START_TEST_CASE</span><spanclass="p">(</span><spanclass="s">"newtree0"</span><spanclass="p">);</span><spanclass="n">tree_t</span><spanclass="o">*</span><spanclass="n">tree</span><spanclass="o">=</span><spanclass="n">tree_new</span><spanclass="p">();</span><spanclass="n">EXPECT</span><spanclass="p">(</span><spanclass="n">tree</span><spanclass="o">!=</span><spanclass="nb">NULL</span><spanclass="p">);</span><spanclass="n">EXPECT</span><spanclass="p">(</span><spanclass="n">tree</span><spanclass="o">-&gt;</span><spanclass="n">root</span><spanclass="o">==</span><spanclass="nb">NULL</span><spanclass="p">);</span><spanclass="n">EXPECT</span><spanclass="p">(</span><spanclass="n">tree_find</span><spanclass="p">(</span><spanclass="n">tree</span><spanclass="p">,</span><spanclass="s">"hello"</span><spanclass="p">)</span><spanclass="o">==</span><spanclass="nb">NULL</span><spanclass="p">);</span><spanclass="n">tree_delete</span><spanclass="p">(</span><spanclass="n">tree</span><spanclass="p">,</span><spanclass="nb">NULL</span><spanclass="p">);</span><spanclass="n">EXPECT</span><spanclass="p">(</span><spanclass="n">count_net</span><spanclass="p">()</span><spanclass="o">==</span><spanclass="mi">0</span><spanclass="p">);</span><spanclass="n">END_TEST_CASE</span><spanclass="p">;</span><spanclass="k">return</span><spanclass="n">TEST_RESULT</span><spanclass="p">;</span><spanclass="p">}</span></code></pre></div></div><p>Intheabovetest,Icreateanew(empty)tree,trytofindsomethinginit,anddeletethetree.Notice,though,thatIactuallypeek<em>inside</em>the<codeclass="language-plaintexthighlighter-rouge">structtree</code>toverifythatallitsmembersaresetcorrectly.</p><p>Note,too,howIusedthosenewmacros-using<codeclass="language-plaintexthighlighter-rouge">START_TEST_CASE()</code>togivethetestanameandinitializeeverything,<codeclass="language-plaintexthighlighter-rouge">EXPECT()</code>toindicatetheconditionsIexpecttobetrue,<codeclass="language-plaintexthighlighter-rouge">END_TEST_CASE</code>toprintthesummaryandcleanup,and<codeclass="language-plaintexthighlighter-rouge">returnTEST_RESULT</code>toprovideareturnvalueforthisfunction.Here’showthatcodelooksafterrunningitthroughthepreprocessorwith<codeclass="language-plaintexthighlighter-rouge">gcc-DUNIT_TEST-Etree.c</code>:</p><divclass="language-chighlighter-rouge"><divclass="highlight"><preclass="highlight"><code><spanclass="kt">int</span><spanclass="nf">test_newtree0</span><spanclass="p">()</span><spanclass="p">{</span><spanclass="kt">int</span><spanclass="n">_failures</span><spanclass="o">=</span><spanclass="mi">0</span><spanclass="p">;</span><spanclass="kt">char</span><spanclass="o">*</span><spanclass="n">_testname</span><spanclass="o">=</span><spanclass="p">(</span><spanclass="s">"newtree0"</span><spanclass="p">);;</span><spanclass="n">tree_t</span><spanclass="o">*</span><spanclass="n">tree</span><spanclass="o">=</span><spanclass="n">tree_new</span><spanclass="p">();</span><spanclass="k">if</span><spanclass="p">(</span><spanclass="o">!</span><spanclass="p">(</span><spanclass="n">tree</span><spanclass="o">!=</span><spanclass="p">((</span><spanclass="kt">void</span><spanclass="o">*</span><spanclass="p">)</span><spanclass="mi">0</span><spanclass="p">)))</span><spanclass="p">{</span><spanclass="n">_failures</span><spanclass="o">++</span><spanclass="p">;</span><spanclass="n">printf</span><spanclass="p">(</span><spanclass="s">"Fail%sLine%d:[%s]</span><spanclass="se">\n</span><spanclass="s">"</span><spanclass="p">,</span><spanclass="n">_testname</span><spanclass="p">,</span><spanclass="mi">244</span><spanclass="p">,</span><spanclass="s">"tree!=NULL"</span><spanclass="p">);</span><spanclass="p">};</span><spanclass="k">if</span><spanclass="p">(</span><spanclass="o">!</span><spanclass="p">(</span><spanclass="n">tree</span><spanclass="o">-&gt;</span><spanclass="n">root</span><spanclass="o">==</span><spanclass="p">((</span><spanclass="kt">void</span><spanclass="o">*</span><spanclass="p">)</span><spanclass="mi">0</span><spanclass="p">)))</span><spanclass="p">{</span><spanclass="n">_failures</span><spanclass="o">++</span><spanclass="p">;</span><spanclass="n">printf</span><spanclass="p">(</span><spanclass="s">"Fail%sLine%d:[%s]</span><spanclass="se">\n</span><spanclass="s">"</span><spanclass="p">,</span><spanclass="n">_testname</span><spanclass="p">,</span><spanclass="mi">245</span><spanclass="p">,</span><spanclass="s">"tree-&gt;root==NULL"</span><spanclass="p">);</span><spanclass="p">};</span><spanclass="k">if</span><spanclass="p">(</span><spanclass="o">!</span><spanclass="p">(</span><spanclass="n">tree_find</span><spanclass="p">(</span><spanclass="n">tree</span><spanclass="p">,</span><spanclass="s">"hello"</span><spanclass="p">)</span><spanclass="o">==</span><spanclass="p">((</span><spanclass="kt">void</span><spanclass="o">*</span><spanclass="p">)</span><spanclass="mi">0</span><spanclass="p">)))</span><spanclass="p">{</span><spanclass="n">_failures</span><spanclass="o">++</span><spanclass="p">;</span><spanclass="n">printf</span><spanclass="p">(</span><spanclass="s">"Fail%sLine%d:[%s]</span><spanclass="se">\n</span><spanclass="s">"</span><spanclass="p">,</span><spanclass="n">_testname</span><spanclass="p">,</span><spanclass="mi">247</span><spanclass="p">,</span><spanclass="s">"tree_find(tree,</span><spanclass="se">\"</span><spanclass="s">hello</span><spanclass="se">\"</span><spanclass="s">)==NULL"</span><spanclass="p">);</span><spanclass="p">};</span><spanclass="n">tree_delete</span><spanclass="p">(</span><spanclass="n">tree</span><spanclass="p">,</span><spanclass="p">((</span><spanclass="kt">void</span><spanclass="o">*</span><spanclass="p">)</span><spanclass="mi">0</span><spanclass="p">));</span><spanclass="k">if</span><spanclass="p">(</span><spanclass="o">!</span><spanclass="p">(</span><spanclass="n">count_net</span><spanclass="p">()</span><spanclass="o">==</span><spanclass="mi">0</span><spanclass="p">))</span><spanclass="p">{</span><spanclass="n">_failures</span><spanclass="o">++</span><spanclass="p">;</span><spanclass="n">printf</span><spanclass="p">(</span><spanclass="s">"Fail%sLine%d:[%s]</span><spanclass="se">\n</span><spanclass="s">"</span><spanclass="p">,</span><spanclass="n">_testname</span><spanclass="p">,</span><spanclass="mi">250</span><spanclass="p">,</span><spanclass="s">"count_net()==0"</span><spanclass="p">);</span><spanclass="p">};</span><spanclass="k">if</span><spanclass="p">(</span><spanclass="n">_failures</span><spanclass="o">==</span><spanclass="mi">0</span><spanclass="p">)</span><spanclass="p">{</span><spanclass="n">printf</span><spanclass="p">(</span><spanclass="s">"PASStest%s</span><spanclass="se">\n\n</span><spanclass="s">"</span><spanclass="p">,</span><spanclass="n">_testname</span><spanclass="p">);</span><spanclass="p">}</span><spanclass="k">else</span><spanclass="p">{</span><spanclass="n">printf</span><spanclass="p">(</span><spanclass="s">"FAILtest%swith%derrors</span><spanclass="se">\n\n</span><spanclass="s">"</span><spanclass="p">,</span><spanclass="n">_testname</span><spanclass="p">,</span><spanclass="n">_failures</span><spanclass="p">);</span><spanclass="p">};</span><spanclass="k">return</span><spanclass="p">(</span><spanclass="n">_failures</span><spanclass="p">);</span><spanclass="p">}</span></code></pre></div></div><p>Ifyoulookclosely,youcanseetheoriginalbitsofcode(like<codeclass="language-plaintexthighlighter-rouge">tree_delete(tree,NULL)</code>(with<codeclass="language-plaintexthighlighter-rouge">NULL</code>expanded!)aswellastheexpanded<codeclass="language-plaintexthighlighter-rouge">EXPECT</code>andothermacros.</p><p>Thenthe<codeclass="language-plaintexthighlighter-rouge">main()</code>programrunsaseriesofunittests,andprintsanerrorifanyofthemfailed:</p><divclass="language-chighlighter-rouge"><divclass="highlight"><preclass="highlight"><code><spanclass="kt">int</span><spanclass="nf">main</span><spanclass="p">(</span><spanclass="k">const</span><spanclass="kt">int</span><spanclass="n">argc</span><spanclass="p">,</span><spanclass="k">const</span><spanclass="kt">char</span><spanclass="o">*</span><spanclass="n">argv</span><spanclass="p">[])</span><spanclass="p">{</span><spanclass="kt">int</span><spanclass="n">failed</span><spanclass="o">=</span><spanclass="mi">0</span><spanclass="p">;</span><spanclass="n">failed</span><spanclass="o">+=</span><spanclass="n">test_newtree0</span><spanclass="p">();</span><spanclass="n">failed</span><spanclass="o">+=</span><spanclass="n">test_newtree1</span><spanclass="p">();</span><spanclass="n">failed</span><spanclass="o">+=</span><spanclass="n">test_treeleft</span><spanclass="p">();</span><spanclass="n">failed</span><spanclass="o">+=</span><spanclass="n">test_treefind</span><spanclass="p">();</span><spanclass="k">if</span><spanclass="p">(</span><spanclass="n">failed</span><spanclass="p">)</span><spanclass="p">{</span><spanclass="n">printf</span><spanclass="p">(</span><spanclass="s">"FAIL%dtestcases</span><spanclass="se">\n</span><spanclass="s">"</span><spanclass="p">,</span><spanclass="n">failed</span><spanclass="p">);</span><spanclass="k">return</span><spanclass="n">failed</span><spanclass="p">;</span><spanclass="p">}</span><spanclass="k">else</span><spanclass="p">{</span><spanclass="n">printf</span><spanclass="p">(</span><spanclass="s">"PASSalltestcases</span><spanclass="se">\n</span><spanclass="s">"</span><spanclass="p">);</span><spanclass="k">return</span><spanclass="mi">0</span><spanclass="p">;</span><spanclass="p">}</span><spanclass="p">}</span></code></pre></div></div><p>Here’swhattheoutputlookslikewheneverythingpasses:</p><divclass="language-plaintexthighlighter-rouge"><divclass="highlight"><preclass="highlight"><code>$makeunitgcc-Wall-pedantic-std=c11-ggdb-c-omemory.omemory.cgcc-Wall-pedantic-std=c11-ggdb-DUNIT_TESTtree.cmemory.o-ounittest./unittestPASStestnewtree0PASStestnewtree1PASStesttreeleftann(1)bob(2)cheri(3)dave(4)PASStesttreefindPASSalltestcases</code></pre></div></div><p>Toseewhatitlookslikewhenafailureoccurs,Icouldeitherbreakthetreecode(whichI’drathernotdo!)orbreakthetestcode;I’lldothelatterbychangingoneline</p><divclass="language-chighlighter-rouge"><divclass="highlight"><preclass="highlight"><code><spanclass="n">EXPECT</span><spanclass="p">(</span><spanclass="n">tree_find</span><spanclass="p">(</span><spanclass="n">tree</span><spanclass="p">,</span><spanclass="s">"abcd"</span><spanclass="p">)</span><spanclass="o">==</span><spanclass="o">&amp;</span><spanclass="n">data</span><spanclass="p">);</span></code></pre></div></div><p>to</p><divclass="language-chighlighter-rouge"><divclass="highlight"><preclass="highlight"><code><spanclass="n">EXPECT</span><spanclass="p">(</span><spanclass="n">tree_find</span><spanclass="p">(</span><spanclass="n">tree</span><spanclass="p">,</span><spanclass="s">"abcd"</span><spanclass="p">)</span><spanclass="o">==</span><spanclass="nb">NULL</span><spanclass="p">);</span></code></pre></div></div><p>andrunthetestagain:</p><divclass="language-plaintexthighlighter-rouge"><divclass="highlight"><preclass="highlight"><code>$make-kunitgcc-Wall-pedantic-std=c11-ggdb-DUNIT_TESTtree.cmemory.o-ounittest./unittestPASStestnewtree0Failnewtree1Line271:[tree_find(tree,"abcd")==NULL]FAILtestnewtree1with1errorsPASStesttreeleftann(1)bob(2)cheri(3)dave(4)PASStesttreefindFAIL1testcasesmake:***[unit]Error1</code></pre></div></div><p>NoticehowMakeexitedwitherror;that’sbecause<codeclass="language-plaintexthighlighter-rouge">unittest</code>exitedwithnon-zerostatus:notethecodeatendof<codeclass="language-plaintexthighlighter-rouge">main()</code>.</p><h2id="cunit-test-framework">CUnittestframework</h2><p>Althoughwedon’thavetimetostudyanyprofessionalframeworks,thereareseveralCunittestingframeworksavailableontheInternet:<ahref="https://libcheck.github.io/check/">Check</a>and<ahref="http://cunit.sourceforge.net/">CUnit</a>.Here’san<ahref="http://cunit.sourceforge.net/example.html">example</a>usingCUnit.</p><h2id="activity">Activity</h2><p>Intoday’s<ahref="activity.html">activity</a>yourgroupwilldesignaunittestforoneofourothermodules.</p></div></article></div></div><footerclass="site-footer"><divclass="wrapper"><h2class="footer-heading">Engs50(CS50)--DartmouthCollege</h2><p><fontsize=-1>ThisversionofthecourseisbaseduponthosedesignedbyProfessorsPalmer,Kotz,Zhou,Campbell,andBalkcom.Iamdeeplyindebtedtotheseoutstandingeducators.--<ahref="https://engineering.dartmouth.edu/people/faculty/stephen-taylor/">StephenTaylor</a></font></p><p><small>Thispagewaslastupdatedon<strong>2023-01-05</strong>at<strong>11:31</strong>.</small></p></div></footer></body></html>
