https://thayer.github.io/engs50/Notes/bash3/
2
82787
<!DOCTYPEhtml><html><head><metacharset="utf-8"><metahttp-equiv="X-UA-Compatible"content="IE=edge"><metaname="viewport"content="width=device-width,initial-scale=1"><title>IntroductiontoBashProgramming</title><metaname="description"content="InEngs50youwilllearnhowtodesign&buildlarge,reliable,maintainable,andunderstandablesoftwaresystems.IntheprocessyouwilllearntoprograminCwithUnixdevelopmenttools."><linkrel="shortcuticon"href="/engs50/50.png"/><linkrel="stylesheet"href="/engs50/css/main.css"><linkrel="canonical"href="/engs50/Notes/bash3/"></head><body><headerclass="site-header"><aclass="site-title"href="/engs50/"><imgwidth=48align=centersrc="/engs50/50.png"alt="icon">Engs50(CS50)</a><navclass="site-nav">[<ahref="/engs50/Labs/">Labs</a>][<ahref="/engs50/Notes/">Notes</a>][<ahref="/engs50/Reading/">Reading</a>][<ahref="/engs50/Resources/">Resources</a>][<ahref="/engs50/Examples/">Examples</a>]</nav></header><divclass="page-content"><divclass="wrapper"><articleclass="post"><headerclass="post-header"><h1class="post-title">IntroductiontoBashProgramming</h1></header><divclass="post-content"><p>Taketimeforthisweek’s<ahref="/engs50/Reading/#week-1">reading</a>;it’sshort,important,anduseful.</p><p>Wearenowfamiliarwiththeshellandafewcommands.</p><p>Inthislecture,wediscussshellprogrammingusingbash.Themaingoalistowriteyourownscripts.Butwhatare<em>scripts?</em>Andwhataretheyusefulfor?</p><h3id="goals">Goals</h3><p>Welearnthefollowingtoday:</p><ul><li>Understandingshellscriptsyntaxandconstructs</li><li>Writingsimpleinteractivescripts</li><li>Writingandexecutingyourfirstshellscript</li><li>Understandingmoreadvancedconstructsthroughexamples</li></ul><h3id="class-scripts">Classscripts</h3><p>IrecordedmyTerminalwindowstodayon<ahref="/engs50/Notes/bash3/script-mac.txt">Mac</a>and<ahref="/engs50/Notes/bash3/script-flume.txt">flume</a>.</p><h2id="interactive-mode-and-shell-scripts">Interactivemodeandshellscripts</h2><p>Theshellcanbeusedintwodifferentways:</p><ul><li><em>interactivemode</em>,whichallowsyoutoentermorethanonecommandinteractivelytotheshell.Wehavebeendoingthisalready.However,interactivemodeallowsyoutoenteraseriesofcommands;and</li><li><em>shellscripts</em>,inwhichtheshellreadscommandsaseriesofcommands(orcomplexprograms)fromatextfile.</li></ul><p>Theinteractivemodeisfineforenteringahandfulofcommandsbutitbecomescumbersomefortheusertokeepre-enteringthesecommandsinteractively.Itisbettertostorethecommandsinatextfilecalledashellscript,or<em>script</em>forshort,andexecutethescriptwhenneeded.Inthisway,thescriptispreservedsoyouandotheruserscanuseitagain.</p><p>InadditiontocallingUnixcommands(e.g.,<codeclass="language-plaintexthighlighter-rouge">grep</code>,<codeclass="language-plaintexthighlighter-rouge">cd</code>,<codeclass="language-plaintexthighlighter-rouge">rm</code>)shellscriptscanalsoinvokecompiledprograms(e.g.,Cprograms)andothershellscripts.Shellprogrammingalsoincludescontrol-flowcommandstotestconditions(<codeclass="language-plaintexthighlighter-rouge">if...then</code>)ortodoataskrepeatedly(<codeclass="language-plaintexthighlighter-rouge">for...do</code>).Thesecontrolstructurecommandsfoundinmanyotherlanguages(suchasC,orotherscriptinglanguageslikepython)allowtheprogrammertoquicklywritefairlysophisticatedshellprogramstodoanumberofdifferenttasks.</p><p>Likepython,andunlikeCorJava,shellscriptsarenot<em>compiled</em>;rather,theyare<em>interpreted</em>andexecutedbytheshellitself.</p><p>Shellscriptsareusedformanyreasons-buildingandconfiguringsystemsorenvironments,prototypingcode,oranarrayofrepetitivetasksthatprogrammersdo.ShellprogrammingismainlybuiltontheUnixshellcommandsandutilities;reuseoftheseexistingprogramsenablesprogrammerstosimplybuildnewprogramstotacklefairlycomplexjobs.</p><h2id="separating-groups-of-commands-using-">Separatinggroupsofcommandsusing‘;’</h2><p>Let’sstarttobuildupourknowledgeofhowscriptsworkbyfirstlookingatsomebasicoperationsoftheshell.TheUnixshellallowsfortheunconditionalexecutionofcommandsandallowsforrelatedcommandstobekeptadjacentasacommandsequenceusingthesemicoloncharacterasshownbelow:</p><divclass="language-bashhighlighter-rouge"><divclass="highlight"><preclass="highlight"><code><spanclass="o">[</span>cs50@flume~]<spanclass="nv">$</span><spanclass="nb">echo</span>Directorylisting<spanclass="p">;</span><spanclass="nb">date</span><spanclass="p">;</span><spanclass="nb">ls</span>DirectorylistingFriApr108:58:08EDT2016Archive/primesprivate/public_html/resources/studentsweb@ziplab1.sh<spanclass="k">*</span><spanclass="o">[</span>cs50@flume~]<spanclass="err">$</span></code></pre></div></div><h2id="exit-status---who-cares">Exitstatus-whocares?</h2><p>Whenusingtheshellinteractivelyitisoftenclearwhenwehavemadeamistake-theshellwarnsaboutincorrectsyntax,andcomplainsaboutinvalidswitchesormissingfiles.Thesewarningsandcomplaintscancomefromtheshell’sparserandfromtheprogrambeingrun(forexample,from<codeclass="language-plaintexthighlighter-rouge">ls</code>).</p><p>Errormessagesprovidevisualcluesthatsomethingiswrong,allowingustoadjustthecommandtogetitright.</p><p>Commandsalsoinformtheshellexplicitlywhetherthecommandhasterminatedsuccessfullyorunsuccessfullyduetosomeerror.Commandsdothisbyreturningan<em>exitstatus</em>,whichisrepresentedasanintegervaluemadeavailabletotheshellandothercommands,programs,andscripts.</p><p>Theshellunderstandsanexitstatusof<codeclass="language-plaintexthighlighter-rouge">0</code>toindicatesuccessfulexecution,andanyothervalue(alwayspositive)toindicatefailureofsomesort.</p><p>Theshellenvironmentvalue<codeclass="language-plaintexthighlighter-rouge">$?</code>isupdatedeachtimeacommandexits.</p><p>Whatdowemeanbythat?</p><divclass="language-bashhighlighter-rouge"><divclass="highlight"><preclass="highlight"><code><spanclass="o">[</span>cs50@flume~]<spanclass="nv">$</span><spanclass="nb">echo</span>AprilFoolAprilFool<spanclass="o">[</span>cs50@flume~]<spanclass="nv">$</span><spanclass="nb">echo</span><spanclass="nv">$?</span>0<spanclass="o">[</span>cs50@flume~]<spanclass="nv">$</span><spanclass="nb">ls</span>AprilFool<spanclass="nb">ls</span>:cannotaccessApril:Nosuchfileordirectory<spanclass="nb">ls</span>:cannotaccessFool:Nosuchfileordirectory<spanclass="o">[</span>cs50@flume~]<spanclass="nv">$</span><spanclass="nb">echo</span><spanclass="nv">$?</span>2<spanclass="o">[</span>cs50@flume~]<spanclass="nv">$</span></code></pre></div></div><h2id="conditional-sequences---basic-constructs">Conditionalsequences-basicconstructs</h2><p>Whydoweneedtousetheexitstatus?</p><p>Oftenwewanttoexecuteacommandbasedonthesuccessorfailureofanearliercommand.Forexample,wemayonlywishtoremovefilesifweareinthecorrectdirectory,orperhapswewanttobecarefultoonlyappendinfotoafileifweknowitalreadyexists.</p><p>Theshellprovidesbothconjunction(and)anddisjunction(or)basedonpreviouscommands.Theseareusefulconstructsforwritingdecision-makingscripts.Takealookattheexamplebelowinwhichwemakethreedirectories,thentrytoremovethefirst:</p><divclass="language-bashhighlighter-rouge"><divclass="highlight"><preclass="highlight"><code><spanclass="o">[</span>cs50@flume~]<spanclass="nv">$</span><spanclass="nb">mkdir</span>labs<spanclass="o">&amp;&amp;</span><spanclass="nb">mkdir</span>labs/lab1labs/labs2<spanclass="o">[</span>cs50@flume~]<spanclass="nv">$</span><spanclass="nb">rmdir</span>labs<spanclass="o">||</span><spanclass="nb">echo</span>whoops!<spanclass="nb">rmdir</span>:failedtoremove<spanclass="sb">`</span>labs<spanclass="s1">':Directorynotemptywhoops![cs50@flume~]$</span></code></pre></div></div><p>Inthefirstexample,<codeclass="language-plaintexthighlighter-rouge">&amp;&amp;</code>(withoutanyspaces)specifiesthatthesecondcommandshouldbeonlyexecutedifthefirstcommandsucceeds(withanexitstatusof<codeclass="language-plaintexthighlighter-rouge">0</code>)-i.e.,weonlymakethesubdirectoriesifwecanmakethetopdirectory.</p><p>Inthesecondexample,(<codeclass="language-plaintexthighlighter-rouge">||</code>)(withoutanyspaces)requeststhatthesecondcommandisonlyexecutedifthefirstcommandfailed(withanexitstatusotherthan<codeclass="language-plaintexthighlighter-rouge">0</code>).</p><h2id="conditional-execution-using-if-then-else">Conditionalexecutionusingif,then,else</h2><p>Therearemanysituationswhenweneedtoexecutecommandsbasedontheoutcomeofanearliercommand.</p><divclass="language-bashhighlighter-rouge"><divclass="highlight"><preclass="highlight"><code><spanclass="k">if</span>command0<spanclass="p">;</span><spanclass="k">then</span>command1command2<spanclass="k">fi</span></code></pre></div></div><p>Here<codeclass="language-plaintexthighlighter-rouge">command1</code>and<codeclass="language-plaintexthighlighter-rouge">command2</code>(andanyothercommandsthatmightbeinput)willbeexecutedifandonlyif<codeclass="language-plaintexthighlighter-rouge">command0</code>returnsasuccessfulortruevalue(i.e.,itsexitstatusis<codeclass="language-plaintexthighlighter-rouge">0</code>).</p><blockquote><p>Thefactthat<codeclass="language-plaintexthighlighter-rouge">0</code>meanstrueisconfusingformanypeople!(Inmanyhigh-levellanguages-likeC-zeromeansfalseandnon-zeromeanstrue;technologyisn’talwaysconsistent.)ThereasonUnixuses<codeclass="language-plaintexthighlighter-rouge">0</code>forsuccessisthatthereisonlyone<codeclass="language-plaintexthighlighter-rouge">0</code>,buttherearemanynon-zeronumbers;thus,<codeclass="language-plaintexthighlighter-rouge">0</code>implies‘alliswell’whereasnon-zeroimplies‘somethingwentwrong’,andthespecificnon-zerovaluecanconveyinformationabout<em>what</em>wentwrong.</p></blockquote><p>Similarly,wemayhavecommandstoexecuteiftheconditionalfails.</p><divclass="language-bashhighlighter-rouge"><divclass="highlight"><preclass="highlight"><code><spanclass="k">if</span>command0<spanclass="p">;</span><spanclass="k">then</span>command1command2<spanclass="k">else</span>command3command4<spanclass="k">fi</span></code></pre></div></div><p>Here<codeclass="language-plaintexthighlighter-rouge">command3</code>and<codeclass="language-plaintexthighlighter-rouge">command4</code>willbeexecutedifandonlyif<codeclass="language-plaintexthighlighter-rouge">command0</code>fails.</p><h3id="first-interactive-shell-program">FirstInteractiveShellProgram</h3><p>Enteringinteractivescripts-thatis,atinysequenceofcommands,typedatthekeyboardinaninteractiveshell-isaneasywaytogetthesenseofanewscriptinglanguageortotryoutasetofcommands.Duringaninteractivesessiontheshellsimplyallowsyoutoenteran‘one-command’interactiveprogramatthecommandlineandthenexecutesit.</p><divclass="language-bashhighlighter-rouge"><divclass="highlight"><preclass="highlight"><code><spanclass="o">[</span>cs50@flume~]<spanclass="nv">$</span><spanclass="k">if</span><spanclass="nb">cp</span>studentsstudents.bak<spanclass="o">&gt;</span><spanclass="k">then</span><spanclass="o">&gt;</span><spanclass="nb">echo</span><spanclass="nv">$?</span>copysucceeded!<spanclass="o">&gt;</span><spanclass="k">else</span><spanclass="o">&gt;</span><spanclass="nb">echo</span><spanclass="nv">$?</span>copyfailed!<spanclass="o">&gt;</span><spanclass="k">fi</span>0copysucceeded!<spanclass="o">[</span>cs50@flume~]<spanclass="err">$</span></code></pre></div></div><p>The<codeclass="language-plaintexthighlighter-rouge">&gt;</code>characteristhe<em>secondaryprompt</em>,issuedbytheshellindicatingthatmoreinputisexpected.</p><p>Theexitstatusofthe<codeclass="language-plaintexthighlighter-rouge">cp</code>commandisusedbytheshelltodecidewhethertoexecutethe<codeclass="language-plaintexthighlighter-rouge">then</code>clauseorthe<codeclass="language-plaintexthighlighter-rouge">else</code>clause.Justforyucks,Ihad<codeclass="language-plaintexthighlighter-rouge">echo</code>showustheexitstatus<codeclass="language-plaintexthighlighter-rouge">$?</code>;theaboveexampleconfirmsthat<codeclass="language-plaintexthighlighter-rouge">0</code>statusmeans‘true’andtriggeredthe<codeclass="language-plaintexthighlighter-rouge">then</code>clause.</p><p>Wecaninverttheconditionaltestbyprecedingitwith<codeclass="language-plaintexthighlighter-rouge">!</code>,asinmanyprogramminglanguages:</p><divclass="language-bashhighlighter-rouge"><divclass="highlight"><preclass="highlight"><code><spanclass="o">[</span>cs50@flume~]<spanclass="nv">$</span><spanclass="k">if</span><spanclass="o">!</span><spanclass="nb">cp</span>studentsstudents.bak<spanclass="o">&gt;</span><spanclass="k">then</span><spanclass="o">&gt;</span><spanclass="nb">echo</span>copyfailed!<spanclass="o">&gt;</span><spanclass="k">fi</span><spanclass="o">[</span>cs50@flume~]<spanclass="nv">$</span></code></pre></div></div><blockquote><p>AstutereadersmightnotethatIdidnotquoteorescapethe<codeclass="language-plaintexthighlighter-rouge">!</code>intheechocommands.I’venoticedthatthe<codeclass="language-plaintexthighlighter-rouge">!</code>isnotspecialifitcomeslast,whichishandyforwritinginterjections!</p></blockquote><p>The<codeclass="language-plaintexthighlighter-rouge">command0</code>canactuallybeasequenceorpipeline.Theexitstatusofthelastcommandisusedtodeterminetheconditionaloutcome.</p><divclass="language-bashhighlighter-rouge"><divclass="highlight"><preclass="highlight"><code><spanclass="o">[</span>cs50@flume~]<spanclass="nv">$</span><spanclass="k">if</span><spanclass="nb">mkdir</span>backup<spanclass="o">&amp;&amp;</span><spanclass="nb">cp</span>studentsbackup/students<spanclass="o">&gt;</span><spanclass="k">then</span><spanclass="o">&gt;</span><spanclass="nb">echo</span>backupsuccess<spanclass="o">&gt;</span><spanclass="k">else</span><spanclass="o">&gt;</span><spanclass="nb">echo</span>backupfailed<spanclass="o">&gt;</span><spanclass="k">fi</span>backupsuccess<spanclass="o">[</span>cs50@flume~]<spanclass="nv">$</span></code></pre></div></div><p>Intheaboveexample,<codeclass="language-plaintexthighlighter-rouge">then</code>wasonthenextlineinsteadofattheendofthe<codeclass="language-plaintexthighlighter-rouge">if</code>line.That’sastylisticchoice;ifyouwantitonthe<codeclass="language-plaintexthighlighter-rouge">if</code>lineyousimplyneedtoputasemicolon(<codeclass="language-plaintexthighlighter-rouge">;</code>)afterthe<codeclass="language-plaintexthighlighter-rouge">if</code>conditionandbeforetheword<codeclass="language-plaintexthighlighter-rouge">then</code>,asseenintheearlierexamples.</p><h3id="the-test-aka---command">Thetest,aka[]command</h3><p>The<codeclass="language-plaintexthighlighter-rouge">command0</code>providingtheexitstatusneednotbeanexternalcommand.Wecantestforseveralconditionsusingthebuilt-in<codeclass="language-plaintexthighlighter-rouge">test</code>or(interchangeably)the<codeclass="language-plaintexthighlighter-rouge">[]</code>command.Weusebothbelowbutwerecommendyouusethe<codeclass="language-plaintexthighlighter-rouge">[]</code>versionofthetestcommandbecause(a)itismorereadableand(b)it’smorecommonlyused.SupposeIwanttobackup<codeclass="language-plaintexthighlighter-rouge">students</code>onlyifitexists;the<codeclass="language-plaintexthighlighter-rouge">-f</code>switchtestswhetherthefollowingfilenamenamesanexistingfile.</p><divclass="language-bashhighlighter-rouge"><divclass="highlight"><preclass="highlight"><code><spanclass="o">[</span>cs50@flume~]<spanclass="nv">$</span><spanclass="k">if</span><spanclass="nb">test</span><spanclass="nt">-f</span>students<spanclass="o">&gt;</span><spanclass="k">then</span><spanclass="o">&gt;</span><spanclass="nb">mkdir</span>backup<spanclass="o">&amp;&amp;</span><spanclass="nb">cp</span>studentsbackup/students<spanclass="o">||</span><spanclass="nb">echo</span>backupfailed<spanclass="o">&gt;</span><spanclass="k">fi</span><spanclass="o">[</span>cs50@flume~]<spanclass="nv">$</span></code></pre></div></div><p>Rewrittenwith<codeclass="language-plaintexthighlighter-rouge">[]</code>,</p><divclass="language-bashhighlighter-rouge"><divclass="highlight"><preclass="highlight"><code><spanclass="o">[</span>cs50@flume~]<spanclass="nv">$</span><spanclass="k">if</span><spanclass="o">[</span><spanclass="nt">-f</span>students<spanclass="o">]</span><spanclass="o">&gt;</span><spanclass="k">then</span><spanclass="o">&gt;</span><spanclass="nb">mkdir</span>backup<spanclass="o">&amp;&amp;</span><spanclass="nb">cp</span>studentsbackup/students<spanclass="o">||</span><spanclass="nb">echo</span>backupfailed<spanclass="o">&gt;</span><spanclass="k">fi</span><spanclass="o">[</span>cs50@flume~]<spanclass="nv">$</span></code></pre></div></div><p>Morecommonly,the<codeclass="language-plaintexthighlighter-rouge">if</code>and<codeclass="language-plaintexthighlighter-rouge">then</code>arewrittenonthesameline,usingsemicolon:</p><divclass="language-bashhighlighter-rouge"><divclass="highlight"><preclass="highlight"><code><spanclass="o">[</span>cs50@flume~]<spanclass="nv">$</span><spanclass="k">if</span><spanclass="o">[</span><spanclass="nt">-f</span>students<spanclass="o">]</span><spanclass="p">;</span><spanclass="k">then</span><spanclass="o">&gt;</span><spanclass="nb">mkdir</span>backup<spanclass="o">&amp;&amp;</span><spanclass="nb">cp</span>studentsbackup/students<spanclass="o">||</span><spanclass="nb">echo</span>backupfailed<spanclass="o">&gt;</span><spanclass="k">fi</span><spanclass="o">[</span>cs50@flume~]<spanclass="nv">$</span></code></pre></div></div><p>Note,it’simportantthatyouleavespacesaroundthebracketsoryouwillgetsyntaxerrors.Thereareotheroptionsthatcanbeusedwiththe<codeclass="language-plaintexthighlighter-rouge">[]</code>command.</p><divclass="language-bashhighlighter-rouge"><divclass="highlight"><preclass="highlight"><code>OptionMeaning<spanclass="nt">-e</span>doesthefileexist?<spanclass="nt">-d</span>doesthedirectoryexist?<spanclass="nt">-f</span>doesthefileexistandisitanordinaryfile<spanclass="o">(</span>notadirectory<spanclass="o">)</span>?<spanclass="nt">-r</span>doesthefileexistandisitreadable?<spanclass="nt">-s</span>doesthefileexistandhaveasizegreaterthan0bytes<spanclass="nt">-w</span>doesthefileexistandisitwriteable?<spanclass="nt">-x</span>doesthefileexistandisitexecutable?</code></pre></div></div><p>Tolearnevenmoreaboutthe<codeclass="language-plaintexthighlighter-rouge">test</code>command,<codeclass="language-plaintexthighlighter-rouge">mantest</code>.</p><h2id="loops-for-lists">Loopsforlists</h2><p>Manycommandsacceptalistoffilesonthecommandlineandperformactionsoneachfileinturn.However,whatifweneedtoperformasequenceofcommandsoneachfileinthelistoffiles?Somecommandscanonlyhandleonefile(orargument)perinvocationsoweneedtoinvokethecommandmanytimes.</p><p>Theshellsupportsasimpleiterationoverlistsofvalues-typicallyoverlistsoffilenames.Inthefollowingexample,wemakea‘backup’copyofeachofourCfilesbyappendingthe<codeclass="language-plaintexthighlighter-rouge">.bak</code>extension.(Again,thisextensionisjustanamingconvention-Unixdoesn’tcare,nordoestheshell.)</p><divclass="language-bashhighlighter-rouge"><divclass="highlight"><preclass="highlight"><code><spanclass="o">[</span>cs50@flume~/example]<spanclass="nv">$</span><spanclass="nb">ls</span>hash.chash.c.datemakefileoutput.dataqueue.cREADMEsort.c<spanclass="o">[</span>cs50@flume~/example]<spanclass="nv">$</span><spanclass="k">for</span>i<spanclass="k">in</span><spanclass="k">*</span>.c<spanclass="o">&gt;</span><spanclass="k">do</span><spanclass="o">&gt;</span><spanclass="nb">echo</span>backup<spanclass="nv">$i</span><spanclass="o">&gt;</span><spanclass="nb">cp</span><spanclass="nv">$i</span><spanclass="nv">$i</span>.bak<spanclass="o">&gt;</span><spanclass="k">done</span>backuphash.cbackupqueue.cbackupsort.c<spanclass="o">[</span>cs50@flume~/example]<spanclass="nv">$</span><spanclass="nb">ls</span>hash.chash.c.dateoutput.dataqueue.c.baksort.chash.c.bakmakefilequeue.cREADMEsort.c.bak<spanclass="o">[</span>cs50@flume~/example]<spanclass="nv">$</span></code></pre></div></div><p>Noticethatthevariable<codeclass="language-plaintexthighlighter-rouge">i</code>isinstantiated,oneatatime,withthevalueofeachargumentinthelistprovidedafter<codeclass="language-plaintexthighlighter-rouge">in</code>,andthatvalueissubstitutedwherever<codeclass="language-plaintexthighlighter-rouge">$i</code>occurs.</p><p>Weshouldbemoredefensive,though,incaseoneofthefilenameshasaspaceinsideit;</p><divclass="language-bashhighlighter-rouge"><divclass="highlight"><preclass="highlight"><code><spanclass="o">[</span>cs50@flume~/example]<spanclass="nv">$</span><spanclass="k">for</span>i<spanclass="k">in</span><spanclass="k">*</span>.c<spanclass="o">&gt;</span><spanclass="k">do</span><spanclass="o">&gt;</span><spanclass="nb">echo</span>backup<spanclass="s2">"</span><spanclass="nv">$i</span><spanclass="s2">"</span><spanclass="o">&gt;</span><spanclass="nb">cp</span><spanclass="s2">"</span><spanclass="nv">$i</span><spanclass="s2">"</span><spanclass="s2">"</span><spanclass="nv">$i</span><spanclass="s2">.bak"</span><spanclass="o">&gt;</span><spanclass="k">done</span>backuphash.cbackupqueue.cbackupsort.c<spanclass="o">[</span>cs50@flume~/example]<spanclass="nv">$</span></code></pre></div></div><p>Asexpectedwemayplaceasmanycommandsaswewantinsidethebodyofaloop.Wecanuseanycombinationofotherif/elsetestsandnestedloops,justlikeintraditionallanguagessuchasC.</p><p>Wearenotlimitedtousenamesoffiles(asgeneratedbyfilenameexpansion)inourlist:</p><divclass="language-bashhighlighter-rouge"><divclass="highlight"><preclass="highlight"><code><spanclass="o">[</span>cs50@flume~]<spanclass="nv">$</span><spanclass="k">for</span>house<spanclass="k">in</span>Allen<spanclass="s2">"EastWheelock"</span><spanclass="s2">"NorthPark"</span>SchoolSouthWestLLC<spanclass="o">&gt;</span><spanclass="k">do</span><spanclass="o">&gt;</span><spanclass="nb">echo</span><spanclass="nv">$house</span>isthebesthouse!<spanclass="o">&gt;</span><spanclass="k">done</span>Allenisthebesthouse!EastWheelockisthebesthouse!NorthParkisthebesthouse!Schoolisthebesthouse!Southisthebesthouse!Westisthebesthouse!LLCisthebesthouse!<spanclass="o">[</span>cs50@flume~]<spanclass="nv">$</span></code></pre></div></div><p>Wecanusethe<em>contentsofafile</em>toprovidethelistusedby<codeclass="language-plaintexthighlighter-rouge">for</code>:</p><divclass="language-bashhighlighter-rouge"><divclass="highlight"><preclass="highlight"><code><spanclass="o">[</span>cs50@flume~]<spanclass="nv">$</span><spanclass="nb">cat</span>LFlistJohn.P.Kotz.19@dartmouth.edujoel.j.katticaran.ug@dartmouth.eduKaya.M.Thomas.17@dartmouth.edutrevor.l.davis.18@dartmouth.eduThomas.D.Kim.19@dartmouth.edukyle.dotterrer.18@dartmouth.edu<spanclass="o">[</span>cs50@flume~]<spanclass="nv">$</span><spanclass="k">for</span>i<spanclass="k">in</span><spanclass="si">$(</span>&lt;LFlist<spanclass="si">)</span><spanclass="p">;</span><spanclass="k">do</span><spanclass="nb">echo</span>hello<spanclass="s2">"</span><spanclass="nv">$i</span><spanclass="s2">"</span><spanclass="p">;</span><spanclass="k">done</span>helloJohn.P.Kotz.19@dartmouth.eduhellojoel.j.katticaran.ug@dartmouth.eduhelloKaya.M.Thomas.17@dartmouth.eduhellotrevor.l.davis.18@dartmouth.eduhelloThomas.D.Kim.19@dartmouth.eduhellokyle.dotterrer.18@dartmouth.edu<spanclass="o">[</span>cs50@flume~]<spanclass="nv">$</span></code></pre></div></div><p>Noticethespecialshellsyntax<codeclass="language-plaintexthighlighter-rouge">$(&lt;filename)</code>,whichmeanstosubstitutethecontentsof<codeclass="language-plaintexthighlighter-rouge">filename</code>.Anyspacesornewlinesinthefilewillcausetheshelltodelineate<em>words</em>thatbecomeargumentsto<codeclass="language-plaintexthighlighter-rouge">for</code>.</p><p>Theexamplealsodemonstrateshowonecanusesemicolonstowriteasimpleloopallononeline!</p><blockquote><p>Infact,ifyoutypeamulti-line<codeclass="language-plaintexthighlighter-rouge">if</code>or<codeclass="language-plaintexthighlighter-rouge">for</code>statement,thenexecuteit,andlateruseup-arrow(orctrl-P)tohavetheshellretrieveyourearliercommand,you’llseethatitformatsitthisway.</p></blockquote><p>Wecanevenusethe<em>outputofacommand</em>toprovidethelistusedby<codeclass="language-plaintexthighlighter-rouge">for</code>:</p><divclass="language-bashhighlighter-rouge"><divclass="highlight"><preclass="highlight"><code><spanclass="o">[</span>cs50@flume~]<spanclass="nv">$</span><spanclass="k">for</span>i<spanclass="k">in</span><spanclass="si">$(</span><spanclass="nb">sed</span><spanclass="s1">'s/\..*/!/'</span>LFlist|<spanclass="nb">sort</span><spanclass="si">)</span><spanclass="p">;</span><spanclass="k">do</span><spanclass="nb">echo</span>hello<spanclass="nv">$i</span><spanclass="p">;</span><spanclass="k">done</span>helloJohn!helloKaya!helloThomas!hellojoel!hellokyle!hellotrevor!<spanclass="o">[</span>cs50@flume~]<spanclass="nv">$</span></code></pre></div></div><p>Indeed,inthiscase,we’veusedapipelineoftwocommandstoproducethelistofargumentsto<codeclass="language-plaintexthighlighter-rouge">for</code>.</p><blockquote><p>Youmayseeoldscripts(oroldpeople!)usingtheold-fashionedsyntaxinwhichthecommandissurroundedbyback-quotes,<codeclass="language-plaintexthighlighter-rouge">`command`</code>,insteadof<codeclass="language-plaintexthighlighter-rouge">$(command)</code>;thelatterisarguablymorereadableand,sometimes,nestable.</p></blockquote><h2id="first-shell-script">FirstShellScript</h2><p>Upuntilnowwehaveenteredscriptsinteractivelyintotheshell.Itisapaintohavetokeepre-enteringscriptsinteractively.Itisbettertostorethescriptcommandsinatextfileandthenexecutethescriptwhenweneedit.Sohowdowedothat?</p><p>Simple!Writethecommandsinafile,andask<codeclass="language-plaintexthighlighter-rouge">bash</code>toreadcommandsfromthefileinsteadoffromthekeyboard.</p><p>Forexample,wecanputoursimplebackupscriptintoafilecalled<codeclass="language-plaintexthighlighter-rouge">backup.sh</code>:</p><divclass="language-bashhighlighter-rouge"><divclass="highlight"><preclass="highlight"><code><spanclass="o">[</span>cs50@flume~/example]<spanclass="nv">$</span><spanclass="nb">cat</span><spanclass="o">&gt;</span>backup.sh<spanclass="k">for</span>i<spanclass="k">in</span><spanclass="k">*</span>.c<spanclass="k">do</span><spanclass="nb">echo</span>backup<spanclass="s2">"</span><spanclass="nv">$i</span><spanclass="s2">"</span><spanclass="nb">cp</span><spanclass="s2">"</span><spanclass="nv">$i</span><spanclass="s2">"</span><spanclass="s2">"</span><spanclass="nv">$i</span><spanclass="s2">.bak"</span><spanclass="k">done</span><spanclass="o">[</span>cs50@flume~/example]<spanclass="nv">$</span>bashbackup.shbackuphash.cbackupqueue.cbackupsort.c<spanclass="o">[</span>cs50@flume~/example]<spanclass="nv">$</span></code></pre></div></div><p>HereI’vetypeditatthekeyboard,butformorecomplexscripts,youwouldofcoursewanttouseatexteditor.</p><p>Indeed,wecangofurther,andmakethefileintoacommandexecutableattheshellprompt;todoso,youshould</p><ol><li>addaspecialstring<codeclass="language-plaintexthighlighter-rouge">#!/bin/bash</code>tothefirstline,</li><li>makeitexecutable(with<codeclass="language-plaintexthighlighter-rouge">chmod</code>),and</li><li>either<ul><li>addittoadirectoryonour<codeclass="language-plaintexthighlighter-rouge">PATH</code>,or</li><li>typeitspathnameatthecommandline.</li></ul></li></ol><p>So,for<codeclass="language-plaintexthighlighter-rouge">backup.sh</code>,itlookslikethis:</p><divclass="language-bashhighlighter-rouge"><divclass="highlight"><preclass="highlight"><code><spanclass="o">[</span>cs50@flume~/example]<spanclass="nv">$</span>emacsbackup.sh<spanclass="o">[</span>cs50@flume~/example]<spanclass="nv">$</span><spanclass="nb">cat</span>backup.sh<spanclass="c">#!/bin/bash</span><spanclass="k">for</span>i<spanclass="k">in</span><spanclass="k">*</span>.c<spanclass="k">do</span><spanclass="nb">echo</span>backup<spanclass="s2">"</span><spanclass="nv">$i</span><spanclass="s2">"</span><spanclass="nb">cp</span><spanclass="s2">"</span><spanclass="nv">$i</span><spanclass="s2">"</span><spanclass="s2">"</span><spanclass="nv">$i</span><spanclass="s2">.bak"</span><spanclass="k">done</span><spanclass="o">[</span>cs50@flume~/example]<spanclass="nv">$</span><spanclass="nb">chmod</span>+xbackup.sh<spanclass="o">[</span>cs50@flume~/example]<spanclass="nv">$</span><spanclass="nb">ls</span><spanclass="nt">-l</span>backup.sh<spanclass="nt">-rwxr-xr-x</span>1cs50cs5072Apr315:28backup.sh<spanclass="k">*</span><spanclass="o">[</span>cs50@flume~/example]<spanclass="nv">$</span>./backup.shbackuphash.cbackupqueue.cbackupsort.c<spanclass="o">[</span>cs50@flume~/example]<spanclass="err">$</span></code></pre></div></div><p>Thereareacoupleofthingstonoteaboutthisexample.</p><p>First,thereisthe<codeclass="language-plaintexthighlighter-rouge">#!/bin/bash</code>line.Whatdoesthismean?Typically,the<codeclass="language-plaintexthighlighter-rouge">#</code>inthefirstcolumnofafiledenotesthestartofacommentuntiltheendoftheline.Indeed,inthiscase,thislineistreatedasacommentby<codeclass="language-plaintexthighlighter-rouge">bash</code>.<em>Unix,however,readsthatlinewhenyouexecutethefileandusesittodeterminewhichcommandshouldbefedthisfile;</em>thus,ineffect,Unixwillexecute<codeclass="language-plaintexthighlighter-rouge">/bin/bash./backup.sh</code>.Then<codeclass="language-plaintexthighlighter-rouge">bash</code>readsthefileandinterpretsitscommands.The<codeclass="language-plaintexthighlighter-rouge">#!/bin/bash</code>mustbethefirstlineofthefile,exactlylikethat-nospaces.</p><p>Second,thereis<codeclass="language-plaintexthighlighter-rouge">chmod+x</code>,whichsetsthe‘execute’permissiononthefile.(Noticethe‘x’charactersinthefilepermissionsdisplayedby<codeclass="language-plaintexthighlighter-rouge">ls</code>.)Unixwillnotexecutefilesthatdonothave‘execute’permission,andtheshellwon’teventry.</p><p>Third,weusedthepathname<codeclass="language-plaintexthighlighter-rouge">./backup.sh</code>whentreatingourscriptasacommand,because<codeclass="language-plaintexthighlighter-rouge">.</code>isnotonour<codeclass="language-plaintexthighlighter-rouge">PATH</code>.If<codeclass="language-plaintexthighlighter-rouge">.</code>wereonour<codeclass="language-plaintexthighlighter-rouge">PATH</code>,wecouldhavetypedjust<codeclass="language-plaintexthighlighter-rouge">backup.sh</code>.</p><blockquote><p>Itisverytemptingtohave<codeclass="language-plaintexthighlighter-rouge">.</code>onyour<codeclass="language-plaintexthighlighter-rouge">PATH</code>,butitisabigsecurityrisk.Ifyou<codeclass="language-plaintexthighlighter-rouge">cd</code>toadirectorywithanexecutablefilecalled,say,<codeclass="language-plaintexthighlighter-rouge">ls</code>andyoudon’tnotice,badthingsmighthappenwhenyoutypethecommand<codeclass="language-plaintexthighlighter-rouge">ls</code>.If<codeclass="language-plaintexthighlighter-rouge">.</code>isonyour<codeclass="language-plaintexthighlighter-rouge">PATH</code>before<codeclass="language-plaintexthighlighter-rouge">/bin</code>youwillrunthelocalcommand<codeclass="language-plaintexthighlighter-rouge">./ls</code>insteadoftheofficial<codeclass="language-plaintexthighlighter-rouge">/bin/ls</code>…andthelocal<codeclass="language-plaintexthighlighter-rouge">ls</code>maybemaliciousanddosomethingbad!</p></blockquote><p>Fourth,thisscripthasnocomments.Wereallyshouldimproveit;see<ahref="/engs50/Examples/backup.sh">backup.sh</a>.</p><divclass="language-bashhighlighter-rouge"><divclass="highlight"><preclass="highlight"><code><spanclass="c">#!/bin/bash</span><spanclass="c">#</span><spanclass="c">#backup.sh-makeabackupcopyofallthe.cfilesincurrentdirectory</span><spanclass="c">#</span><spanclass="c">#usage:backup.sh</span><spanclass="c">#(noarguments)</span><spanclass="c">#</span><spanclass="c">#input:none</span><spanclass="c">#output:alineofconfirmationforeachfilebackedup</span><spanclass="c">#</span><spanclass="c">#DavidKotz,April2016</span><spanclass="k">for</span>i<spanclass="k">in</span><spanclass="k">*</span>.c<spanclass="k">do</span><spanclass="nb">echo</span>backup<spanclass="s2">"</span><spanclass="nv">$i</span><spanclass="s2">"</span><spanclass="nb">cp</span><spanclass="s2">"</span><spanclass="nv">$i</span><spanclass="s2">"</span><spanclass="s2">"</span><spanclass="nv">$i</span><spanclass="s2">.bak"</span><spanclass="k">done</span><spanclass="nb">exit</span>0</code></pre></div></div><p>Itisgoodpracticetoidentifytheprogram,howitscommand-lineshouldbeused,andadescriptionofwhatitdoes(ifanything)withstdinandstdout.Andtolisttheauthorname(s)anddate.</p><p>Noticethescriptreturnstheexitstatus<codeclass="language-plaintexthighlighter-rouge">0</code>,whichcanbeviewedusingthe<codeclass="language-plaintexthighlighter-rouge">echo$?</code>command,asdiscussedearlier.Thereturnstatusistypicallynotcheckedwhenscriptsarerunfromthecommandline.However,whenascriptiscalledbyanotherscriptthereturnstatusistypicallychecked-soitisimportanttoreturnameaningfulexitstatus.</p><p>Wecouldcontinuetoimprovethisscript-forexample,tocatcherrorsfrom<codeclass="language-plaintexthighlighter-rouge">cp</code>anddosomethingintelligent,butlet’smoveon.</p><h2id="another-shell-script">Anothershellscript</h2><p>Ifwegotoallthattroubletosaveabackupcopyofour<codeclass="language-plaintexthighlighter-rouge">.c</code>files,itmightbenicetosee,later,whatchangedsincewelastmadeabackup.Let’swritealittlescripttocomparethecurrentversionswiththebackupcopies.</p><p>See<ahref="/engs50/Examples/backup-diff.sh">backup-diff.sh</a></p><divclass="language-bashhighlighter-rouge"><divclass="highlight"><preclass="highlight"><code><spanclass="c">#!/bin/bash</span><spanclass="c">#</span><spanclass="c">#backup-diff.sh-compareallthe.cfilesincurrentdirectorywithbackup</span><spanclass="c">#</span><spanclass="c">#usage:backup-diff.sh</span><spanclass="c">#(noarguments)</span><spanclass="c">#</span><spanclass="c">#input:none</span><spanclass="c">#output:alineofinformationforeachfile,anddiffswheretheydiffer</span><spanclass="c">#exitstatus:zero.</span><spanclass="c">#</span><spanclass="c">#DavidKotz,March2017</span><spanclass="k">for</span>i<spanclass="k">in</span><spanclass="k">*</span>.c<spanclass="k">doif</span><spanclass="o">[</span><spanclass="o">!</span><spanclass="nt">-r</span><spanclass="s2">"</span><spanclass="nv">$i</span><spanclass="s2">.bak"</span><spanclass="o">]</span><spanclass="k">then</span><spanclass="nb">echo</span><spanclass="s2">"</span><spanclass="nv">$i</span><spanclass="s2">"</span>-nobackup<spanclass="k">elseif</span>cmp<spanclass="nt">--quiet</span><spanclass="s2">"</span><spanclass="nv">$i</span><spanclass="s2">.bak"</span><spanclass="s2">"</span><spanclass="nv">$i</span><spanclass="s2">"</span><spanclass="k">then</span><spanclass="nb">echo</span><spanclass="s2">"</span><spanclass="nv">$i</span><spanclass="s2">"</span>unchanged<spanclass="k">else</span><spanclass="nb">echo</span><spanclass="s2">"</span><spanclass="nv">$i</span><spanclass="s2">"</span>differences:diff<spanclass="s2">"</span><spanclass="nv">$i</span><spanclass="s2">.bak"</span><spanclass="s2">"</span><spanclass="nv">$i</span><spanclass="s2">"</span><spanclass="k">fifi</span><spanclass="nb">echo</span><spanclass="k">done</span><spanclass="nb">exit</span>0</code></pre></div></div><p><strong><ahref="activity.html">Classroomactivity</a>:</strong>modifythisscripttoexitnon-zerowhenmissingbackupsordifferencesarefound.</p><h2id="variables-and-arrays">Variablesandarrays</h2><p>Variablesaretypicallynotdeclaredbeforetheyareusedinscripts.</p><divclass="language-bashhighlighter-rouge"><divclass="highlight"><preclass="highlight"><code><spanclass="o">[</span>cs50@flume~]<spanclass="nv">$a</span><spanclass="o">=</span>5<spanclass="o">[</span>cs50@flume~]<spanclass="nv">$message</span><spanclass="o">=</span><spanclass="s2">"goodmorning"</span><spanclass="o">[</span>cs50@flume~]<spanclass="nv">$</span><spanclass="nb">echo</span><spanclass="nv">$a</span>5<spanclass="o">[</span>cs50@flume~]<spanclass="nv">$</span><spanclass="nb">echo</span><spanclass="nv">$message</span>goodmorning<spanclass="o">[</span>cs50@flume~]<spanclass="nv">$</span><spanclass="o">[</span>cs50@flume~]<spanclass="nv">$</span><spanclass="nb">echo</span><spanclass="k">${</span><spanclass="nv">message</span><spanclass="k">}</span>goodmorning</code></pre></div></div><p>Abovewecreatetwovariables(<codeclass="language-plaintexthighlighter-rouge">a</code>and<codeclass="language-plaintexthighlighter-rouge">message</code>).Thelatercommandsshowthe<codeclass="language-plaintexthighlighter-rouge">${varname}</code>syntaxforvariablesubstitution;thisisthegeneralformwhereas<codeclass="language-plaintexthighlighter-rouge">$varname</code>isashorthandthatworksforsimplecases;notethat<codeclass="language-plaintexthighlighter-rouge">${message}</code>isidenticalto<codeclass="language-plaintexthighlighter-rouge">$message</code>.</p><h2id="repetition-the-while-command">Repetition:thewhileCommand</h2><p>The‘for-loop’constructisgoodforloopingthroughaseriesofstringsbutnotthatusefulwhenyoudonotknowhowmanytimestheloopneedstorun.The<codeclass="language-plaintexthighlighter-rouge">whiledo</code>commandisperfectforthis.</p><p>Thecontentsof<ahref="/engs50/Examples/guessprime.sh">guessprime.sh</a>usethe‘while-do’construct.Thescriptallowstheusertoguessaprimebetween1-100.</p><divclass="language-bashhighlighter-rouge"><divclass="highlight"><preclass="highlight"><code><spanclass="c">#!/bin/bash</span><spanclass="c">#</span><spanclass="c">#File:guessprime.sh</span><spanclass="c">#</span><spanclass="c">#Description:Theusertriestoguessaprimebetween1-100</span><spanclass="c">#Thisisnotagoodprogram.Thereisnocheckonwhatthe</span><spanclass="c">#userenters;itmaynotbeaprime,ormightbeoutsidetherange.</span><spanclass="c">#Heck-itmightnotevenbeanumberandmightbeempty!</span><spanclass="c">#Somedefensiveprogrammingwouldchecktheinput.</span><spanclass="c">#</span><spanclass="c">#Input:Theuserguessaprimeandentersit</span><spanclass="c">#</span><spanclass="c">#Output:Statusontheguess</span><spanclass="c">#Programdefinesavariablecalledprimeandsetittoavalue.</span><spanclass="nv">prime</span><spanclass="o">=</span>31<spanclass="nb">echo</span><spanclass="nt">-n</span><spanclass="s2">"Enteraprimebetween1-100:"</span><spanclass="nb">read</span>guess<spanclass="k">while</span><spanclass="o">[</span><spanclass="nv">$guess</span><spanclass="o">!=</span><spanclass="nv">$prime</span><spanclass="o">]</span><spanclass="p">;</span><spanclass="k">do</span><spanclass="nb">echo</span><spanclass="s2">"Wrong!tryagain"</span><spanclass="nb">echo</span><spanclass="nt">-n</span><spanclass="s2">"Enteraprimebetween1-100:"</span><spanclass="nb">read</span>guess<spanclass="k">done</span><spanclass="nb">exit</span>0</code></pre></div></div><p>Thisscriptusesuserdefinedvariables<codeclass="language-plaintexthighlighter-rouge">prime</code>and<codeclass="language-plaintexthighlighter-rouge">guess</code>.Itintroducesthe<codeclass="language-plaintexthighlighter-rouge">read</code>command,whichpausesandwaitsforuserinput,placingthatuserinputintothenamedvariable.The<codeclass="language-plaintexthighlighter-rouge">-n</code>switchto<codeclass="language-plaintexthighlighter-rouge">echo</code>removesthenewlineusuallyproducedbyecho.Finally,notethesemicolonafterthe<codeclass="language-plaintexthighlighter-rouge">while</code>commandandbeforethe<codeclass="language-plaintexthighlighter-rouge">do</code>command.Aswiththe<codeclass="language-plaintexthighlighter-rouge">if</code>commandandits<codeclass="language-plaintexthighlighter-rouge">then</code>branch,wecouldhaveput<codeclass="language-plaintexthighlighter-rouge">do</code>onthenextlineifwepreferthatstyle.</p><divclass="language-bashhighlighter-rouge"><divclass="highlight"><preclass="highlight"><code><spanclass="o">[</span>cs50@flume~/public_html/examples]<spanclass="nv">$</span>./guessprime.shGuessaprimebetween1-100:33Wrong!tryagainGuessaprimebetween1-100:2Wrong!tryagainGuessaprimebetween1-100:9Wrong!tryagainGuessaprimebetween1-100:31<spanclass="o">[</span>cs50@flume~/public_html/examples]<spanclass="nv">$</span></code></pre></div></div><h2id="the-shells-variables">Theshell’svariables</h2><p>Theshellmaintainsanumberofimportantvariablesthatareusefulinwritingscripts.Wehavecomeacrosssomeofthemalready.</p><divclass="language-plaintexthighlighter-rouge"><divclass="highlight"><preclass="highlight"><code>VariableDescription$USERusernameofcurrentuser$HOMEpathnameforthehomedirectoryofcurrentuser$PATHalistofdirectoriestosearchforcommands$#numberofparameterspassedtothescript$0nameoftheshellscript$1,$2,..$#argumentsgiventothescript$*Alistofalltheparametersinasinglevariable.$@Alistofalltheparametersinasinglevariable;alwaysdelimited$$processIDoftheshellscriptwhenrunning</code></pre></div></div><p>Thevariable<codeclass="language-plaintexthighlighter-rouge">$#</code>tellsyouhowmanyargumentswereonthecommandline;iftherewerethreearguments,forexample,theywouldbeavailableas<codeclass="language-plaintexthighlighter-rouge">$1</code>,<codeclass="language-plaintexthighlighter-rouge">$2</code>,and<codeclass="language-plaintexthighlighter-rouge">$3</code>.Inthecommandline<codeclass="language-plaintexthighlighter-rouge">myscript.shabc</code>,then,<codeclass="language-plaintexthighlighter-rouge">$#=3</code>,<codeclass="language-plaintexthighlighter-rouge">$0=myscript.sh</code>,<codeclass="language-plaintexthighlighter-rouge">$1=a</code>,<codeclass="language-plaintexthighlighter-rouge">$2=b</code>,and<codeclass="language-plaintexthighlighter-rouge">$3=c</code>.</p><p>Thetwovariables<codeclass="language-plaintexthighlighter-rouge">$*</code>and<codeclass="language-plaintexthighlighter-rouge">$@</code>bothprovidethelistofcommand-linearguments,butwithsubtledifferences;trythefollowingscript,<ahref="/engs50/Examples/args.sh">args.sh</a>,toseethedifference.</p><divclass="language-bashhighlighter-rouge"><divclass="highlight"><preclass="highlight"><code><spanclass="c">#!/bin/bash</span><spanclass="nb">echo</span><spanclass="nv">$#</span>argumentsto<spanclass="nv">$0</span><spanclass="c">#loopthroughallthearguments,infourdifferentwaysf</span><spanclass="nb">echo</span><spanclass="s1">'forargin$*'</span><spanclass="k">for</span>arg<spanclass="k">in</span><spanclass="nv">$*</span><spanclass="p">;</span><spanclass="k">do</span><spanclass="nb">echo</span><spanclass="s2">"</span><spanclass="nv">$arg</span><spanclass="s2">"</span><spanclass="p">;</span><spanclass="k">done</span><spanclass="nb">echoecho</span><spanclass="s1">'forargin"$*"'</span><spanclass="k">for</span>arg<spanclass="k">in</span><spanclass="s2">"</span><spanclass="nv">$*</span><spanclass="s2">"</span><spanclass="p">;</span><spanclass="k">do</span><spanclass="nb">echo</span><spanclass="s2">"</span><spanclass="nv">$arg</span><spanclass="s2">"</span><spanclass="p">;</span><spanclass="k">done</span><spanclass="nb">echoecho</span><spanclass="s1">'forargin$@'</span><spanclass="k">for</span>arg<spanclass="k">in</span><spanclass="nv">$@</span><spanclass="p">;</span><spanclass="k">do</span><spanclass="nb">echo</span><spanclass="s2">"</span><spanclass="nv">$arg</span><spanclass="s2">"</span><spanclass="p">;</span><spanclass="k">done</span><spanclass="nb">echoecho</span><spanclass="s1">'forargin"$@"'</span><spanclass="k">for</span>arg<spanclass="k">in</span><spanclass="s2">"</span><spanclass="nv">$@</span><spanclass="s2">"</span><spanclass="p">;</span><spanclass="k">do</span><spanclass="nb">echo</span><spanclass="s2">"</span><spanclass="nv">$arg</span><spanclass="s2">"</span><spanclass="p">;</span><spanclass="k">done</span><spanclass="nb">exit</span>0</code></pre></div></div><p>Let’stryitonacommandwithfourarguments;thefourthargumenthasanembeddedspace.</p><divclass="language-bashhighlighter-rouge"><divclass="highlight"><preclass="highlight"><code><spanclass="o">[</span>cs50@flume~/public_html/examples]<spanclass="nv">$</span>./args.shonetwothree<spanclass="s2">"andmore"</span>4argumentsto./args.sh<spanclass="k">for</span>arg<spanclass="k">in</span><spanclass="nv">$*</span>onetwothreeandmore<spanclass="k">for</span>arg<spanclass="k">in</span><spanclass="s2">"</span><spanclass="nv">$*</span><spanclass="s2">"</span>onetwothreeandmore<spanclass="k">for</span>arg<spanclass="k">in</span><spanclass="nv">$@</span>onetwothreeandmore<spanclass="k">for</span>arg<spanclass="k">in</span><spanclass="s2">"</span><spanclass="nv">$@</span><spanclass="s2">"</span>onetwothreeandmore<spanclass="o">[</span>cs50@flume~/public_html/examples]<spanclass="nv">$</span></code></pre></div></div><p>Studythedifferenceofeachcase.Youshoulduse<codeclass="language-plaintexthighlighter-rouge">"$@"</code>toprocesscommand-linearguments,nearlyalways,becauseitretainsthestructureofthosearguments.</p><p>Asashorthand,<codeclass="language-plaintexthighlighter-rouge">forarg</code>isequivalentto<codeclass="language-plaintexthighlighter-rouge">forargin"$@"</code>.</p><blockquote><p>Mychoiceofthevariablename<codeclass="language-plaintexthighlighter-rouge">arg</code>isimmaterialtotheshell.</p></blockquote><h2id="printing-error-messages">Printingerrormessages</h2><p>Youmightneedtoinformtheuserofanerror;inthisexample,the2ndargumentissupposedtobeadirectoryandthescriptfoundthatitisnot:</p><divclass="language-bashhighlighter-rouge"><divclass="highlight"><preclass="highlight"><code><spanclass="nb">echo</span>1&gt;&amp;2Error:<spanclass="s2">"</span><spanclass="nv">$2</span><spanclass="s2">"</span>shouldbeadirectory</code></pre></div></div><p>Hereweseehowtopushtheoutputof<codeclass="language-plaintexthighlighter-rouge">echo</code>,normallytostdout(<codeclass="language-plaintexthighlighter-rouge">1</code>),tothestderr(<codeclass="language-plaintexthighlighter-rouge">2</code>)instead,byredirectingthestdouttothestderrusingtheconfusingbutusefulredirect<codeclass="language-plaintexthighlighter-rouge">1&gt;&amp;2</code>,whichmeans‘makethestdoutgotothesameplaceasthestderr’.</p><h2id="checking-arguments">Checkingarguments</h2><p>Whenwritingscriptsitisimportanttowritedefensivecodethatcheckswhethertheinputargumentsarecorrect.Below,theprogramverifiesthatthecommandhasexactlythreearguments,usingthe‘notequalto’operator.</p><divclass="language-bashhighlighter-rouge"><divclass="highlight"><preclass="highlight"><code><spanclass="k">if</span><spanclass="o">[</span><spanclass="nv">$#</span><spanclass="nt">-ne</span>3<spanclass="o">]</span><spanclass="p">;</span><spanclass="k">then</span><spanclass="nb">echo</span>1&gt;&amp;2Usage:incorrectargumentinput<spanclass="nb">exit</span>1<spanclass="k">fi</span></code></pre></div></div><p>Noticealsothatthescriptthenexitswithanon-zerostatus.</p><h2id="finally">Finally</h2><p>Fromthisweek’s<ahref="/engs50/Reading/#week-2">readingassignments</a>:</p><ul><li>Commentsshouldclarifythecode,notobscureit.</li><li>Theyshouldenlighten,notimpress.</li><li>Ifyouusedaspecialalgorithmortext,mentionitandgiveareference!</li><li>Don’tjustaddnoiseorchitchat.</li><li>Sayincommentswhatthecodecannot.</li></ul><p>Don’tforgettherearesomegood<codeclass="language-plaintexthighlighter-rouge">bash</code>referencesonthe<ahref="/engs50/Resources/#bash">Resources</a>page.</p><h1id="other-stuff">Otherstuff</h1><p>There’sneverenoughtimetoshowyouallthegoodstuffinclass.</p><h2id="simple-debugging-tips">Simpledebuggingtips</h2><p>Whenyourunascriptyoucanuse<codeclass="language-plaintexthighlighter-rouge">printf</code>or<codeclass="language-plaintexthighlighter-rouge">echo</code>toprintdebugginginformationtothescreen.Ifoundithelpfultodefineafunction<codeclass="language-plaintexthighlighter-rouge">debugPrint</code>soIcanturnonandoffallmydebugstatementsinoneplace:</p><divclass="language-bashhighlighter-rouge"><divclass="highlight"><preclass="highlight"><code><spanclass="c">#printtheargumentsfordebugging;comment-out'echo'linetoturnitoff.</span><spanclass="k">function</span>debugPrint<spanclass="o">()</span><spanclass="o">{</span><spanclass="c">#echo"$@"</span><spanclass="k">return</span><spanclass="o">}</span>...debugPrintstartingtoprocessarguments...<spanclass="k">for</span>arg<spanclass="p">;</span><spanclass="k">do</span>debugPrintprocessing<spanclass="s2">"</span><spanclass="nv">$arg</span><spanclass="s2">"</span>...</code></pre></div></div><p>Ifyougetasyntaxerror;forexample:</p><divclass="language-bashhighlighter-rouge"><divclass="highlight"><preclass="highlight"><code><spanclass="o">[</span>cs50@flume~]<spanclass="nv">$</span>./ziplab1.shmakingatarballcalledcs50-lab1.tgz./ziplab1.sh:line18:syntaxerrornearunexpectedtoken<spanclass="sb">`</span><spanclass="k">else</span><spanclass="s1">'./ziplab1.sh:line18:`else'</span><spanclass="o">[</span>cs50@flume~]<spanclass="nv">$</span></code></pre></div></div><p>Theerrorisonoraroundline18.In<codeclass="language-plaintexthighlighter-rouge">emacs</code>editthefile./count.shagainandthengotoline18usingthesequenceofkeystrokes<codeclass="language-plaintexthighlighter-rouge">ESCg</code>–thatis,hitthe<codeclass="language-plaintexthighlighter-rouge">ESC</code>keyandhit<codeclass="language-plaintexthighlighter-rouge">g</code>.(Ifyoudidnotinstallthecustomized<codeclass="language-plaintexthighlighter-rouge">~cs50/.emacs</code>fileinyourown<codeclass="language-plaintexthighlighter-rouge">~/.emacs</code>,youmayneedtohit<codeclass="language-plaintexthighlighter-rouge">g</code>twice.)Then,enterthelinenumber18andyouwillbebroughttothatline.Nowfixthebug.(Inmyparticularexample,theactualerrorwasonline13,not18;online13the<codeclass="language-plaintexthighlighter-rouge">if</code>statementbegan,butIforgotthesemicolonbefore<codeclass="language-plaintexthighlighter-rouge">then</code>…theshellfinallyrealizedaproblemwhenitreachedthe<codeclass="language-plaintexthighlighter-rouge">else</code>commandatline18.Soyoumayneedtoworkbackwardsthroughthecode,lookingcarefullytofindthesyntaxproblem.</p><p>Everytimeyoulaunch<codeclass="language-plaintexthighlighter-rouge">emacs</code>toeditafile,itsavesabackupcopyofthatfile.Forexample,whenyouedit<codeclass="language-plaintexthighlighter-rouge">foo.sh</code>andsaveit,<codeclass="language-plaintexthighlighter-rouge">emacs</code>savesthepre-editingversionin<codeclass="language-plaintexthighlighter-rouge">foo.sh~</code>.Ifyou’relaterwonderingwhatchanged,</p><divclass="language-bashhighlighter-rouge"><divclass="highlight"><preclass="highlight"><code><spanclass="o">[</span>cs50@flume~]<spanclass="nv">$</span>difffoo.sh~foo.sh</code></pre></div></div><p>willprintthedifferencesbetweenthetwofiles.</p><h2id="arrays">Arrays</h2><p>Likevariables,arraysaretypicallynotdeclaredbeforetheyareusedinscripts.</p><divclass="language-bashhighlighter-rouge"><divclass="highlight"><preclass="highlight"><code><spanclass="o">[</span>cs50@flume~]<spanclass="nv">$colors</span><spanclass="o">=(</span>redorangeyellowgreenblueindigoviolet<spanclass="o">)</span><spanclass="o">[</span>cs50@flume~]<spanclass="nv">$</span><spanclass="nb">echo</span><spanclass="nv">$colors</span>red<spanclass="o">[</span>cs50@flume~]<spanclass="nv">$</span><spanclass="nb">echo</span><spanclass="k">${</span><spanclass="nv">colors</span><spanclass="p">[1]</span><spanclass="k">}</span>orange<spanclass="o">[</span>cs50@flume~]<spanclass="nv">$</span><spanclass="nb">echo</span><spanclass="k">${</span><spanclass="nv">colors</span><spanclass="p">[6]</span><spanclass="k">}</span>violet<spanclass="o">[</span>cs50@flume~]<spanclass="nv">$</span><spanclass="nb">echo</span><spanclass="k">${</span><spanclass="nv">colors</span><spanclass="p">[7]</span><spanclass="k">}</span><spanclass="o">[</span>cs50@flume~]<spanclass="nv">$</span></code></pre></div></div><p>Abovewecreateonearray(<codeclass="language-plaintexthighlighter-rouge">colors</code>).Noticethat<codeclass="language-plaintexthighlighter-rouge">$colors</code>implicitlysubstitutesthefirstelement,withindex0(computerscientistslikecountingfromzero).Thelatercommandsshowthe<codeclass="language-plaintexthighlighter-rouge">${varname}</code>syntaxforvariablesubstitution;thisisthegeneralformwhereas<codeclass="language-plaintexthighlighter-rouge">$varname</code>isashorthandthatworksforsimplecases;notethat<codeclass="language-plaintexthighlighter-rouge">${message}</code>isidenticalto<codeclass="language-plaintexthighlighter-rouge">$message</code>and<codeclass="language-plaintexthighlighter-rouge">$colors</code>isequivalentto<codeclass="language-plaintexthighlighter-rouge">${colors[0]}</code>.Whendesiringtosubscriptanarrayvariable,youmustusethefullsyntax,asin<codeclass="language-plaintexthighlighter-rouge">${colors[1]}</code>.Finally,notethat<codeclass="language-plaintexthighlighter-rouge">${colors[7]}</code>isemptybecauseitwasnotdefined.</p><p>Evencooler,thearraycanbeusedincombinationwithfilesubsitution<codeclass="language-plaintexthighlighter-rouge">$(&lt;filename)</code>andcommandsubstitution<codeclass="language-plaintexthighlighter-rouge">$(command)</code>:</p><divclass="language-bashhighlighter-rouge"><divclass="highlight"><preclass="highlight"><code><spanclass="o">[</span>cs50@flume~]<spanclass="nv">$</span><spanclass="nb">cat</span>LFlistJohn.P.Kotz.19@dartmouth.edujoel.j.katticaran.ug@dartmouth.eduKaya.M.Thomas.17@dartmouth.edutrevor.l.davis.18@dartmouth.eduThomas.D.Kim.19@dartmouth.edukyle.dotterrer.18@dartmouth.edu<spanclass="o">[</span>cs50@flume~]<spanclass="nv">$lfs</span><spanclass="o">=(</span><spanclass="si">$(</span>&lt;LFlist<spanclass="si">)</span><spanclass="o">)</span><spanclass="o">[</span>cs50@flume~]<spanclass="nv">$</span><spanclass="nb">echo</span><spanclass="k">${</span><spanclass="nv">lfs</span><spanclass="p">[3]</span><spanclass="k">}</span>trevor.l.davis.18@dartmouth.edu<spanclass="o">[</span>cs50@flume~]<spanclass="nv">$</span><spanclass="o">[</span>cs50@flume~]<spanclass="nv">$juniors</span><spanclass="o">=(</span><spanclass="si">$(</span><spanclass="nb">grep</span>.18.LFlist<spanclass="si">)</span><spanclass="o">)</span><spanclass="o">[</span>cs50@flume~]<spanclass="nv">$</span><spanclass="nb">echo</span><spanclass="k">${</span><spanclass="nv">juniors</span><spanclass="p">[1]</span><spanclass="k">}</span>kyle.dotterrer.18@dartmouth.edu<spanclass="o">[</span>cs50@flume~]<spanclass="nv">$</span><spanclass="nb">echo</span><spanclass="k">${</span><spanclass="nv">lfs</span><spanclass="p">[*]</span><spanclass="k">}</span>John.P.Kotz.19@dartmouth.edujoel.j.katticaran.ug@dartmouth.eduKaya.M.Thomas.17@dartmouth.edutrevor.l.davis.18@dartmouth.eduThomas.D.Kim.19@dartmouth.edukyle.dotterrer.18@dartmouth.edu<spanclass="o">[</span>cs50@flume~]<spanclass="nv">$</span></code></pre></div></div><p>Thelastlinedemonstrateshowyoucansubstituteallvaluesofthearray,withthe<codeclass="language-plaintexthighlighter-rouge">[*]</code>index.</p><h2id="let-me-do-arithmetic"><codeclass="language-plaintexthighlighter-rouge">let</code>medoarithmetic!</h2><p>The<codeclass="language-plaintexthighlighter-rouge">let</code>commandcarriesoutarithmeticoperationsonvariables.</p><divclass="language-bashhighlighter-rouge"><divclass="highlight"><preclass="highlight"><code><spanclass="nv">$</span><spanclass="nb">let</span><spanclass="nv">a</span><spanclass="o">=</span>1<spanclass="nv">$</span><spanclass="nb">let</span><spanclass="nv">b</span><spanclass="o">=</span>2<spanclass="nv">$</span><spanclass="nb">let</span>c<spanclass="o">=</span>a+b<spanclass="nt">-bash</span>:<spanclass="nb">let</span>:<spanclass="o">=</span>:syntaxerror:operandexpected<spanclass="o">(</span>errortokenis<spanclass="s2">"="</span><spanclass="o">)</span><spanclass="c">#...note,theletcommandissensitivetospaces.</span><spanclass="nv">$</span><spanclass="nb">let</span><spanclass="nv">c</span><spanclass="o">=</span>a+b<spanclass="nv">$</span><spanclass="nb">echo</span><spanclass="nv">$c</span>3<spanclass="nv">$</span><spanclass="nb">echo</span><spanclass="s2">"a+b=</span><spanclass="nv">$c</span><spanclass="s2">"</span>a+b<spanclass="o">=</span>3<spanclass="nv">$</span><spanclass="nb">echo</span><spanclass="s2">"</span><spanclass="nv">$a</span><spanclass="s2">+</span><spanclass="nv">$b</span><spanclass="s2">=</span><spanclass="nv">$c</span><spanclass="s2">"</span>1+2<spanclass="o">=</span>3<spanclass="nv">$</span><spanclass="nb">let</span>a<spanclass="k">*</span><spanclass="o">=</span>10<spanclass="c">#equivalenttoleta=a*10</span><spanclass="nv">$</span><spanclass="nb">echo</span><spanclass="nv">$a</span>10</code></pre></div></div><h2id="temporary-files">Temporaryfiles</h2><p>Ifyourscriptneedstocreatesometemporaryfilestodoitswork,itisgoodpracticetocreatethosefilesinaplace<em>otherthanthecurrentdirectory</em>,andwithafilenamethatisunlikelytobeusedbyanotherscript-evenanotherconcurrentlyrunningcopyofyourscript.</p><p>Thedirectory<codeclass="language-plaintexthighlighter-rouge">/tmp</code>iswritablebyeveryone-soit’snotagreatplacetoputimportantfiles-andistheconventionalplacetoputtemporaryfiles.Toavoidpickinganamethatothersmightpick,scriptsinclude<codeclass="language-plaintexthighlighter-rouge">$$</code>,theirprocessidentifier,aspartofthefilename.Forexample,ascript<codeclass="language-plaintexthighlighter-rouge">print</code>mightdothefollowing:</p><divclass="language-bashhighlighter-rouge"><divclass="highlight"><preclass="highlight"><code><spanclass="c">#!/bin/bash</span><spanclass="c">#buildupanoutputfile,thenprintit</span><spanclass="c">#nameoftemporaryfileincludesourprocessid$$</span><spanclass="nv">tmpfile</span><spanclass="o">=</span>/tmp/print<spanclass="nv">$$</span><spanclass="nb">echo</span><spanclass="o">&gt;</span><spanclass="nv">$tmpfile</span><spanclass="k">for</span>arg<spanclass="k">do</span><spanclass="c">#printaniceheaderthenthefile</span><spanclass="nb">echo</span><spanclass="s2">"======================"</span><spanclass="o">&gt;&gt;</span><spanclass="nv">$tmpfile</span><spanclass="nb">echo</span><spanclass="s2">"</span><spanclass="nv">$arg</span><spanclass="s2">"</span><spanclass="o">&gt;&gt;</span><spanclass="nv">$tmpfile</span><spanclass="nb">cat</span><spanclass="s2">"</span><spanclass="nv">$arg</span><spanclass="s2">"</span><spanclass="o">&gt;&gt;</span><spanclass="nv">$tmpfile</span><spanclass="nb">echo</span><spanclass="o">&gt;&gt;</span><spanclass="nv">$tmpfile</span><spanclass="k">done</span>lpr<spanclass="nv">$tmpfile</span><spanclass="c">#printtheresult</span><spanclass="nb">rm</span><spanclass="nt">-f</span><spanclass="nv">$tmpfile</span><spanclass="c">#cleanupafterourself</span><spanclass="nb">exit</span>0</code></pre></div></div><p>Weuseavariable<codeclass="language-plaintexthighlighter-rouge">tmpfile</code>forclarityandconsistencythroughoutthescript.</p><h2id="catching-interrupts-cleaning-up">Catchinginterrupts,cleaningup</h2><p>Manyscriptscreateintermediateortemporaryfiles,andmightleaveamessifinterruptedpart-waythroughtheiroperation.</p><p>The<codeclass="language-plaintexthighlighter-rouge">trap</code>commandcancatchsuchinterrupts,suchasthosecausedbytheusertyping<codeclass="language-plaintexthighlighter-rouge">ctrl-C</code>atthekeyboardwhilethescriptworks.Itisgoodformtocatchthisinterruptandcleanupbeforeexiting.Intheaboveexample,wewouldextendtheaboveexampleasfollows:</p><divclass="language-bashhighlighter-rouge"><divclass="highlight"><preclass="highlight"><code><spanclass="c">#nameoftemporaryfileincludesourprocessid$$</span><spanclass="nv">tmpfile</span><spanclass="o">=</span>/tmp/print<spanclass="nv">$$</span><spanclass="nb">trap</span><spanclass="s2">"rm-f</span><spanclass="nv">$tmpfile</span><spanclass="s2">"</span>EXIT</code></pre></div></div><p>This<codeclass="language-plaintexthighlighter-rouge">trap</code>commandgivestheshellacommandtorunwheneverthescriptexits,foranyreason(whetherduetoan<codeclass="language-plaintexthighlighter-rouge">exit</code>commandorduetoaninterruptthatkillstheprocess).Veryhandy!NoticethatIdefinethe<codeclass="language-plaintexthighlighter-rouge">trap</code><em>immediately</em>afterdefiningthevariablename,sothatitwillbeineffectwheneverthetemporaryfileislatercreated.The<codeclass="language-plaintexthighlighter-rouge">-f</code>flag(‘force’)to<codeclass="language-plaintexthighlighter-rouge">rm</code>causesittooverridesomekindsoferrors,notably,tonotcomplainifthe<codeclass="language-plaintexthighlighter-rouge">$tmpfile</code>doesnotyetexist.</p><p>Sometimesyouneedawholedirectoryforyourtemporaryuse:</p><divclass="language-bashhighlighter-rouge"><divclass="highlight"><preclass="highlight"><code><spanclass="nv">tmpdir</span><spanclass="o">=</span>/tmp/print<spanclass="nv">$$</span><spanclass="nb">trap</span><spanclass="s2">"rm-rf</span><spanclass="nv">$tmpdir</span><spanclass="s2">"</span>EXIT<spanclass="nb">mkdir</span><spanclass="nt">-p</span><spanclass="nv">$tmpdir</span><spanclass="nb">cd</span><spanclass="nv">$tmpdir</span></code></pre></div></div><p>HereIused<codeclass="language-plaintexthighlighter-rouge">mkdir-p</code>tomakethedirectory,and<codeclass="language-plaintexthighlighter-rouge">rm-rf</code>torecursivelyremoveit.</p><h2id="functions">Functions</h2><p>Likemostprocedurallanguages,shellscriptshavestructureandfunctionsupport.Typically,itisagoodideatousefunctionstomakescriptsmorereadableandstructured.Inwhatfollows,wesimplyaddafunctiontoguessprimetocreate<ahref="/engs50/Examples/guessprimefunction.sh">guessprimefunction.sh</a>:</p><divclass="language-bashhighlighter-rouge"><divclass="highlight"><preclass="highlight"><code><spanclass="c">#!/bin/bash</span><spanclass="c">#</span><spanclass="c">#File:guessprimefunction.sh(variantofguessprime.sh)</span><spanclass="c">#</span><spanclass="c">#Description:Theusertriestoguessaprimebetween1-100</span><spanclass="c">#Thisisnotagoodprogram.Thereisnocheckonwhatthe</span><spanclass="c">#userenters;itmaynotbeaprime,ormightbeoutsidetherange.</span><spanclass="c">#Heck-itmightnotevenbeanumberandmightbeempty!</span><spanclass="c">#Somedefensiveprogrammingwouldchecktheinput.</span><spanclass="c">#</span><spanclass="c">#Input:Theuserguessaprimeandentersit</span><spanclass="c">#</span><spanclass="c">#Output:Statusontheguess</span><spanclass="c">#Asktheusertoguess,andfillglobalvariable$guesswithresult.</span><spanclass="c">#usage:askguesslowhigh</span><spanclass="c">#where[low,high]istherangeofnumbersinwhichtheyshouldguess.</span><spanclass="k">function</span>askguess<spanclass="o">()</span><spanclass="o">{</span><spanclass="nb">echo</span><spanclass="nt">-n</span><spanclass="s2">"Enteraprimebetween</span><spanclass="nv">$1</span><spanclass="s2">-</span><spanclass="nv">$2</span><spanclass="s2">:"</span><spanclass="nb">read</span>guess<spanclass="o">}</span><spanclass="c">#Programdefinesavariablecalledprimeandsetittoavalue.</span><spanclass="nv">prime</span><spanclass="o">=</span>31<spanclass="c">#askthemonce</span>askguess1100<spanclass="k">while</span><spanclass="o">[</span><spanclass="nv">$guess</span><spanclass="o">!=</span><spanclass="nv">$prime</span><spanclass="o">]</span><spanclass="p">;</span><spanclass="k">do</span><spanclass="c">#askagain</span>askguess1100<spanclass="k">done</span><spanclass="nb">exit</span>0</code></pre></div></div><p>Noticethatdefiningafunctioneffectivelyaddsanewcommandtotheshell,inthiscase,<codeclass="language-plaintexthighlighter-rouge">askguess</code>.Andthatcommandcanhavearguments!Andthoseargumentsareavailablewithinthefunctionasiftheywerecommand-linearguments<codeclass="language-plaintexthighlighter-rouge">$1</code>,<codeclass="language-plaintexthighlighter-rouge">$2</code>,andsoforth.Allothervariablesaretreatedas‘global’variables,like<codeclass="language-plaintexthighlighter-rouge">guess</code>inthisexample.</p><p>Trythisscript;it’sveryfragile.Seewhathappenswhenyouenternothing-justhitreturnatthepromptforaguess.Whydoesthathappen?</p><h2id="another-example-submitx">Anotherexample:submitx</h2><p>TosubmityourLabsolutionsyouuseacommand<codeclass="language-plaintexthighlighter-rouge">~cs50/labs/submit</code>,whichactuallyjustrunsabashscript<codeclass="language-plaintexthighlighter-rouge">~cs50/labs/submitx</code>.Youcanlearnmanythingsfromthisexample;notethefrequentchecksforpossibleproblems,thecarefullyquotedvariableinstantiations,thecommandchainswith<codeclass="language-plaintexthighlighter-rouge">&amp;&amp;</code>toensurethatacommandsequencestopsatthefirsterror,andonlyreaches<codeclass="language-plaintexthighlighter-rouge">exit0</code>iftheyallsucceedwithouterror,andtheuseof<codeclass="language-plaintexthighlighter-rouge">\</code>tobreaklonglinesintoreadablesequences.</p><divclass="language-bashhighlighter-rouge"><divclass="highlight"><preclass="highlight"><code><spanclass="c">#!/bin/bash</span><spanclass="c">#</span><spanclass="c">#SubmitahomeworkassignmentinCS50.</span><spanclass="c">#Theassignmentmustinin~/cs50/labs/labN,whereNis[1..9].</span><spanclass="c">#Theentiredirectoryiscopiedto~cs50/submit/labs/labN/username,</span><spanclass="c">#whereusernameisthe$USERoftheuserthatrunsthisscript.</span><spanclass="c">#</span><spanclass="c">#usage:submitN[extension]</span><spanclass="c">#whereNis[1..9]</span><spanclass="c">#wheretheoptionalsecondwordisliterally"extension"andisused</span><spanclass="c">#toindicatethatthestudentwantstoclaimanextensiononthisassignment.</span><spanclass="c">#(Inthatcase,allpreviouslysubmittedfilesaredeleted.)</span><spanclass="nv">usage</span><spanclass="o">=</span><spanclass="s2">"usage:</span><spanclass="nv">$0</span><spanclass="s2">N[extension]--whereNis[1..9]"</span><spanclass="c">#Checkarguments</span><spanclass="k">if</span><spanclass="o">[[</span><spanclass="nv">$#</span><spanclass="nt">-eq</span>0<spanclass="o">||</span><spanclass="nv">$#</span><spanclass="nt">-gt</span>2<spanclass="o">]]</span><spanclass="k">then</span><spanclass="nb">echo</span><spanclass="s2">"</span><spanclass="nv">$usage</span><spanclass="s2">"</span><spanclass="nb">exit</span>1<spanclass="k">fiif</span><spanclass="o">[[</span><spanclass="nv">$#</span><spanclass="nt">-eq</span>2<spanclass="o">]]</span><spanclass="k">thenif</span><spanclass="o">[[</span><spanclass="s2">"</span><spanclass="nv">$2</span><spanclass="s2">"</span><spanclass="o">==</span><spanclass="s2">"extension"</span><spanclass="o">]]</span><spanclass="k">then</span><spanclass="nv">extension</span><spanclass="o">=</span>1<spanclass="k">else</span><spanclass="nb">echo</span><spanclass="s2">"</span><spanclass="nv">$usage</span><spanclass="s2">"</span><spanclass="nb">exit</span>1<spanclass="k">fifi</span><spanclass="nb">let</span><spanclass="s2">"N=</span><spanclass="nv">$1</span><spanclass="s2">"</span><spanclass="k">if</span><spanclass="o">[[</span><spanclass="nv">$N</span><spanclass="nt">-lt</span>1<spanclass="o">||</span><spanclass="nv">$N</span><spanclass="nt">-gt</span>9<spanclass="o">]]</span><spanclass="k">then</span><spanclass="nb">echo</span><spanclass="s2">"</span><spanclass="nv">$usage</span><spanclass="s2">"</span><spanclass="nb">exit</span>2<spanclass="k">fi</span><spanclass="nv">lab</span><spanclass="o">=</span>lab<spanclass="nv">$N</span><spanclass="c">#destinationoftheirfiles</span><spanclass="nv">dest</span><spanclass="o">=</span>~cs50/labs/submissions/<spanclass="nv">$lab</span>/<spanclass="nv">$USER</span><spanclass="k">if</span><spanclass="o">[</span><spanclass="nv">$extension</span><spanclass="o">]</span><spanclass="k">then</span><spanclass="nb">echo</span>Requestingextension<spanclass="k">for</span><spanclass="nv">$lab</span><spanclass="nb">.</span><spanclass="k">else</span><spanclass="nb">echo</span>Submitting<spanclass="nv">$lab</span><spanclass="nb">.</span><spanclass="c">#checktheircs50directory</span><spanclass="k">if</span><spanclass="o">[[</span><spanclass="o">!</span><spanclass="nt">-d</span>~/cs50<spanclass="o">]]</span><spanclass="k">then</span><spanclass="nb">echo</span><spanclass="s1">'oops!youaremissinga~/cs50directory.'</span><spanclass="nb">exit</span>3<spanclass="k">fi</span><spanclass="nb">echo</span>EnsuringthatyourCS50directoryisnotvisiblebyanyotheruser...<spanclass="k">if</span><spanclass="nb">chmod</span>go-rwx~/cs50<spanclass="k">then</span><spanclass="nb">echo</span>good.<spanclass="k">else</span><spanclass="nb">echo</span><spanclass="s1">'Failed:unabletosetpermissionsonyour~/cs50directory.'</span><spanclass="nb">echo</span>Theyare:<spanclass="nb">ls</span><spanclass="nt">-ld</span>~/cs50<spanclass="nb">exit</span>3<spanclass="k">fi</span><spanclass="c">#Preparetocopyfrom'source'to'dest'</span><spanclass="nb">source</span><spanclass="o">=</span>~/cs50/labs/<spanclass="nv">$lab</span><spanclass="nb">echo</span>Checking<spanclass="nb">source</span>directory<spanclass="s2">"</span><spanclass="nv">$source</span><spanclass="s2">"</span>...<spanclass="k">if</span><spanclass="o">[[</span><spanclass="o">!</span><spanclass="nt">-d</span><spanclass="s2">"</span><spanclass="nv">$source</span><spanclass="s2">"</span><spanclass="o">]]</span><spanclass="k">then</span><spanclass="nb">echo</span><spanclass="s2">"</span><spanclass="nv">$source</span><spanclass="s2">doesnotexistorisnotadirectory;"</span><spanclass="nb">echo</span><spanclass="s2">"didyouputyourlabintherightplace?"</span><spanclass="nb">exit</span>4<spanclass="k">fiif</span><spanclass="o">[[</span><spanclass="o">!</span><spanclass="nt">-x</span><spanclass="s2">"</span><spanclass="nv">$source</span><spanclass="s2">"</span><spanclass="o">||</span><spanclass="o">!</span><spanclass="nt">-r</span><spanclass="s2">"</span><spanclass="nv">$source</span><spanclass="s2">"</span><spanclass="o">]]</span><spanclass="k">then</span><spanclass="nb">echo</span><spanclass="s2">"</span><spanclass="nv">$source</span><spanclass="s2">isnotsearchableornotreadable:"</span><spanclass="nb">ls</span><spanclass="nt">-ld</span><spanclass="s2">"</span><spanclass="nv">$source</span><spanclass="s2">"</span><spanclass="nb">exit</span>5<spanclass="k">else</span><spanclass="nb">echo</span>good.<spanclass="k">fifi</span><spanclass="nb">echo</span>Checkingdestinationdirectory<spanclass="s2">"</span><spanclass="nv">$dest</span><spanclass="s2">"</span>...<spanclass="k">if</span><spanclass="nb">mkdir</span><spanclass="nt">-p</span><spanclass="s2">"</span><spanclass="nv">$dest</span><spanclass="s2">"</span><spanclass="o">&amp;&amp;</span><spanclass="nb">chmod</span>o-rwx<spanclass="s2">"</span><spanclass="nv">$dest</span><spanclass="s2">"</span><spanclass="k">then</span><spanclass="nb">echo</span>good.<spanclass="k">else</span><spanclass="nb">echo</span>cannotmakedirectory<spanclass="s2">"</span><spanclass="nv">$dest</span><spanclass="s2">"</span><spanclass="nb">exit</span>6<spanclass="k">fiif</span><spanclass="o">[</span><spanclass="nv">$extension</span><spanclass="o">]</span><spanclass="k">then</span><spanclass="nb">echo</span>Removingpreviouslysubmittedfiles,<spanclass="k">if</span>any...<spanclass="nb">rm</span><spanclass="nt">-rf</span><spanclass="s2">"</span><spanclass="nv">$dest</span><spanclass="s2">/"</span><spanclass="k">*</span><spanclass="nb">echo</span>Markingyoursubmissionasanextension...<spanclass="nb">date</span><spanclass="o">&gt;</span><spanclass="nv">$dest</span>/EXTENSION<spanclass="se">\</span><spanclass="o">&amp;&amp;</span><spanclass="nb">chgrp</span><spanclass="nt">-R</span>cs50<spanclass="s2">"</span><spanclass="nv">$dest</span><spanclass="s2">"</span><spanclass="se">\</span><spanclass="o">&amp;&amp;</span><spanclass="nb">chmod</span><spanclass="nt">-R</span><spanclass="nv">g</span><spanclass="o">=</span>u<spanclass="s2">"</span><spanclass="nv">$dest</span><spanclass="s2">"</span><spanclass="se">\</span><spanclass="o">&amp;&amp;</span><spanclass="nb">chmod</span>g+rwx<spanclass="s2">"</span><spanclass="nv">$dest</span><spanclass="s2">"</span><spanclass="se">\</span><spanclass="o">&amp;&amp;</span><spanclass="nb">chmod</span>o-rwx<spanclass="s2">"</span><spanclass="nv">$dest</span><spanclass="s2">"</span><spanclass="se">\</span><spanclass="o">&amp;&amp;</span><spanclass="nb">echo</span>success!<spanclass="nv">$lab</span>extensionrequested.<spanclass="se">\</span><spanclass="o">&amp;&amp;</span><spanclass="nb">cat</span><spanclass="nv">$dest</span>/EXTENSION<spanclass="se">\</span><spanclass="o">&amp;&amp;</span><spanclass="nb">exit</span>0<spanclass="k">else</span><spanclass="nb">echo</span>Copyingneworchangedfiles...rsync<spanclass="nt">-aHv</span><spanclass="nt">--delete</span><spanclass="s2">"</span><spanclass="nv">$source</span><spanclass="s2">/"</span><spanclass="s2">"</span><spanclass="nv">$dest</span><spanclass="s2">/"</span><spanclass="se">\</span><spanclass="o">&amp;&amp;</span><spanclass="nb">chgrp</span><spanclass="nt">-R</span>cs50<spanclass="s2">"</span><spanclass="nv">$dest</span><spanclass="s2">"</span><spanclass="se">\</span><spanclass="o">&amp;&amp;</span><spanclass="nb">chmod</span><spanclass="nt">-R</span><spanclass="nv">g</span><spanclass="o">=</span>u<spanclass="s2">"</span><spanclass="nv">$dest</span><spanclass="s2">"</span><spanclass="se">\</span><spanclass="o">&amp;&amp;</span><spanclass="nb">chmod</span>g+rwx<spanclass="s2">"</span><spanclass="nv">$dest</span><spanclass="s2">"</span><spanclass="se">\</span><spanclass="o">&amp;&amp;</span><spanclass="nb">chmod</span>o-rwx<spanclass="s2">"</span><spanclass="nv">$dest</span><spanclass="s2">"</span><spanclass="se">\</span><spanclass="o">&amp;&amp;</span><spanclass="nb">echo</span>success!<spanclass="nv">$lab</span>submitted<spanclass="se">\</span><spanclass="o">&amp;&amp;</span><spanclass="nb">date</span><spanclass="se">\</span><spanclass="o">&amp;&amp;</span><spanclass="nb">exit</span>0<spanclass="k">fi</span><spanclass="nb">echo</span>Failed!<spanclass="nb">exit</span>99</code></pre></div></div></div></article></div></div><footerclass="site-footer"><divclass="wrapper"><h2class="footer-heading">Engs50(CS50)--DartmouthCollege</h2><p><fontsize=-1>ThisversionofthecourseisbaseduponthosedesignedbyProfessorsPalmer,Kotz,Zhou,Campbell,andBalkcom.Iamdeeplyindebtedtotheseoutstandingeducators.--<ahref="https://engineering.dartmouth.edu/people/faculty/stephen-taylor/">StephenTaylor</a></font></p><p><small>Thispagewaslastupdatedon<strong>2023-01-05</strong>at<strong>11:31</strong>.</small></p></div></footer></body></html>
