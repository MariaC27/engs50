https://thayer.github.io/engs50/Notes/memory/
2
14317
<!DOCTYPEhtml><html><head><metacharset="utf-8"><metahttp-equiv="X-UA-Compatible"content="IE=edge"><metaname="viewport"content="width=device-width,initial-scale=1"><title>Memory,pointers,andmalloc</title><metaname="description"content="InEngs50youwilllearnhowtodesign&buildlarge,reliable,maintainable,andunderstandablesoftwaresystems.IntheprocessyouwilllearntoprograminCwithUnixdevelopmenttools."><linkrel="shortcuticon"href="/engs50/50.png"/><linkrel="stylesheet"href="/engs50/css/main.css"><linkrel="canonical"href="/engs50/Notes/memory/"></head><body><headerclass="site-header"><aclass="site-title"href="/engs50/"><imgwidth=48align=centersrc="/engs50/50.png"alt="icon">Engs50(CS50)</a><navclass="site-nav">[<ahref="/engs50/Labs/">Labs</a>][<ahref="/engs50/Notes/">Notes</a>][<ahref="/engs50/Reading/">Reading</a>][<ahref="/engs50/Resources/">Resources</a>][<ahref="/engs50/Examples/">Examples</a>]</nav></header><divclass="page-content"><divclass="wrapper"><articleclass="post"><headerclass="post-header"><h1class="post-title">Memory,pointers,andmalloc</h1></header><divclass="post-content"><p>TotrulyunderstandC,andinparticular,theuseofpointers,youneedtounderstandhowCprogramsusememory.Thesesameconceptsunderlynearlyallprocedurallanguages,thoughsomelanguagescoverupthedetails.</p><!--***Westartedtodaywithademoofmysolutionsfor[Lab2](/engs50/Labs/Lab2)***.--><!--Terminal[script](/engs50/Notes/memory/script.txt)fromtoday'sclass.--><h3id="goals">Goals</h3><ul><li>torecognizethatalldataisstoredinmemory,thatmemoryisalinearsequenceofbytes,andthateverybytehasanumeric<em>address</em>.</li><li>tounderstandthatCstorestherunningprogramanditsdatainoneof<em>fourareasofmemory</em>,eachmanageddifferently.</li><li>tolearnaboutCsyntaxforpointers,addresses,anddereferencing.</li><li>tobegintoexploredynamicmemoryallocation.</li></ul><h3id="slides-and-examples">Slidesandexamples</h3><p>TodayIusedabriefsetofslides(in<ahref="/engs50/Notes/memory/memory-pointers-C.key">Keynote</a>or<ahref="/engs50/Notes/memory/memory-pointers-C.pdf">PDF</a>)toexplainmemory,addresses,andpointers,complementingthenotesbelow.Theslidesreferenceseveralexamples:</p><ul><li><ahref="/engs50/Examples/pointer0.c">pointer0.c</a></li><li><ahref="/engs50/Examples/pointer1.c">pointer1.c</a></li><li><ahref="/engs50/Examples/pointer2.c">pointer2.c</a></li><li><ahref="/engs50/Examples/pointer3.c">pointer3.c</a></li></ul><h1id="memory-and-addresses">Memory,andaddresses</h1><p>Everybitofinformationthecomputerneedsmustbestoredsomewhereinmemory-whetherinstructionsordata.Thecomputer’smemoryisasequenceofbytes,eachbytewithitsownnumeric<em>address</em>.Ifthecomputerhasonemegabyteofmemory,these2^20byteswillbenumberedfrom0to2^20-1,thatis,from0to1,048,575.Or,sincewe’recomputerscientists,weworkinhexadecimalratherthandecimal;thebytesarenumberedfrom00000toFFFFF.Inpractice,wetendtowritehexadecimalnumbersinCnotation:0x00000to0xFFFFF.</p><p>Givenavariable,wecanuseaCoperator<codeclass="language-plaintexthighlighter-rouge">&amp;</code>togetitsaddress.Youmightreadthisoperatoras“addressof…”.</p><divclass="language-chighlighter-rouge"><divclass="highlight"><preclass="highlight"><code><spanclass="kt">int</span><spanclass="n">x</span><spanclass="o">=</span><spanclass="mi">42</span><spanclass="p">;</span><spanclass="kt">int</span><spanclass="o">*</span><spanclass="n">xp</span><spanclass="o">=</span><spanclass="o">&amp;</span><spanclass="n">x</span><spanclass="p">;</span></code></pre></div></div><p>Thefirstvariable<codeclass="language-plaintexthighlighter-rouge">x</code>isaninteger.Thesecondvariable<codeclass="language-plaintexthighlighter-rouge">xp</code>isapointertoaninteger,anditisinitializedtotheaddressinmemorywhere<codeclass="language-plaintexthighlighter-rouge">x</code>isstored.</p><blockquote><p>Bytheway,the<codeclass="language-plaintexthighlighter-rouge">NULL</code>pointerissimplyaddresszero(0x00000).TheOSarrangesforthatmemorysegmenttobeillegalforreadingorforwriting,soifyoutrytodereferenceanullpointerforreadingorwriting(think<codeclass="language-plaintexthighlighter-rouge">char*p=NULL;charc=*p;</code>)theOSwillcatchitandtriggera‘segmentationfault’.</p></blockquote><p>Whenyourunyourprogram,itbecomesa<em>process</em>withinUnix.(Toseealistofallyourprocesses,type<codeclass="language-plaintexthighlighter-rouge">ps</code>atthebashcommandline.Tosee<em>all</em>theprocessesrunningonthesystem,try<codeclass="language-plaintexthighlighter-rouge">psax</code>.)Yourprogram’sexecutablecodeiscopiedintomemorysotheprocessorcanreadtheinstructionsandexecutethem.Thisregionisoftencalledthe<em>codesegment</em>or<em>textsegment</em>).</p><p>Let’sfocusondata,whichliveintheotherthreesegments.</p><h2id="three-regions-of-data-memory">Threeregionsofdatamemory</h2><p>Cstoresallofthedatayourprogrammanipulatesinthreedistinctregionsofmemory(aka<em>segments</em>).There’snothingspecialabouteachregion-they’reallsomewhereinthatlinearsequenceofbytes-butCmanageseachdifferently.Let’slookateachinturn.</p><h3id="global-memory-aka-static">Globalmemory(akastatic)</h3><p>Thesimplestregioniscalled‘global’(or‘static’)storage,andit’swhereglobalvariableslive.Ifyoudefineaconstantorvariableoutsideofanyfunction,ithas</p><ul><li><em>globalscope</em>-meaningthatitisvisibletoallcodeinanyfunctionwithinthecurrentfile,and</li><li><em>staticstorage</em>-meaningthatCallocatesspaceforit(andinitializesthecontents)beforetheprogrambeginsexecuting;itsaddresswillneverchangethroughouttheexecutionoftheprogram(hencethename‘static’).</li></ul><p>Forexample,</p><divclass="language-chighlighter-rouge"><divclass="highlight"><preclass="highlight"><code><spanclass="k">const</span><spanclass="kt">float</span><spanclass="n">pi</span><spanclass="o">=</span><spanclass="mi">3</span><spanclass="p">.</span><spanclass="mi">1415926535</span><spanclass="p">;</span><spanclass="k">const</span><spanclass="kt">char</span><spanclass="n">usage</span><spanclass="p">[]</span><spanclass="o">=</span><spanclass="s">"Usage:dog[-n][-mmapfile][-][filename]...</span><spanclass="se">\n</span><spanclass="s">"</span><spanclass="p">;</span><spanclass="kt">int</span><spanclass="n">error_count</span><spanclass="o">=</span><spanclass="mi">0</span><spanclass="p">;</span><spanclass="kt">int</span><spanclass="nf">main</span><spanclass="p">()</span><spanclass="p">{</span><spanclass="p">...</span><spanclass="p">}</span></code></pre></div></div><p>Theabovedeclaresthreeglobalvariables,twoofwhichareconstantsandoneofwhichisvariable.Allarevisibletofunctionsdefinedbelowtheirdeclaration.GlobalvariablesarealwaysdeclaredatthetopofaCfile,after<codeclass="language-plaintexthighlighter-rouge">#include</code>directivesandbeforeanyfunctiondefinitions.</p><p>Globalvariablescanbehandy,andsometimesnecessary,butitisgoodstyletoavoiduseofglobalvariables.(Globalconstantsaregenerallyok.)Well-modularizedprogramskeeptheirdataclose-passingthedata(orpointerstodata)amongfunctions.</p><p>Therearetwokindsof‘global’inC:globalwithinaCfile,andglobalacrossallCfilesintheprogram.Theformerarereasonable,ifusedcarefully,butthelatteraremoredangerous.We’lldiscussthedifferenceslater,ifwehavetime.</p><h3id="the-stack-for-local-variables">TheStack(forlocalvariables)</h3><p>Alloftheexamplecodewe’veseensofarmakesextensiveuseoflocalvariables;thesevariablesaredefinedwithinafunctionandhave</p><ul><li><em>localscope</em>-meaningthatthevariableisvisiblewithinthefunctiononly,and</li><li><em>stackstorage</em>-meaningthatCallocatesspaceforthevariablewithinthestackframeforthisparticularinstanceofthisfunctioncall.</li></ul><p><strong>Note:</strong>Localvariablesincludethefunction’sparameters.</p><p>Thinkabouthowastackworks.Whentheprogramstarts,Callocatesachunkofbytesonthestacktoholdallthevariablesdefinedin<codeclass="language-plaintexthighlighter-rouge">main</code>.Thischunkiscalleda‘stackframe’.<em>Itdoesnotinitializethesebytes</em>-theprogrammustinitializevariables,eitherinthevariabledefinitionorinthecodetofollow.Later,when<codeclass="language-plaintexthighlighter-rouge">main</code>callsanotherfunction,say,<codeclass="language-plaintexthighlighter-rouge">readline</code>,itallocatesanotherchunkofbytesonthestack(youcouldsay,it<em>pushesanotherframeonthestack</em>)toholdthevariablesdefinedby<codeclass="language-plaintexthighlighter-rouge">readline</code>.When<codeclass="language-plaintexthighlighter-rouge">readline</code>calls<codeclass="language-plaintexthighlighter-rouge">fgetc</code>,itpushesanotherstackframeonthestack,achunkofbytestoholdthevariablesdefinedwithin<codeclass="language-plaintexthighlighter-rouge">fgetc</code>.When<codeclass="language-plaintexthighlighter-rouge">fgetc</code>returns,it<em>popstheframeoffthestack</em>.When<codeclass="language-plaintexthighlighter-rouge">readline</code>returns,itpopsthatframeoffthestack.Thelocalvariablesdefinedin<codeclass="language-plaintexthighlighter-rouge">readline</code>arenotjustsyntacticallyinaccessibleto<codeclass="language-plaintexthighlighter-rouge">main</code>(outofscope),theirmemoryisnolongerallocated.Indeed,when<codeclass="language-plaintexthighlighter-rouge">main</code>callsanotherfunction,say,<codeclass="language-plaintexthighlighter-rouge">printf</code>,astackframeispushedontothestackfor<codeclass="language-plaintexthighlighter-rouge">printf</code>,re-usingthesamememorythathadbeenallocatedto<codeclass="language-plaintexthighlighter-rouge">readline</code>and<codeclass="language-plaintexthighlighter-rouge">fgetc</code>).</p><h3id="the-heap-dynamically-allocated-memory">TheHeap(dynamicallyallocatedmemory)</h3><p>Thethirdkindofdatamemoryiscalledthe“heap”.Itisalargeregionofmemorymanagedby<codeclass="language-plaintexthighlighter-rouge">malloc()</code>.Eachcallto<codeclass="language-plaintexthighlighter-rouge">malloc()</code>selectsachunkofbytesfromtheheapregion,andreturnsapointertothatchunk.Itkeepscarefulrecordsofwhichchunkshavebeenallocated,andwhicharefree.Itistheprogrammer’sresponsibilityto,eventually,returnunusedchunksbycalling<codeclass="language-plaintexthighlighter-rouge">free(p)</code>where<codeclass="language-plaintexthighlighter-rouge">p</code>isapointerearlierreturnedby<codeclass="language-plaintexthighlighter-rouge">malloc</code>.Iftheprogrammerforgetstocall<codeclass="language-plaintexthighlighter-rouge">free</code>,thatchunkcanneverbereused,andeventually<codeclass="language-plaintexthighlighter-rouge">malloc</code>willrunoutoffreechunkstobeallocated.(Thissituationiscalleda‘memoryleak.’)Itisalsotheprogrammer’sresponsibilitynottocall<codeclass="language-plaintexthighlighter-rouge">free</code>multipletimesforthesamepointer;doingsomaycorrupttherecordskeptbythememory-allocationlibrary,andwilllikelyleadtoprogramcrashes.</p><p>Therearefourrelatedfunctionsyoushouldunderstand:</p><ul><li><codeclass="language-plaintexthighlighter-rouge">p=malloc(n)</code>-allocates<codeclass="language-plaintexthighlighter-rouge">n</code>bytesofheapmemory</li><li><codeclass="language-plaintexthighlighter-rouge">p=calloc(count,size)</code>allocates<codeclass="language-plaintexthighlighter-rouge">count*size</code>bytesofheapmemory</li><li><codeclass="language-plaintexthighlighter-rouge">p=realloc(p,n)</code>-where<codeclass="language-plaintexthighlighter-rouge">p</code>isapointertoheapmemory-expands(orshrinks)itsallocationto<codeclass="language-plaintexthighlighter-rouge">n</code>bytes.</li><li><codeclass="language-plaintexthighlighter-rouge">free(p)</code>-where<codeclass="language-plaintexthighlighter-rouge">p</code>isapointertoheapmemory-releasesthatportionofheapmemoryforfutureuse.</li></ul><p>Checkoutthis<ahref="https://www.youtube.com/watch?v=5VnDaHBi8dM">animatedexplanationofpointers</a>.Fun!</p><h3id="on-exit">Onexit</h3><p>Whentheprocessexits,allitsmemoryisreleased-thefoursegments(code,global,stack,andheap)disappear.</p><h3id="activity">Activity</h3><p>Today’s<ahref="activity.html">activity</a>looksataprogramthatcopiesastring-andtriestofindabug.</p></div></article></div></div><footerclass="site-footer"><divclass="wrapper"><h2class="footer-heading">Engs50(CS50)--DartmouthCollege</h2><p><fontsize=-1>ThisversionofthecourseisbaseduponthosedesignedbyProfessorsPalmer,Kotz,Zhou,Campbell,andBalkcom.Iamdeeplyindebtedtotheseoutstandingeducators.--<ahref="https://engineering.dartmouth.edu/people/faculty/stephen-taylor/">StephenTaylor</a></font></p><p><small>Thispagewaslastupdatedon<strong>2023-01-05</strong>at<strong>11:31</strong>.</small></p></div></footer></body></html>
